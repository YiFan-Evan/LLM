[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format without any additional text.)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    h = 0\n    while h < len(arr):\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "```\n    arr[i], arr[min_index] = arr[min_index], arr[i]```"}, {"role": "user", "content": "def selection_sort(arr):\n    h = -1\n    while h < len(arr) - 1:\n        h += 1\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "Your function `selection_sort` is a correct implementation of the selection sort algorithm in Python. The algorithm works by repeatedly finding the minimum element from the unsorted part of the array and swapping it with the first unsorted element.\n\nHere's a breakdown of how your code works:\n\n1. Initialize `h` to -1, which will be used as the index of the smallest element found so far.\n2. Use a while loop to iterate over each element in the array.\n3. Within the outer loop, increment `h` to move through the array.\n4. Initialize `z` to `h + 1`, which will be used to compare elements with the current `h` index.\n5. Use another while loop to find the smallest element in the remaining unsorted portion of the array.\n6. If an element at index `z` is smaller than the element at index `h`, swap them.\n7. Increment `z` to continue checking the rest of the array.\n8. Once all elements have been checked, return the sorted array.\n\nThe provided code correctly implements the selection sort algorithm and should work for sorting an array of integers or any other comparable elements."}]