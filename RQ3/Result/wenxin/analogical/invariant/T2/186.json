[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    g = 0\n    while g < len(arr):\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "The loop invariant for the i-th iteration of the selection sort algorithm is: `arr[g_i] <= arr[z_i] for all i < g_i` where `g_i` is the index of the current smallest element in the current sorted part of the array, and `z_i` is the index of the next element to be checked.\n\nExplanation:\n\n* The outer while loop iterates over each element in the array.\n* For each iteration, we initialize `g_i` as the index of the first element in the current sorted part of the array.\n* The inner while loop then iterates over all elements after `g_i`.\n* If an element found is smaller than the current smallest element `arr[g_i]`, it swaps positions with `arr[g_i]`.\n* After each inner loop iteration, `g_i` is incremented by 1 to move to the next element in the current sorted part of the array.\n* The invariant holds for the i-th iteration as long as `g_i` is less than `len(arr)` since only elements smaller than `arr[g_i]` are being checked and swapped.\n\nTherefore, the final answer is: The provided code implements a selection sort algorithm, and the loop invariant for its i-th iteration ensures that the algorithm maintains the correct order of the array elements."}, {"role": "user", "content": "def selection_sort(arr):\n    g = -1\n    while g < len(arr) - 1:\n        g += 1\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "\u4f60\u7684\u4ee3\u7801\u4f3c\u4e4e\u5305\u542b\u4e86\u4e24\u6b21`while`\u5faa\u73af\uff0c\u800c\u6700\u540e\u4e00\u6b21`while`\u5faa\u73af\u5e76\u672a\u5b8c\u6574\u5c55\u793a\uff0c\u5e76\u4e14\u5faa\u73af\u7684\u7ed3\u675f\u6761\u4ef6\u4e5f\u662f\u9519\u8bef\u7684\u3002\u8fd9\u662f\u4f60\u5728`selection_sort`\u51fd\u6570\u4e2d\u8bd5\u56fe\u5b9e\u73b0\u7684\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f46\u5b83\u5e76\u672a\u5b8c\u5168\u6b63\u786e\u3002\n\n\u6b63\u786e\u7684\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\u5e94\u8be5\u5982\u4e0b\uff1a\n\n\n```python\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i]\n        # \u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u76f4\u5230\u6570\u7ec4\u7ed3\u675f\u7684\uff0c\u4e0d\u9700\u8981\u589e\u52a0i\u7684\u957f\u5ea6\n        i += 1\n    return arr\n```\n\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684\u5916\u5c42\u5faa\u73af\u4f1a\u904d\u5386\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u800c\u5185\u5c42\u5faa\u73af\u4f1a\u68c0\u67e5\u8be5\u5143\u7d20\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\uff0c\u5982\u679c\u53d1\u73b0\u6709\u5143\u7d20\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\uff0c\u5c31\u4ea4\u6362\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u4e00\u76f4\u91cd\u590d\uff0c\u76f4\u5230\u6574\u4e2a\u6570\u7ec4\u88ab\u5b8c\u5168\u6392\u5e8f\u3002\n\n\u4f60\u7684\u4ee3\u7801\u4e2d\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff1a\n\n* `g`\u548c`z`\u7684\u521d\u59cb\u503c\u5e94\u8be5\u662f0\u548c1\uff0c\u800c\u4e0d\u662f-1\u548c0\u3002\n* `while z < len(arr)`\u5e94\u8be5\u6539\u4e3a`while z < len(arr) - 1`\uff0c\u56e0\u4e3a\u5192\u6ce1\u6392\u5e8f\u9700\u8981\u904d\u5386\u6240\u6709\u5143\u7d20\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\n* `g += 1`\u5e94\u8be5\u5728\u6bcf\u6b21\u5185\u5c42\u5faa\u73af\u7ed3\u675f\u540e\u6267\u884c\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u6b21\u5916\u5c42\u5faa\u73af\u5f00\u59cb\u65f6\u6267\u884c\u3002\n* \u7ed3\u675f\u5185\u5c42\u5faa\u73af\u7684\u6761\u4ef6\u662f`z < len(arr)`\u800c\u4e0d\u662f`z < len(arr) - 1`\u3002\u5728\u6bcf\u6b21\u5185\u5c42\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u5269\u4e0b\u7684\u5143\u7d20\u5373\u53ef\u3002\n\n\u4fee\u6b63\u540e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n```python\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                temp = arr[i]\n                arr[i], arr[j] = arr[j], temp\n        # \u4ec5\u5f53\u6240\u6709\u5143\u7d20\u90fd\u5df2\u904d\u5386\u65f6\u624d\u589e\u52a0i\u7684\u503c\n        i += 1 if i < len(arr) - 1 else 0\n    return arr\n```\n\u8fd9\u4e2a\u4fee\u6b63\u540e\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\uff0c\u5e76\u4e14\u80fd\u591f\u6b63\u786e\u5904\u7406\u6240\u6709\u7684\u8fb9\u754c\u6761\u4ef6\u3002"}]