[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    t = 0\n    while t < len(arr):\n        z = t + 1\n        while z < len(arr):\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe `selection_sort` function sorts an array by repeatedly finding the minimum element from the unsorted part of the array and moving it to the beginning of the unsorted section. The algorithm maintains two subarrays within the given array:\n\n1. **Sorted Subarray**: Elements before the current index `t` are sorted.\n2. **Unsorted Subarray**: Elements from index `t` to the end of the array are unsorted.\n\nDuring each iteration of the outer loop, the smallest element in the unsorted subarray is found and swapped with the element at the start of the unsorted subarray (i.e., the element at index `t`). This ensures that after each iteration of the outer loop, the first `t+1` elements are sorted.\n\n### Loop Invariant\n\nTo prove the partial correctness of the `selection_sort` function, we need to define a loop invariant for the outer loop. The loop invariant should hold true before and after each iteration of the loop.\n\n**Loop Invariant for the Outer Loop:**\n- **Invariant Statement:** `sorted_value = min(arr[:t])`\n\nThis invariant means that after each iteration of the outer loop, the first `t` elements of the array (`arr[:t]`) are sorted in non-decreasing order.\n\n### Answer\n\nTherefore, the final answer is:\n```\nsorted_value = min(arr[:t])\n```"}, {"role": "user", "content": "def selection_sort(arr):\n    t = 0\n    while t <= len(arr) - 1:\n        z = t + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe `selection_sort` function sorts an array using the selection sort algorithm. During each pass through the array, the algorithm finds the minimum element from the unsorted portion of the array and places it at the beginning of the unsorted portion. Specifically, the algorithm maintains two subarrays within the given array:\n\n1. **Sorted Subarray**: Elements from the start of the array up to the current index `t` (inclusive).\n2. **Unsorted Subarray**: Elements from the current index `t` to the end of the array.\n\nIn each iteration of the outer loop, the algorithm selects the smallest element in the unsorted subarray and swaps it with the element at the start of the unsorted subarray (index `t`). This ensures that after each iteration of the outer loop, the first `t+1` elements are sorted in non-decreasing order.\n\n### Loop Invariant\n\nTo prove the partial correctness of the `selection_sort` function, we need to define a loop invariant for the outer loop. The loop invariant should hold true before and after each iteration of the loop.\n\n**Loop Invariant for the Outer Loop:**\n- **Invariant Statement:** `sorted_value = min(arr[:t+1])`\n\nThis invariant means that after each iteration of the outer loop, the first `t+1` elements of the array (`arr[:t+1]`) are sorted in non-decreasing order.\n\n### Answer\n\nTherefore, the final answer is:\n```\nsorted_value = min(arr[:t+1])\n```"}]