[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    b = 0\n    while b < len(arr):\n        z = b + 1\n        while z < len(arr):\n            if arr[z] < arr[b]:\n                temp = arr[b]\n                arr[b] = arr[z]\n                arr[z] = temp\n            z += 1\n        b += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` algorithm works by dividing the array into two parts: the sorted part and the unsorted part. In each iteration of the outer loop, the smallest element from the unsorted part is selected and moved to the end of the sorted part. This process continues until the entire array is sorted.\n\nTo prove the partial correctness of the algorithm, we need to identify a loop invariant for the outer loop. A loop invariant is a condition that holds true before and after each iteration of the loop. For the selection sort algorithm, a suitable loop invariant would state that at the start of each iteration of the outer loop, the first `b` elements are already sorted in non-decreasing order.\n\n### Loop Invariant\n\nFor the outer loop `while b < len(arr)`, a loop invariant can be stated as:\n\n- The first `b` elements of the array `arr` are sorted in non-decreasing order.\n\nFormally, this can be written as:\n- `sorted_value = fun(arr[0]->arr[b-1])` where `fun` represents the condition that the elements from index 0 to `b-1` are sorted in non-decreasing order.\n\n### Answer\n\nTherefore, the final answer is:\n- `sorted_value = fun(arr[0]->arr[b-1])`"}, {"role": "user", "content": "def selection_sort(arr):\n    b = 0\n    while b <= len(arr) - 1:\n        z = b + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[b]:\n                temp = arr[b]\n                arr[b] = arr[z]\n                arr[z] = temp\n            z += 1\n        b += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` algorithm sorts an array by repeatedly finding the minimum element from the unsorted portion of the array and moving it to the beginning of the unsorted portion. The outer loop iterates over each position in the array, ensuring that the subarray from the start up to the current position `b` is sorted.\n\nTo prove the partial correctness of the algorithm, we need a loop invariant for the outer loop. Specifically, we want to show that at the start of each iteration of the outer loop, the first `b` elements of the array are sorted in non-decreasing order.\n\n### Loop Invariant\n\nFor the outer loop `while b <= len(arr) - 1`, the loop invariant is:\n\n- The first `b` elements of the array `arr` are sorted in non-decreasing order.\n\nThis can be formally written as:\n- `sorted_value = fun(arr[0]->arr[b-1])`\n\nHere, `fun` represents the condition that the elements from index `0` to `b-1` are sorted in non-decreasing order.\n\n### Answer\n\nTherefore, the final answer is:\n- `sorted_value = fun(arr[0]->arr[b-1])`"}]