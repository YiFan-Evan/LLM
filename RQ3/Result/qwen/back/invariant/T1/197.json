[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r < len(arr):\n        z = r + 1\n        while z < len(arr):\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` algorithm works by dividing the input array into two parts: a sorted part and an unsorted part. In each iteration of the outer loop, the algorithm finds the minimum element from the unsorted part and swaps it with the first element of the unsorted part. This effectively moves the smallest unsorted element to its correct position in the sorted part of the array.\n\n### Loop Invariant\n\nTo establish the loop invariant, we need to define a statement that holds true before and after each iteration of the outer loop. The invariant should capture the state of the array up to the current position `r`.\n\nThe loop invariant for the i-th iteration of the outer loop can be stated as follows:\n\n- Before the i-th iteration, the first `r` elements of the array are sorted and the remaining elements are unsorted.\n- After the i-th iteration, the first `r+1` elements of the array are sorted and the remaining elements are unsorted.\n\nGiven this, we can formulate the loop invariant as:\n\n**The first `r` elements of `arr` are sorted in non-decreasing order.**\n\nIn the required format, this can be expressed as:\n\n**\"sorted_value = fun(arr[r]->arr[len(arr)])\"**\n\nHowever, since we are asked to use a specific format, let's adjust it slightly to fit the format provided:\n\n**\"sorted_value = fun(arr[0]->arr[r-1])\"**\n\nHere, `fun` represents the condition that the elements from index `0` to `r-1` are sorted in non-decreasing order.\n\n### Final Answer\n\nTherefore, the final answer is: \n\n**\"sorted_value = fun(arr[0]->arr[r-1])\"**"}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r <= len(arr) - 1:\n        z = r + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` algorithm sorts an array by repeatedly finding the minimum element from the unsorted portion of the array and placing it at the beginning of the unsorted portion. The algorithm uses two nested loops: the outer loop iterates over each position in the array, and the inner loop finds the minimum element in the unsorted portion starting from the current position of the outer loop.\n\n### Loop Invariant\n\nWe need to identify a loop invariant for the outer loop, which runs from `r = 0` to `r = len(arr) - 1`. The loop invariant should hold true before and after each iteration of the outer loop.\n\nThe invariant for the outer loop can be described as follows:\n\n- **Before the i-th iteration:** The first `r` elements of the array (`arr[0]` to `arr[r-1]`) are sorted in non-decreasing order.\n- **After the i-th iteration:** The first `r+1` elements of the array (`arr[0]` to `arr[r]`) are sorted in non-decreasing order.\n\nThis means that after the i-th iteration, the smallest `r+1` elements are in their correct positions in the sorted part of the array.\n\n### Final Answer\n\nTherefore, the final answer is:\n\n**\"sorted_value = fun(arr[0]->arr[r-1])\"**\n\nWhere `fun` represents the condition that the elements from index `0` to `r-1` are sorted in non-decreasing order."}]