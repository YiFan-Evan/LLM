[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    q = 0\n    while q < len(arr):\n        z = q + 1\n        while z < len(arr):\n            if arr[z] < arr[q]:\n                temp = arr[q]\n                arr[q] = arr[z]\n                arr[z] = temp\n            z += 1\n        q += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` function sorts an array using the selection sort algorithm. In this algorithm, the array is divided into two parts: the sorted part and the unsorted part. Initially, the sorted part is empty and the unsorted part is the entire array.\n\nDuring each iteration of the outer loop (controlled by `q`), the smallest element from the unsorted part of the array is selected and swapped with the element at the beginning of the unsorted part. This effectively grows the sorted part of the array by one element and shrinks the unsorted part by one element.\n\n### Loop Invariant\n\nFor the outer loop (controlled by `q`), we need a loop invariant that captures the state of the array after `q` iterations of the loop. Specifically, we want to express that the first `q` elements of the array are sorted and represent the smallest `q` elements from the original array.\n\nGiven this, the loop invariant can be expressed as:\n\n- **Loop Invariant**: `sorted_value = fun(arr[0]->arr[q-1])`\n\nTo make this more concrete, we can say that the first `q` elements of the array are the smallest `q` elements from the original array, and they are sorted in non-decreasing order.\n\nHowever, since the question asks for the loop invariant in the form `xxx_value = fun(arr[xxx]->arr[xxx])`, we can rephrase the invariant as follows:\n\n- **Loop Invariant**: `sorted_value = min(arr[0]->arr[q-1])`\n\nBut to fit the exact format requested, we need to consider the sorted nature explicitly. Therefore, we can use the fact that the first `q` elements are sorted and represent the smallest `q` elements.\n\n- **Loop Invariant**: `sorted_value = arr[0]->arr[q-1] is_sorted_and_smallest_q_elements`\n\nSince the exact format needs to follow the pattern strictly, we can generalize the invariant as:\n\n- **Loop Invariant**: `sorted_value = arr[0]->arr[q-1]`\n\n### Final Answer\n\nTherefore, the final answer is: \n\n`sorted_value = arr[0]->arr[q-1]`"}, {"role": "user", "content": "def selection_sort(arr):\n    q = 0\n    while q <= len(arr) - 1:\n        z = q + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[q]:\n                temp = arr[q]\n                arr[q] = arr[z]\n                arr[z] = temp\n            z += 1\n        q += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` function sorts an array using the selection sort algorithm. The algorithm works by repeatedly finding the minimum element from the unsorted portion of the array and placing it at the beginning of the unsorted portion. This process is repeated until the entire array is sorted.\n\n### Loop Invariant\n\nFor the outer loop (controlled by `q`), the loop invariant should capture the state of the array after `q` iterations of the loop. Specifically, after `q` iterations, the first `q` elements of the array should be the smallest `q` elements from the original array, and they should be sorted in non-decreasing order.\n\nGiven this, the loop invariant can be expressed as:\n\n- **Loop Invariant**: `sorted_value = arr[0]->arr[q-1]`\n\nHowever, to fit the exact format requested (`xxx_value = fun(arr[xxx]->arr[xxx])`), we need to ensure that the invariant reflects the sorted nature of the first `q` elements.\n\nThus, the loop invariant can be expressed as:\n\n- **Loop Invariant**: `sorted_value = arr[0]->arr[q-1] is_sorted`\n\n### Final Answer\n\nTherefore, the final answer is:\n\n`sorted_value = arr[0]->arr[q-1]`"}]