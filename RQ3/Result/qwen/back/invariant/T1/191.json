[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    l = 0\n    while l < len(arr):\n        z = l + 1\n        while z < len(arr):\n            if arr[z] < arr[l]:\n                temp = arr[l]\n                arr[l] = arr[z]\n                arr[z] = temp\n            z += 1\n        l += 1\n    return arr"}, {"role": "assistant", "content": "### Explanation of the Problem\n\nThe `selection_sort` function sorts an array using the Selection Sort algorithm. The fundamental principle of Selection Sort is that it repeatedly selects the smallest element from the unsorted portion of the array and places it at the beginning of the unsorted section. This process is repeated until the entire array is sorted.\n\n### Loop Invariant Analysis\n\nTo prove the partial correctness of the `selection_sort` function, we need to establish a loop invariant for the outer while loop. A loop invariant is a condition that holds true before and after each iteration of the loop.\n\n#### Outer Loop Invariant\n\nThe outer loop runs from `l = 0` to `len(arr) - 1`. After each iteration of this loop, the first `l` elements of the array are guaranteed to be sorted in non-decreasing order. Therefore, the loop invariant can be stated as:\n\n- **Invariant**: The subarray `arr[0] -> arr[l-1]` is sorted in non-decreasing order.\n\nThis invariant must hold true before the first iteration and should be maintained after each iteration.\n\n### Final Answer\n\nTherefore, the final answer is:\n- **Loop Invariant**: `sorted_value = arr[0:l]` \n\n(Note: While the exact format requested was `xxx_value = fun(arr[xxx]->arr[xxx])`, the provided format does not directly match typical loop invariant expressions. However, the concept is captured in the explanation above.)"}, {"role": "user", "content": "def selection_sort(arr):\n    l = 0\n    while l <= len(arr) - 1:\n        z = l + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[l]:\n                temp = arr[l]\n                arr[l] = arr[z]\n                arr[z] = temp\n            z += 1\n        l += 1\n    return arr"}, {"role": "assistant", "content": "### Explanation of the Problem\n\nThe `selection_sort` function aims to sort an array using the Selection Sort algorithm. The outer loop iterates over each position `l` in the array, and the inner loop finds the minimum element in the unsorted portion of the array starting from `l+1`. If a smaller element is found, it swaps it with the element at position `l`.\n\n### Loop Invariant Analysis\n\nWe need to determine a loop invariant for the outer loop. The loop invariant should capture the state of the array after each iteration of the outer loop.\n\n#### Outer Loop Invariant\n\nAfter the i-th iteration of the outer loop (i.e., when `l = i`), the first `i` elements of the array (`arr[0:i]`) are sorted in non-decreasing order.\n\n### Final Answer\n\nTherefore, the final answer is:\n- **Loop Invariant**: `sorted_value = arr[0:l]` \n\nThis means that after the i-th iteration of the outer loop, the subarray `arr[0:l]` is sorted in non-decreasing order."}]