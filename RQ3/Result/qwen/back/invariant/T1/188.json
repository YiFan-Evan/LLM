[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    i = 0\n    while i < len(arr):\n        z = i + 1\n        while z < len(arr):\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n        i += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe provided Python code implements the Selection Sort algorithm. This sorting algorithm works by dividing the input array into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the array, and the sublist of items remaining to be sorted that occupy the rest of the array. Initially, the sorted sublist is empty and the unsorted sublist is the entire input array. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\n\n### Loop Invariant Explanation\n\nTo prove the partial correctness of the `selection_sort` function, we need to establish a loop invariant for the outer loop. The loop invariant should hold true before and after each iteration of the loop.\n\n#### Outer Loop Invariant\n\n- **Invariant Statement**: At the start of each iteration of the outer loop (when `i` is about to change), the subarray `arr[0:i]` contains the smallest `i` elements of the original array, in sorted order.\n  \n  - **Formal Representation**: Therefore, the loop invariant can be expressed as:\n    ```\n    sorted_part_value = fun(arr[0:i] -> arr[0:i])\n    ```\n\n    Here, `fun` represents the property that the subarray `arr[0:i]` is sorted and contains the smallest `i` elements from the original array.\n\n### Answer\n\n```plaintext\nTherefore, the final answer is: sorted_part_value = fun(arr[0:i] -> arr[0:i])\n```\n\nThis means that at the beginning of each iteration of the outer loop, the subarray `arr[0:i]` is sorted and contains the smallest `i` elements from the original array."}, {"role": "user", "content": "def selection_sort(arr):\n    i = 0\n    while i <= len(arr) - 1:\n        z = i + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n        i += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe provided Python code implements the Selection Sort algorithm. The key idea behind Selection Sort is to divide the input array into two parts: the sorted part and the unsorted part. In each iteration of the outer loop, the algorithm finds the minimum element in the unsorted part and moves it to the end of the sorted part. \n\nTo prove the partial correctness of this algorithm, we need to establish a loop invariant for the outer loop. A loop invariant is a condition that holds true before and after each iteration of the loop.\n\n### Loop Invariant Explanation\n\nFor the outer loop, where `i` is the index that marks the boundary between the sorted and unsorted parts of the array:\n\n- **Invariant Statement**: At the start of each iteration of the outer loop (when `i` is about to change), the subarray `arr[0:i]` contains the smallest `i` elements of the original array, in sorted order.\n\n  - **Formal Representation**: \n    ```\n    sorted_part_value = fun(arr[0:i] -> arr[0:i])\n    ```\n\n### Answer\n\n```plaintext\nTherefore, the final answer is: sorted_part_value = fun(arr[0:i] -> arr[0:i])\n```\n\nThis means that at the beginning of each iteration of the outer loop, the subarray `arr[0:i]` is sorted and contains the smallest `i` elements from the original array."}]