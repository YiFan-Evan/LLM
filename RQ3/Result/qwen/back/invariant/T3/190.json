[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    k = 0\n    while k < len(arr):\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n        k += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe selection sort algorithm works by dividing the input array into two parts: a sorted part and an unsorted part. In each iteration of the outer loop, the algorithm finds the smallest element in the unsorted part and swaps it with the first element of the unsorted part. This effectively moves the boundary between the sorted and unsorted parts one position to the right.\n\nTo prove the partial correctness of the program, we need to find a loop invariant that holds true before and after each iteration of the outer loop (`while k < len(arr)`).\n\n### Loop Invariant\n\nThe loop invariant for the i-th iteration of the outer loop can be described as follows:\n\n- **Loop Invariant**: `sorted_elements_value = fun(arr[0]->arr[k-1])` where `fun` is a function that ensures the elements from index `0` to `k-1` are in non-decreasing order.\n\nSince the elements from index `0` to `k-1` are guaranteed to be in non-decreasing order after each iteration of the outer loop, we can define `fun` as the property of being sorted.\n\n### Therefore, the final answer is:\n```\nsorted_elements_value = fun(arr[0]->arr[k-1])\n```"}, {"role": "user", "content": "def selection_sort(arr):\n    k = len(arr)\n    while k > 0:\n        k -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "It looks like there are a few issues in the provided code, specifically with variable names and loop logic. Let's correct those first:\n\n1. The initial value of `k` should start at `0`, not `len(arr)`.\n2. The inner loop variable `z` should start at `k + 1` and go up to `len(arr) - 1`.\n3. The comparison inside the inner loop should check if `arr[z] < arr[k]` instead of `arr[z] < arr[i]`.\n\nHere is the corrected version of the code:\n\n```python\ndef selection_sort(arr):\n    n = len(arr)\n    k = 0\n    while k < n:\n        min_index = k\n        z = k + 1\n        while z < n:\n            if arr[z] < arr[min_index]:\n                min_index = z\n            z += 1\n        # Swap the found minimum element with the first element\n        arr[k], arr[min_index] = arr[min_index], arr[k]\n        k += 1\n    return arr\n```\n\nNow, let's determine the loop invariant for the i-th iteration of the outer loop (`while k < n`).\n\n### Fundamental Principles Involved\n\nThe selection sort algorithm sorts the array by repeatedly finding the minimum element from the unsorted part and putting it at the beginning. The outer loop runs from `0` to `n-1`, where `n` is the length of the array. After each iteration of the outer loop, the first `k` elements of the array are sorted and in their correct positions.\n\n### Loop Invariant\n\nThe loop invariant for the i-th iteration of the outer loop can be described as follows:\n\n- **Loop Invariant**: `sorted_elements_value = fun(arr[0]->arr[k-1])` where `fun` is a function that ensures the elements from index `0` to `k-1` are in non-decreasing order.\n\nSince the elements from index `0` to `k-1` are guaranteed to be in non-decreasing order after each iteration of the outer loop, we can define `fun` as the property of being sorted.\n\n### Therefore, the final answer is:\n```\nsorted_elements_value = fun(arr[0]->arr[k-1])\n```"}]