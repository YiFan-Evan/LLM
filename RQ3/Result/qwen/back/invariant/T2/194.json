[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    o = 0\n    while o < len(arr):\n        z = o + 1\n        while z < len(arr):\n            if arr[z] < arr[o]:\n                temp = arr[o]\n                arr[o] = arr[z]\n                arr[z] = temp\n            z += 1\n        o += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` function sorts an array by repeatedly finding the minimum element from the unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array:\n\n1. The subarray which is already sorted.\n2. The remaining subarray which is unsorted.\n\nIn every iteration of the outer loop (controlled by the variable `o`), the algorithm finds the smallest element in the unsorted subarray and swaps it with the element at the beginning of the unsorted subarray. This ensures that after each iteration of the outer loop, the first `o+1` elements are sorted.\n\n### Loop Invariant\n\nFor the outer loop, we want to establish a loop invariant that captures the state of the array after `o` iterations. \n\n- **Loop Invariant**: After the i-th iteration of the outer loop (`o == i`), the first `i` elements of `arr` are sorted in non-decreasing order.\n\nWe can express this loop invariant as:\n- `sorted_value = arr[0:i]`\n\nHowever, since we need to follow the exact format specified, let's break it down into a more specific form:\n\n- `sorted_value = arr[0:o]`\n\nThis loop invariant holds because after each iteration of the outer loop, the first `o` elements are guaranteed to be sorted.\n\n### Answer\n\nTherefore, the final answer is: `sorted_value = arr[0:o]`"}, {"role": "user", "content": "def selection_sort(arr):\n    o = -1\n    while o < len(arr) - 1:\n        o += 1\n        z = o + 1\n        while z < len(arr):\n            if arr[z] < arr[o]:\n                temp = arr[o]\n                arr[o] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` function sorts an array by iteratively selecting the minimum element from the unsorted portion of the array and placing it at the start of the unsorted portion. The algorithm works as follows:\n\n1. The outer loop (controlled by `o`) runs from `0` to `len(arr) - 2`.\n2. For each iteration of the outer loop, the inner loop (controlled by `z`) starts from `o + 1` and goes to `len(arr) - 1`, finding the minimum element in the unsorted portion.\n3. If the current element in the inner loop is smaller than the element at the start of the unsorted portion, they are swapped.\n\nThe goal is to ensure that after each iteration of the outer loop, the first `o + 1` elements are sorted in non-decreasing order.\n\n### Loop Invariant\n\nFor the outer loop, the loop invariant should capture the state of the array after `o` iterations. Specifically, the first `o + 1` elements of the array are sorted in non-decreasing order.\n\nWe can express this loop invariant as:\n- `sorted_value = arr[0:o+1]`\n\nHowever, since we need to follow the exact format specified, we can write it as:\n- `sorted_value = arr[0:o+1]`\n\nThis loop invariant holds because after each iteration of the outer loop, the first `o + 1` elements are guaranteed to be sorted.\n\n### Answer\n\nTherefore, the final answer is: `sorted_value = arr[0:o+1]`"}]