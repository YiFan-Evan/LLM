[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r < len(arr):\n        z = r + 1\n        while z < len(arr):\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe given program implements the Selection Sort algorithm, which sorts an array by repeatedly finding the minimum element from the unsorted part and putting it at the beginning. In each iteration of the outer loop, the smallest element in the unsorted portion of the array is moved to its correct position.\n\n- **Outer Loop (`r`):** This loop runs from `r = 0` to `r = len(arr) - 1`. After each iteration of this loop, the first `r` elements of the array are sorted in ascending order.\n- **Inner Loop (`z`):** This loop runs from `z = r + 1` to `z = len(arr) - 1`. It finds the minimum element in the unsorted portion of the array and swaps it with the element at index `r`.\n\n### Loop Invariant\n\nTo prove the partial correctness of the program, we need to establish a loop invariant for the outer loop. A loop invariant is a condition that holds true before and after each iteration of the loop.\n\nFor the outer loop:\n\n- **Loop Invariant:** After the i-th iteration of the outer loop (i.e., when `r = i`), the first `i` elements of `arr` are sorted in ascending order.\n\nThis can be expressed as:\n- `sorted_value = arr[:r] == sorted(arr[:r])`\n\nSince we are asked to write the loop invariant in the form 'xxx_value = fun(arr[xxx]->arr[xxx])', we can reformulate it as follows:\n- `sorted_value = fun(arr[0:r]->arr[0:r])`, where `fun` is a function that checks if the elements in the range `[0:r]` are sorted.\n\nTherefore, the final answer is:\n- `sorted_value = fun(arr[0:r]->arr[0:r])`"}, {"role": "user", "content": "def selection_sort(arr):\n    r = -1\n    while r < len(arr) - 1:\n        r += 1\n        z = r + 1\n        while z < len(arr):\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe provided `selection_sort` function sorts an array using the Selection Sort algorithm. Here\u2019s how it works:\n\n- **Initialization:** The variable `r` starts at `-1`.\n- **Outer Loop (`r`):** This loop runs until `r` reaches `len(arr) - 1`. In each iteration, `r` is incremented by 1, indicating the start of the next unsorted segment of the array.\n- **Inner Loop (`z`):** For each value of `r`, the inner loop runs from `z = r + 1` to `z = len(arr) - 1`. It searches for the smallest element in the unsorted portion of the array (from `r+1` to the end) and swaps it with the element at index `r`.\n\nThe goal is to prove that after the i-th iteration of the outer loop, the first `r+1` elements of the array are sorted in ascending order.\n\n### Loop Invariant\n\nTo establish the loop invariant, we need to ensure that after each iteration of the outer loop, the first `r+1` elements of the array are sorted.\n\n- **Loop Invariant:** After the i-th iteration of the outer loop (i.e., when `r = i`), the first `r+1` elements of `arr` are sorted in ascending order.\n\nThis can be expressed as:\n- `sorted_value = fun(arr[0:r+1]->arr[0:r+1])`, where `fun` is a function that checks if the elements in the range `[0:r+1]` are sorted.\n\nTherefore, the final answer is:\n- `sorted_value = fun(arr[0:r+1]->arr[0:r+1])`"}]