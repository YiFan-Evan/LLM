[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    i = 0\n    while i < len(arr):\n        z = i + 1\n        while z < len(arr):\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n        i += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nSelection sort is an algorithm that sorts an array by repeatedly finding the minimum element from the unsorted part of the array and putting it at the beginning. The algorithm maintains two subarrays in a given array:\n\n1. The subarray which is already sorted.\n2. The remaining subarray which is unsorted.\n\nIn every iteration of the selection sort, the minimum element from the unsorted subarray is picked and moved to the sorted subarray.\n\n### Loop Invariant\n\nWe need to identify a loop invariant for the outer while loop that proves the partial correctness of the selection sort algorithm. The loop invariant should hold true before the loop starts, remain true after each iteration, and be useful for proving the correctness of the algorithm.\n\nThe outer loop runs from `i = 0` to `len(arr) - 1`. At the start of each iteration `i`, we can assert that the subarray `arr[0:i]` contains the smallest `i` elements of the original array, but not necessarily in sorted order yet. However, after each iteration, the element `arr[i]` will be the smallest element in the subarray `arr[i:len(arr)]`.\n\nSo, the loop invariant for the outer loop can be stated as:\n\n- Before the i-th iteration, the subarray `arr[0:i]` contains the smallest `i` elements from the original array, but they are not necessarily in sorted order.\n- After the i-th iteration, `arr[i]` is the smallest element in the subarray `arr[i:len(arr)]`.\n\nHowever, to fit into the required format `xxx_value = fun(arr[xxx]->arr[xxx])`, we can express this as follows:\n\n- The value of the smallest element in the unsorted part of the array up to the current index `i` remains unchanged or correctly placed after each iteration.\n\nThus, we can formulate the loop invariant as:\n\n- `min_unsorted_value = min(arr[i:len(arr)])`\n\nBut since the format requires a more specific expression, let's focus on what remains invariant through the iterations:\n\n- `sorted_part_length = i`\n\nTherefore, the final answer is:\n\nTherefore, the final answer is: `sorted_part_length = i`"}, {"role": "user", "content": "def selection_sort(arr):\n    i = -1\n    while i < len(arr) - 1:\n        i += 1\n        z = i + 1\n        while z < len(arr):\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nIn the provided `selection_sort` function, the outer loop iterates from `i = -1` to `len(arr) - 1`, effectively starting from `i = 0` in the first iteration. The goal of the outer loop is to ensure that after each iteration, the subarray `arr[0:i+1]` contains the smallest `i+1` elements of the array, though not necessarily in sorted order yet.\n\nThe inner loop finds the smallest element in the subarray `arr[i+1:len(arr)]` and swaps it with `arr[i]` if necessary. This ensures that after the completion of the inner loop, `arr[i]` holds the smallest element of the subarray `arr[i:len(arr)]`.\n\n### Loop Invariant\n\nTo prove the partial correctness of the algorithm, we need to establish a loop invariant for the outer loop. The loop invariant should hold true before the loop starts, remain true after each iteration, and be useful for proving the correctness of the algorithm.\n\nThe loop invariant for the outer loop can be stated as follows:\n\n- Before the i-th iteration, the subarray `arr[0:i]` contains the smallest `i` elements of the original array, but not necessarily in sorted order.\n- After the i-th iteration, the subarray `arr[0:i+1]` contains the smallest `i+1` elements of the original array, but not necessarily in sorted order.\n\nTo fit this into the required format `xxx_value = fun(arr[xxx]->arr[xxx])`, we can express this invariant as:\n\n- The length of the sorted part of the array up to the current index `i` remains correct after each iteration.\n\nThus, the loop invariant can be formulated as:\n\n- `sorted_part_length = i + 1`\n\nTherefore, the final answer is:\n\nTherefore, the final answer is: `sorted_part_length = i + 1`"}]