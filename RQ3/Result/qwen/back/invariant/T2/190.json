[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    k = 0\n    while k < len(arr):\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n        k += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe selection sort algorithm works by dividing the input array into two parts: the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty, and the unsorted part is the entire array. In each iteration of the outer loop, the smallest element from the unsorted part is selected and swapped with the first element of the unsorted part. This effectively grows the sorted part by one element and shrinks the unsorted part by one element.\n\nTo prove the partial correctness of the selection sort algorithm using a loop invariant, we need to define an invariant that holds true before and after each iteration of the outer loop. \n\n### Loop Invariant\n\nFor the outer loop (`while k < len(arr)`), a suitable loop invariant could be:\n\n- **Invariant:** `sorted_elements = k`\n\nThis invariant states that the first `k` elements of the array are sorted in non-decreasing order. At the beginning of each iteration of the outer loop, this invariant must hold true. After the loop finishes, `k` will equal the length of the array, meaning all elements have been processed and the entire array is sorted.\n\n### Applying the Loop Invariant\n\nLet's apply this invariant to the given code:\n\n- **Before the i-th iteration of the outer loop:** The first `k` elements of the array are already sorted.\n- **After the i-th iteration of the outer loop:** The first `k+1` elements of the array are sorted.\n\n### Therefore, the final answer is:\n```\nsorted_elements = k\n```"}, {"role": "user", "content": "def selection_sort(arr):\n    k = -1\n    while k < len(arr) - 1:\n        k += 1\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe selection sort algorithm sorts an array by repeatedly finding the minimum element from the unsorted portion of the array and moving it to the beginning of the unsorted portion. To prove the correctness of the algorithm using a loop invariant, we need to establish a statement that holds true before and after each iteration of the outer loop.\n\nIn the provided code:\n- The outer loop runs while `k` is less than `len(arr) - 1`.\n- In each iteration of the outer loop, `k` is incremented, indicating that the next smallest element will be placed in the correct position.\n- The inner loop finds the smallest element in the unsorted portion of the array and swaps it with the element at position `k`.\n\n### Loop Invariant\n\nFor the outer loop (`while k < len(arr) - 1`), a suitable loop invariant can be stated as follows:\n\n- **Invariant:** `arr[:k+1]` contains the smallest `k+1` elements of the original array, and these elements are sorted in non-decreasing order.\n\nThis invariant means that at the start of each iteration of the outer loop, the first `k+1` elements of the array are the smallest `k+1` elements of the original array and are sorted in non-decreasing order.\n\n### Applying the Loop Invariant\n\n- **Before the i-th iteration of the outer loop:** The first `k` elements of the array are the smallest `k` elements of the original array and are sorted in non-decreasing order.\n- **After the i-th iteration of the outer loop:** The first `k+1` elements of the array are the smallest `k+1` elements of the original array and are sorted in non-decreasing order.\n\n### Therefore, the final answer is:\n```\narr[:k+1] = sorted_smallest_k_elements(arr[:k+1])\n```"}]