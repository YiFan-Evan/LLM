[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    d = 0\n    while d < len(arr):\n        z = d + 1\n        while z < len(arr):\n            if arr[z] < arr[d]:\n                temp = arr[d]\n                arr[d] = arr[z]\n                arr[z] = temp\n            z += 1\n        d += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe provided Python program implements the Selection Sort algorithm, which sorts an array by repeatedly finding the minimum element from the unsorted part and putting it at the beginning. In each iteration of the outer loop (`while d < len(arr)`), the algorithm selects the smallest element from the remaining unsorted portion of the array and swaps it with the element at the current position `d`.\n\nTo prove the partial correctness of this algorithm using a loop invariant, we need to identify a condition that holds true before and after each iteration of the outer loop.\n\n### Loop Invariant Explanation\n\nFor the outer loop:\n- **Invariant**: At the start of the i-th iteration of the outer loop (where `d` equals `i`), the subarray `arr[0:i]` contains the `i` smallest elements from the original array, and these elements are sorted in ascending order.\n\nThis means that after `i` iterations of the outer loop, the first `i` elements of the array are sorted, and they represent the smallest `i` elements from the original array.\n\n### Answer\n\nTherefore, the final answer is:\n\n**Loop Invariant**: `sorted_value = fun(arr[0:d]->arr[0:d])`\n\nWhere the function `fun` can be described as: `fun(arr[0:d])` returns the subarray `arr[0:d]` which is sorted and contains the smallest `d` elements from the original array. This can be formally stated as:\n\n**Loop Invariant**: `sorted_value = lambda arr: sorted(arr[:d])` \n\nHowever, since we want to keep it simple and follow the given format strictly, we can state it as:\n\n**Loop Invariant**: `sorted_value = arr[0:d]`\n\nSo the specific loop invariant for the i-th iteration of the loop is:\n\n**Loop Invariant**: `sorted_value = arr[0:d]`"}, {"role": "user", "content": "def selection_sort(arr):\n    d = -1\n    while d < len(arr) - 1:\n        d += 1\n        z = d + 1\n        while z < len(arr):\n            if arr[z] < arr[d]:\n                temp = arr[d]\n                arr[d] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe provided Python program implements the Selection Sort algorithm. The core idea behind Selection Sort is to divide the array into a sorted and an unsorted region. The sorted region starts empty, and the unsorted region starts as the entire array. In each iteration of the outer loop, the algorithm finds the smallest element in the unsorted region and swaps it with the first element of the unsorted region. This effectively grows the sorted region by one element and shrinks the unsorted region by one element.\n\nTo prove the partial correctness of this algorithm, we need to identify a loop invariant that holds true before and after each iteration of the outer loop.\n\n### Loop Invariant Explanation\n\nFor the outer loop:\n- **Invariant**: At the start of the i-th iteration of the outer loop (where `d` equals `i`), the subarray `arr[0:i]` contains the `i` smallest elements from the original array, and these elements are sorted in ascending order.\n\nThis means that after `i` iterations of the outer loop, the first `i` elements of the array are sorted, and they represent the smallest `i` elements from the original array.\n\n### Answer\n\nGiven the requirement to express the loop invariant in the format `xxx_value = fun(arr[xxx]->arr[xxx])`, we can formulate it as follows:\n\n**Loop Invariant**: `sorted_value = arr[0:d+1]`\n\nTherefore, the final answer is:\n\n**Loop Invariant**: `sorted_value = arr[0:d+1]`"}]