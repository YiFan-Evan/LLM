[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    t = 0\n    while t < len(arr):\n        z = t + 1\n        while z < len(arr):\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "### Explanation\n\nThe provided code implements the selection sort algorithm, which sorts an array in ascending order. The core idea of selection sort is to divide the array into two parts: a sorted part and an unsorted part. In each iteration of the outer loop, the algorithm finds the minimum element from the unsorted part and places it at the beginning of this part, thereby extending the sorted part.\n\nTo prove the partial correctness of the code using a loop invariant, we need to establish a statement that holds true before and after each iteration of the inner loop. For the selection sort algorithm, a common loop invariant is that after each iteration of the inner loop, the smallest element in the unsorted part of the array has been moved to its correct position in the sorted part.\n\n### Loop Invariant for the Inner Loop\n\nFor the i-th iteration of the outer loop, the loop invariant can be stated as follows:\n\n- **Loop Invariant**: `sorted_part_length = t` and `min_value = min(arr[t:len(arr)])`.\n\nThis means that after the i-th iteration of the outer loop (`t = i`), the first `t` elements of the array are sorted in non-decreasing order, and the length of the sorted part is `t`.\n\n### Loop Invariant for the Outer Loop\n\nFor the outer loop itself, the loop invariant can be stated as:\n\n- **Loop Invariant**: `sorted_part_length = t` and `arr[0:t]` contains the smallest `t` elements of the original array, in sorted order.\n\nThis means that after the i-th iteration of the outer loop (`t = i`), the first `t` elements of the array are the smallest `t` elements of the original array, sorted in non-decreasing order.\n\n### Final Answer\n\nTherefore, the final answer is:\n\n- **Inner Loop Invariant**: `sorted_part_length = t`\n- **Outer Loop Invariant**: `sorted_part_length = t`\n\nIn the specified format:\n- `sorted_part_length = t`"}, {"role": "user", "content": "def selection_sort(arr):\n    t = -1\n    while t < len(arr) - 1:\n        t += 1\n        z = t + 1\n        while z < len(arr):\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Explanation\n\nThe provided code implements the selection sort algorithm with a slight adjustment in the initialization of the variable `t`. The loop invariant for selection sort needs to capture the state of the array where the first `t` elements are the smallest `t` elements of the array, sorted in non-decreasing order.\n\n### Loop Invariant for the Outer Loop\n\nFor the i-th iteration of the outer loop (`t = i`), the loop invariant can be stated as:\n\n- **Loop Invariant**: `arr[0:t+1]` contains the smallest `t+1` elements of the original array, in sorted order.\n\nThis means that after the i-th iteration of the outer loop (`t = i`), the first `t+1` elements of the array are the smallest `t+1` elements of the original array, sorted in non-decreasing order.\n\n### Loop Invariant for the Inner Loop\n\nFor the j-th iteration of the inner loop (`z = j`), given that `t` is fixed, the loop invariant can be stated as:\n\n- **Loop Invariant**: `min_value_in_unsorted_part = min(arr[t+1:z+1])`.\n\nThis means that after the j-th iteration of the inner loop (`z = j`), the element at index `t` in the array is the smallest element in the subarray `arr[t:z+1]`.\n\n### Final Answer\n\nTherefore, the final answer is:\n\n- **Outer Loop Invariant**: `arr[0:t+1]` contains the smallest `t+1` elements of the original array, in sorted order.\n- **Inner Loop Invariant**: `min_value_in_unsorted_part = min(arr[t+1:z+1])`.\n\nIn the specified format:\n- `arr[0:t+1] = fun(arr[0:t+1])`\n- `min_value_in_unsorted_part = fun(arr[t+1:z+1])`\n\nHowever, since the question asks for the invariant in the specific format `xxx_value = fun(arr[xxx]->arr[xxx])`, we can refine it as:\n\n- `sorted_part_length = t + 1`\n- `min_value_in_unsorted_part = min(arr[t+1:z+1])`\n\nThus, the final answer in the specified format is:\n\n- `sorted_part_length = t + 1`\n- `min_value_in_unsorted_part = min(arr[t+1:z+1])`"}]