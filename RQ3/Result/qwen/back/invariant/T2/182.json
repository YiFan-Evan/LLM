[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    c = 0\n    while c < len(arr):\n        z = c + 1\n        while z < len(arr):\n            if arr[z] < arr[c]:\n                temp = arr[c]\n                arr[c] = arr[z]\n                arr[z] = temp\n            z += 1\n        c += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe `selection_sort` algorithm sorts an array by repeatedly finding the minimum element from the unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array:\n\n1. **Sorted Subarray**: Elements before index `c` are sorted.\n2. **Unsorted Subarray**: Elements from index `c` to the end of the array are yet to be sorted.\n\nDuring each iteration of the outer loop (`while c < len(arr)`), the inner loop (`while z < len(arr)`) finds the smallest element in the unsorted subarray and swaps it with the element at the current position `c`.\n\n### Loop Invariant for the Outer Loop\n\nTo prove the partial correctness of the program, we need to define a loop invariant for the outer loop. A loop invariant is a condition that holds true before and after each iteration of the loop.\n\nFor the outer loop, we can state the following loop invariant:\n- At the start of the i-th iteration of the outer loop, the first `c` elements of the array are sorted and are in their correct positions.\n\nFormally, this can be expressed as:\n- The value of the first `c` elements is the same as the value of the first `c` elements after sorting.\n\nSo, the loop invariant can be written as:\n- `sorted_value = fun(arr[0->c-1])`\n\nHowever, since we are asked to write the loop invariant in the specific format `xxx_value = fun(arr[xxx]->arr[xxx])`, we can express it as:\n- `sorted_value = fun(arr[0->c-1])`\n\n### Loop Invariant for the Inner Loop\n\nFor the inner loop, we need to ensure that the smallest element in the unsorted part (from index `c` to the end) is correctly identified and swapped with the element at index `c`. The loop invariant for the inner loop can be stated as:\n- The smallest element in the subarray `arr[c+1 -> z-1]` has been found and stored in `arr[c]`.\n\nFormally, this can be expressed as:\n- `min_value = fun(arr[c+1->z-1])`\n\nSo, the loop invariant for the inner loop can be written as:\n- `min_value = fun(arr[c+1->z-1])`\n\n### Final Answer\n\nTherefore, the final answer is:\n- For the outer loop: `sorted_value = fun(arr[0->c-1])`\n- For the inner loop: `min_value = fun(arr[c+1->z-1])`"}, {"role": "user", "content": "def selection_sort(arr):\n    c = -1\n    while c < len(arr) - 1:\n        c += 1\n        z = c + 1\n        while z < len(arr):\n            if arr[z] < arr[c]:\n                temp = arr[c]\n                arr[c] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles Involved\n\nThe `selection_sort` algorithm sorts an array by repeatedly finding the minimum element from the unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array:\n\n1. **Sorted Subarray**: Elements from the start of the array up to the current position `c` are sorted.\n2. **Unsorted Subarray**: Elements from the current position `c` to the end of the array are yet to be sorted.\n\nDuring each iteration of the outer loop (`while c < len(arr) - 1`), the outer loop increments `c` and the inner loop (`while z < len(arr)`) finds the smallest element in the unsorted subarray and swaps it with the element at the current position `c`.\n\n### Loop Invariant for the Outer Loop\n\nFor the outer loop, the loop invariant should capture that the first `c+1` elements of the array are sorted and are in their correct positions. \n\nFormally, this can be expressed as:\n- `sorted_value = fun(arr[0->c])`\n\nSo, the loop invariant for the outer loop can be written as:\n- `sorted_value = fun(arr[0->c])`\n\n### Loop Invariant for the Inner Loop\n\nFor the inner loop, the loop invariant should capture that the smallest element in the unsorted part (from index `c+1` to `z-1`) has been found and stored in `arr[c]`.\n\nFormally, this can be expressed as:\n- `min_value = fun(arr[c+1->z-1])`\n\nSo, the loop invariant for the inner loop can be written as:\n- `min_value = fun(arr[c+1->z-1])`\n\n### Final Answer\n\nTherefore, the final answer is:\n- For the outer loop: `sorted_value = fun(arr[0->c])`\n- For the inner loop: `min_value = fun(arr[c+1->z-1])`"}]