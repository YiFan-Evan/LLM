[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    a = 0\n    while a < len(arr):\n        z = a + 1\n        while z < len(arr):\n            if arr[z] < arr[a]:\n                temp = arr[a]\n                arr[a] = arr[z]\n                arr[z] = temp\n            z += 1\n        a += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` function sorts an array using the Selection Sort algorithm. The core idea behind Selection Sort is to divide the array into two parts: a sorted part and an unsorted part. In each iteration of the outer loop, the algorithm selects the smallest element from the unsorted part and swaps it with the first element of the unsorted part. This effectively moves the boundary between the sorted and unsorted parts one step forward.\n\n- **Outer Loop**: The outer loop runs from `a = 0` to `a < len(arr)`. At the start of each iteration, the first `a` elements are already sorted.\n- **Inner Loop**: The inner loop runs from `z = a + 1` to `z < len(arr)`, finding the minimum element in the unsorted part and swapping it with the first element of this unsorted part.\n\n### Loop Invariant\n\nTo prove the partial correctness of the program, we need to establish a loop invariant for both the outer and inner loops.\n\n#### Outer Loop Invariant\n\nAt the start of each iteration of the outer loop (when `a` is the current index), the first `a` elements of the array are sorted and are less than or equal to all the elements in the rest of the array.\n\n**Loop Invariant for Outer Loop**:\n```\nsorted_value = fun(arr[0:a] -> arr[0:a])\n```\n\nThis means that after `a` iterations, the subarray `arr[0:a]` is sorted.\n\n#### Inner Loop Invariant\n\nAt the start of each iteration of the inner loop (when `z` is the current index), the subarray `arr[a+1:z]` contains elements that are greater than or equal to `arr[a]`.\n\n**Loop Invariant for Inner Loop**:\n```\nunsorted_value = fun(arr[a+1:z] -> arr[a+1:z])\n```\n\nThis means that at the end of the inner loop, `arr[a]` holds the smallest value in the subarray `arr[a:len(arr)]`.\n\n### Final Answer\n\nTherefore, the final answer is:\n\n**Outer Loop Invariant**:\n```\nsorted_value = fun(arr[0:a] -> arr[0:a])\n```\n\n**Inner Loop Invariant**:\n```\nunsorted_value = fun(arr[a+1:z] -> arr[a+1:z])\n```"}, {"role": "user", "content": "def selection_sort(arr):\n    a = -1\n    while a < len(arr) - 1:\n        a += 1\n        z = a + 1\n        while z < len(arr):\n            if arr[z] < arr[a]:\n                temp = arr[a]\n                arr[a] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` function sorts an array using the Selection Sort algorithm. The goal of Selection Sort is to sort the array such that after the completion of the sorting process, the array is in non-decreasing order (i.e., each element is less than or equal to the next element).\n\nThe Selection Sort algorithm works as follows:\n- The outer loop iterates over each element of the array from the beginning to the second-to-last element.\n- For each element in the outer loop, the inner loop finds the minimum element in the remaining unsorted portion of the array.\n- If the minimum element found in the inner loop is smaller than the current element in the outer loop, they are swapped.\n\n### Loop Invariants\n\nTo prove the partial correctness of the program, we need to establish loop invariants for both the outer and inner loops.\n\n#### Outer Loop Invariant\n\nAt the start of each iteration of the outer loop, the first `a` elements of the array are sorted and are less than or equal to all the elements in the rest of the array.\n\n**Loop Invariant for Outer Loop**:\n```\nsorted_value = fun(arr[0:a] -> arr[0:a])\n```\n\nThis means that after `a` iterations, the subarray `arr[0:a]` is sorted.\n\n#### Inner Loop Invariant\n\nAt the start of each iteration of the inner loop, the subarray `arr[a+1:z]` contains elements that are greater than or equal to `arr[a]`.\n\n**Loop Invariant for Inner Loop**:\n```\nunsorted_value = fun(arr[a+1:z] -> arr[a+1:z])\n```\n\nThis means that at the end of the inner loop, `arr[a]` holds the smallest value in the subarray `arr[a:len(arr)]`.\n\n### Final Answer\n\nTherefore, the final answer is:\n\n**Outer Loop Invariant**:\n```\nsorted_value = fun(arr[0:a] -> arr[0:a])\n```\n\n**Inner Loop Invariant**:\n```\nunsorted_value = fun(arr[a+1:z] -> arr[a+1:z])\n```"}]