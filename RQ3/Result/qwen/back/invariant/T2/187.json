[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    h = 0\n    while h < len(arr):\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe provided code implements the selection sort algorithm. Selection sort works by dividing the input array into two parts: the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire array. The algorithm repeatedly selects the smallest element from the unsorted part and swaps it with the leftmost unsorted element, effectively growing the sorted part one element at a time.\n\nTo prove the partial correctness of this algorithm, we need to establish a loop invariant for both the outer and inner loops. \n\n### Loop Invariant for the Outer Loop\n\nThe loop invariant for the outer loop can be stated as follows:\n- After the i-th iteration of the outer loop, the first i elements of the array are sorted in non-decreasing order.\n\nFormally, the loop invariant for the outer loop is:\n- `sorted_value = fun(arr[0]->arr[i-1])`\n\nThis means that after the i-th iteration of the outer loop, the subarray `arr[0:i]` is sorted in non-decreasing order.\n\n### Loop Invariant for the Inner Loop\n\nThe loop invariant for the inner loop can be stated as follows:\n- After the j-th iteration of the inner loop, the smallest element in the subarray `arr[h+1:j+1]` has been found and stored at `arr[h]`.\n\nFormally, the loop invariant for the inner loop is:\n- `smallest_value = fun(arr[h+1]->arr[j])`\n\nThis means that after the j-th iteration of the inner loop, `arr[h]` contains the smallest element among `arr[h+1:j+1]`.\n\n### Final Answer\n\nTherefore, the final answer is:\n\nFor the outer loop:\n- `sorted_value = fun(arr[0]->arr[h-1])`\n\nFor the inner loop:\n- `smallest_value = fun(arr[h+1]->arr[z])`"}, {"role": "user", "content": "def selection_sort(arr):\n    h = -1\n    while h < len(arr) - 1:\n        h += 1\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe provided code is an implementation of the selection sort algorithm. Selection sort works by repeatedly finding the minimum element from the unsorted portion of the array and moving it to the beginning of the unsorted portion. This process gradually builds up a sorted portion of the array from left to right.\n\nTo prove the partial correctness of this algorithm, we need to establish loop invariants for both the outer and inner loops.\n\n### Loop Invariant for the Outer Loop\n\nThe loop invariant for the outer loop can be stated as follows:\n- After the i-th iteration of the outer loop, the first i elements of the array are the smallest i elements in the array, but not necessarily in sorted order.\n\nFormally, the loop invariant for the outer loop is:\n- `sorted_smallest_values = fun(arr[0]->arr[h])`\n\nThis means that after the i-th iteration of the outer loop, the subarray `arr[0:h+1]` contains the smallest h+1 elements from the original array, though they may not be in sorted order.\n\n### Loop Invariant for the Inner Loop\n\nThe loop invariant for the inner loop can be stated as follows:\n- After the j-th iteration of the inner loop, the smallest element in the subarray `arr[h+1:j+1]` has been found and stored at `arr[h]`.\n\nFormally, the loop invariant for the inner loop is:\n- `smallest_value = fun(arr[h+1]->arr[z])`\n\nThis means that after the j-th iteration of the inner loop, `arr[h]` contains the smallest element among `arr[h+1:j+1]`.\n\n### Final Answer\n\nTherefore, the final answer is:\n\nFor the outer loop:\n- `sorted_smallest_values = fun(arr[0]->arr[h])`\n\nFor the inner loop:\n- `smallest_value = fun(arr[h+1]->arr[z])`"}]