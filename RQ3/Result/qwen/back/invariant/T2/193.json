[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n < len(arr):\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nTo prove the partial correctness of the `selection_sort` function, we need to establish a loop invariant for the outer loop. The loop invariant should hold true before and after each iteration of the loop. Selection sort works by repeatedly finding the minimum element from the unsorted part of the array and moving it to the beginning.\n\n### Loop Invariant for the Outer Loop\n\nThe outer loop runs from `n = 0` to `n < len(arr)`. The loop invariant for this loop can be described as follows:\n\n- **Invariant Statement**: At the start of the i-th iteration of the outer loop (`n = i`), the subarray `arr[0:i]` contains the smallest `i` elements of the original array, but not necessarily in sorted order within `arr[0:i]`.\n\n### Expressing the Loop Invariant\n\nGiven the requirement to express the invariant in the form `xxx_value = fun(arr[xxx]->arr[xxx])`, we can describe the invariant as:\n\n- **Invariant Expression**: `sorted_elements_count = n`\n\nThis means that at the start of the i-th iteration of the outer loop, the number of elements that are correctly placed (i.e., they belong to the first `n` positions of the array) is exactly `n`.\n\n### Therefore, the final answer is:\n```\nsorted_elements_count = n\n```"}, {"role": "user", "content": "def selection_sort(arr):\n    n = -1\n    while n < len(arr) - 1:\n        n += 1\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Fundamental Principles\n\nThe `selection_sort` algorithm sorts an array by repeatedly finding the minimum element from the unsorted portion of the array and moving it to the beginning. The key steps are:\n1. Iterate through the array.\n2. For each position `n`, find the smallest element in the subarray `arr[n+1:]`.\n3. Swap the found minimum element with the element at position `n`.\n\nTo prove the partial correctness of the program, we need to establish a loop invariant for the outer loop that holds true before and after each iteration.\n\n### Loop Invariant for the Outer Loop\n\nThe outer loop runs from `n = -1` to `n < len(arr) - 1`. The loop invariant for this loop can be described as follows:\n\n- **Invariant Statement**: At the start of the i-th iteration of the outer loop (`n = i-1`), the subarray `arr[0:i]` contains the smallest `i` elements of the original array, but not necessarily in sorted order within `arr[0:i]`.\n\n### Expressing the Loop Invariant\n\nGiven the requirement to express the invariant in the form `xxx_value = fun(arr[xxx]->arr[xxx])`, we can describe the invariant as:\n\n- **Invariant Expression**: `sorted_elements_count = n + 1`\n\nThis means that at the start of the i-th iteration of the outer loop, the number of elements that are correctly placed (i.e., they belong to the first `n+1` positions of the array) is exactly `n+1`.\n\n### Therefore, the final answer is:\n```\nsorted_elements_count = n + 1\n```"}]