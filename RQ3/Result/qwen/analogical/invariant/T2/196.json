[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    q = 0\n    while q < len(arr):\n        z = q + 1\n        while z < len(arr):\n            if arr[z] < arr[q]:\n                temp = arr[q]\n                arr[q] = arr[z]\n                arr[z] = temp\n            z += 1\n        q += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n#### Problem 1: Insertion Sort\n**Description:** \nImplement an insertion sort algorithm for an array `arr`. The algorithm should maintain a sorted subarray from index 0 to `q-1` as it iterates through the array.\n\n**Solution:**\n```python\ndef insertion_sort(arr):\n    q = 1\n    while q < len(arr):\n        key = arr[q]\n        z = q - 1\n        while z >= 0 and arr[z] > key:\n            arr[z + 1] = arr[z]\n            z -= 1\n        arr[z + 1] = key\n        q += 1\n    return arr\n```\n\n**Loop Invariant for Insertion Sort:**\n- `sorted_value = fun(arr[0]->arr[q-1])`: The subarray from index 0 to `q-1` is sorted.\n\n#### Problem 2: Bubble Sort\n**Description:** \nImplement a bubble sort algorithm for an array `arr`. The algorithm should ensure that after each pass, the largest element among the unsorted elements has bubbled up to its correct position.\n\n**Solution:**\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    while n > 0:\n        swapped = False\n        q = 0\n        while q < n - 1:\n            if arr[q] > arr[q + 1]:\n                temp = arr[q]\n                arr[q] = arr[q + 1]\n                arr[q + 1] = temp\n                swapped = True\n            q += 1\n        if not swapped:\n            break\n        n -= 1\n    return arr\n```\n\n**Loop Invariant for Bubble Sort:**\n- `last_sorted_value = fun(arr[n]->arr[len(arr)-1])`: The last `n` elements are sorted in their final positions.\n\n#### Problem 3: Quick Sort\n**Description:** \nImplement a partitioning step of the quicksort algorithm for an array `arr` with a pivot chosen as the last element. After the partitioning step, all elements less than the pivot are on the left side, and all elements greater than or equal to the pivot are on the right side.\n\n**Solution:**\n```python\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n    temp = arr[i + 1]\n    arr[i + 1] = arr[high]\n    arr[high] = temp\n    return i + 1\n```\n\n**Loop Invariant for Quick Sort Partition:**\n- `pivot_position = fun(arr[i+1]->arr[high])`: All elements before `i+1` are less than the pivot, and all elements from `i+1` to `high-1` are greater than or equal to the pivot.\n\n### Original Problem\n\n**Problem Statement:**\nGiven the provided selection sort algorithm, identify the loop invariant for the i-th iteration of the loop to prove the partial correctness of the program.\n\n**Answer:**\n\nTherefore, the final answer is: `smallest_value = fun(arr[q]->arr[len(arr)-1])`: The smallest element among `arr[q]` to `arr[len(arr)-1]` is at index `q`."}, {"role": "user", "content": "def selection_sort(arr):\n    q = -1\n    while q < len(arr) - 1:\n        q += 1\n        z = q + 1\n        while z < len(arr):\n            if arr[z] < arr[q]:\n                temp = arr[q]\n                arr[q] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n#### Problem 1: Insertion Sort\n**Description:** \nImplement an insertion sort algorithm for an array `arr`. The algorithm should maintain a sorted subarray from index 0 to `q-1` as it iterates through the array.\n\n**Solution:**\n```python\ndef insertion_sort(arr):\n    q = 1\n    while q < len(arr):\n        key = arr[q]\n        z = q - 1\n        while z >= 0 and arr[z] > key:\n            arr[z + 1] = arr[z]\n            z -= 1\n        arr[z + 1] = key\n        q += 1\n    return arr\n```\n\n**Loop Invariant for Insertion Sort:**\n- `sorted_value = fun(arr[0]->arr[q-1])`: The subarray from index 0 to `q-1` is sorted.\n\n#### Problem 2: Bubble Sort\n**Description:** \nImplement a bubble sort algorithm for an array `arr`. The algorithm should ensure that after each pass, the largest element among the unsorted elements has bubbled up to its correct position.\n\n**Solution:**\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    while n > 0:\n        swapped = False\n        q = 0\n        while q < n - 1:\n            if arr[q] > arr[q + 1]:\n                temp = arr[q]\n                arr[q] = arr[q + 1]\n                arr[q + 1] = temp\n                swapped = True\n            q += 1\n        if not swapped:\n            break\n        n -= 1\n    return arr\n```\n\n**Loop Invariant for Bubble Sort:**\n- `last_sorted_value = fun(arr[n]->arr[len(arr)-1])`: The last `n` elements are sorted in their final positions.\n\n#### Problem 3: Selection Sort with Correct Index Initialization\n**Description:** \nImplement a selection sort algorithm for an array `arr` where the initial index `q` is set correctly to 0.\n\n**Solution:**\n```python\ndef selection_sort(arr):\n    q = 0\n    while q < len(arr) - 1:\n        min_idx = q\n        z = q + 1\n        while z < len(arr):\n            if arr[z] < arr[min_idx]:\n                min_idx = z\n            z += 1\n        if min_idx != q:\n            temp = arr[q]\n            arr[q] = arr[min_idx]\n            arr[min_idx] = temp\n        q += 1\n    return arr\n```\n\n**Loop Invariant for Selection Sort:**\n- `min_value_index = fun(arr[q]->arr[len(arr)-1])`: The minimum value among `arr[q]` to `arr[len(arr)-1]` is at index `q`.\n\n### Original Problem\n\n**Problem Statement:**\nGiven the provided selection sort algorithm, identify the loop invariant for the i-th iteration of the loop to prove the partial correctness of the program.\n\n**Answer:**\n\nTherefore, the final answer is: `min_value_index = fun(arr[q]->arr[len(arr)-1])`: The minimum value among `arr[q]` to `arr[len(arr)-1]` is at index `q`."}]