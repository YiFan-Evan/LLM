[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    e = 0\n    while e < len(arr):\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n        e += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n**Problem 1:**  \nConsider the following function that implements selection sort but uses a different approach to find the minimum element in each pass:\n\n```python\ndef selection_sort_min(arr):\n    for e in range(len(arr)):\n        min_index = e\n        for z in range(e+1, len(arr)):\n            if arr[z] < arr[min_index]:\n                min_index = z\n        arr[e], arr[min_index] = arr[min_index], arr[e]\n    return arr\n```\n\n**Solution:**  \nThe loop invariant for the inner loop would be `min_index_value = fun(arr[min_index]->arr[z])`, where the function `fun` returns the index of the smallest element found so far from `arr[e]` to `arr[z]`.\n\n**Problem 2:**  \nConsider another implementation of selection sort that sorts the array in descending order instead of ascending order:\n\n```python\ndef selection_sort_descending(arr):\n    for e in range(len(arr)):\n        max_index = e\n        for z in range(e+1, len(arr)):\n            if arr[z] > arr[max_index]:\n                max_index = z\n        arr[e], arr[max_index] = arr[max_index], arr[e]\n    return arr\n```\n\n**Solution:**  \nThe loop invariant for the inner loop would be `max_index_value = fun(arr[max_index]->arr[z])`, where the function `fun` returns the index of the largest element found so far from `arr[e]` to `arr[z]`.\n\n**Problem 3:**  \nConsider yet another variant of selection sort where we swap elements only if the current element is larger than the next element:\n\n```python\ndef selection_sort_variant(arr):\n    for e in range(len(arr) - 1):\n        if arr[e] > arr[e + 1]:\n            arr[e], arr[e + 1] = arr[e + 1], arr[e]\n    return arr\n```\n\n**Solution:**  \nThe loop invariant for this function would be `sorted_until_value = fun(arr[0]->arr[e])`, where the function `fun` returns the state of the array up to index `e` being sorted such that all elements up to `e` are in their correct positions relative to each other.\n\n### Original Problem Solution\n\n**Loop Invariant for the Original Selection Sort:**\n\nGiven the original selection sort function:\n\n```python\ndef selection_sort(arr):\n    e = 0\n    while e < len(arr):\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n        e += 1\n    return arr\n```\n\nThe loop invariant for the outer loop can be stated as:\n\n```plaintext\nTherefore, the final answer is: sorted_until_value = fun(arr[0]->arr[e-1])\n```\n\nHere, `fun` returns the state of the array up to index `e-1` being sorted such that all elements up to `e-1` are in their correct positions relative to each other."}, {"role": "user", "content": "def selection_sort(arr):\n    e = -1\n    while e < len(arr) - 1:\n        e += 1\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n**Problem 1:**  \nConsider the following function that implements selection sort but uses a different approach to find the minimum element in each pass:\n\n```python\ndef selection_sort_min(arr):\n    for e in range(len(arr)):\n        min_index = e\n        for z in range(e+1, len(arr)):\n            if arr[z] < arr[min_index]:\n                min_index = z\n        arr[e], arr[min_index] = arr[min_index], arr[e]\n    return arr\n```\n\n**Solution:**  \nThe loop invariant for the inner loop would be `min_index_value = fun(arr[min_index]->arr[z])`, where the function `fun` returns the index of the smallest element found so far from `arr[e]` to `arr[z]`.\n\n**Problem 2:**  \nConsider another implementation of selection sort that sorts the array in descending order instead of ascending order:\n\n```python\ndef selection_sort_descending(arr):\n    for e in range(len(arr)):\n        max_index = e\n        for z in range(e+1, len(arr)):\n            if arr[z] > arr[max_index]:\n                max_index = z\n        arr[e], arr[max_index] = arr[max_index], arr[e]\n    return arr\n```\n\n**Solution:**  \nThe loop invariant for the inner loop would be `max_index_value = fun(arr[max_index]->arr[z])`, where the function `fun` returns the index of the largest element found so far from `arr[e]` to `arr[z]`.\n\n**Problem 3:**  \nConsider yet another variant of selection sort where we swap elements only if the current element is larger than the next element:\n\n```python\ndef selection_sort_variant(arr):\n    for e in range(len(arr) - 1):\n        if arr[e] > arr[e + 1]:\n            arr[e], arr[e + 1] = arr[e + 1], arr[e]\n    return arr\n```\n\n**Solution:**  \nThe loop invariant for this function would be `sorted_until_value = fun(arr[0]->arr[e])`, where the function `fun` returns the state of the array up to index `e` being sorted such that all elements up to `e` are in their correct positions relative to each other.\n\n### Original Problem Solution\n\n**Loop Invariant for the Original Selection Sort:**\n\nGiven the original selection sort function:\n\n```python\ndef selection_sort(arr):\n    e = -1\n    while e < len(arr) - 1:\n        e += 1\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr\n```\n\nThe loop invariant for the outer loop can be stated as:\n\n```plaintext\nTherefore, the final answer is: sorted_until_value = fun(arr[0]->arr[e])\n```\n\nHere, `fun` returns the state of the array up to index `e` being sorted such that all elements up to `e` are in their correct positions relative to each other."}]