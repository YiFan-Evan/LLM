[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    f = 0\n    while f < len(arr):\n        z = f + 1\n        while z < len(arr):\n            if arr[z] < arr[f]:\n                temp = arr[f]\n                arr[f] = arr[z]\n                arr[z] = temp\n            z += 1\n        f += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n#### Problem 1:\n**Description**: \nImplement a selection sort algorithm where the smallest element from the unsorted portion of the array is selected and moved to the beginning of the unsorted portion.\n\n**Function Name**: `selection_sort_smallest_first`\n\n```python\ndef selection_sort_smallest_first(arr):\n    f = 0\n    while f < len(arr):\n        min_index = f\n        z = f + 1\n        while z < len(arr):\n            if arr[z] < arr[min_index]:\n                min_index = z\n            z += 1\n        # Swap the found minimum element with the first element\n        temp = arr[f]\n        arr[f] = arr[min_index]\n        arr[min_index] = temp\n        f += 1\n    return arr\n```\n\n**Loop Invariant**:\n- **i-th iteration**: `min_index_value = min(arr[f:len(arr)])`\n\n#### Problem 2:\n**Description**: \nImplement a selection sort algorithm where the largest element from the unsorted portion of the array is selected and moved to the end of the unsorted portion.\n\n**Function Name**: `selection_sort_largest_last`\n\n```python\ndef selection_sort_largest_last(arr):\n    f = 0\n    while f < len(arr):\n        max_index = f\n        z = f + 1\n        while z < len(arr):\n            if arr[z] > arr[max_index]:\n                max_index = z\n            z += 1\n        # Swap the found maximum element with the last element\n        temp = arr[f]\n        arr[f] = arr[max_index]\n        arr[max_index] = temp\n        f += 1\n    return arr\n```\n\n**Loop Invariant**:\n- **i-th iteration**: `max_index_value = max(arr[f:len(arr)])`\n\n#### Problem 3:\n**Description**: \nImplement a selection sort algorithm where the smallest element from the unsorted portion of the array is selected and swapped with the current position, but the array is sorted in descending order.\n\n**Function Name**: `selection_sort_descending`\n\n```python\ndef selection_sort_descending(arr):\n    f = 0\n    while f < len(arr):\n        min_index = f\n        z = f + 1\n        while z < len(arr):\n            if arr[z] < arr[min_index]:\n                min_index = z\n            z += 1\n        # Swap the found minimum element with the first element\n        temp = arr[f]\n        arr[f] = arr[min_index]\n        arr[min_index] = temp\n        f += 1\n    return arr[::-1]  # Reverse the array to get it in descending order\n```\n\n**Loop Invariant**:\n- **i-th iteration**: `min_index_value = min(arr[f:len(arr)])`\n\n### Original Problem Answer\n\nThe original problem involves selection sort where the smallest element from the unsorted portion of the array is selected and moved to the beginning of the unsorted portion.\n\n**Loop Invariant**:\n- **i-th iteration**: `min_value = min(arr[f:len(arr)])`\n\nTherefore, the final answer is: `min_value = min(arr[f:len(arr)])`"}, {"role": "user", "content": "def selection_sort(arr):\n    f = -1\n    while f < len(arr) - 1:\n        f += 1\n        z = f + 1\n        while z < len(arr):\n            if arr[z] < arr[f]:\n                temp = arr[f]\n                arr[f] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n#### Problem 1:\n**Description**: \nImplement a selection sort algorithm where the smallest element from the unsorted portion of the array is selected and moved to the beginning of the unsorted portion. The loop starts at index `-1`.\n\n**Function Name**: `selection_sort_start_minus_one`\n\n```python\ndef selection_sort_start_minus_one(arr):\n    f = -1\n    while f < len(arr) - 1:\n        f += 1\n        z = f + 1\n        while z < len(arr):\n            if arr[z] < arr[f]:\n                temp = arr[f]\n                arr[f] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr\n```\n\n**Loop Invariant**:\n- **i-th iteration**: `min_value = min(arr[f+1:len(arr)])`\n\n#### Problem 2:\n**Description**: \nImplement a selection sort algorithm where the smallest element from the unsorted portion of the array is selected and moved to the beginning of the unsorted portion. The loop starts at index `0`.\n\n**Function Name**: `selection_sort_start_zero`\n\n```python\ndef selection_sort_start_zero(arr):\n    f = 0\n    while f < len(arr) - 1:\n        z = f + 1\n        while z < len(arr):\n            if arr[z] < arr[f]:\n                temp = arr[f]\n                arr[f] = arr[z]\n                arr[z] = temp\n            z += 1\n        f += 1\n    return arr\n```\n\n**Loop Invariant**:\n- **i-th iteration**: `min_value = min(arr[f:len(arr)])`\n\n#### Problem 3:\n**Description**: \nImplement a selection sort algorithm where the smallest element from the unsorted portion of the array is selected and moved to the beginning of the unsorted portion. The loop starts at index `0` and sorts the array in reverse order.\n\n**Function Name**: `selection_sort_start_zero_reverse`\n\n```python\ndef selection_sort_start_zero_reverse(arr):\n    f = 0\n    while f < len(arr) - 1:\n        z = f + 1\n        while z < len(arr):\n            if arr[z] < arr[f]:\n                temp = arr[f]\n                arr[f] = arr[z]\n                arr[z] = temp\n            z += 1\n        f += 1\n    return arr[::-1]  # Reverse the array to get it in descending order\n```\n\n**Loop Invariant**:\n- **i-th iteration**: `min_value = min(arr[f:len(arr)])`\n\n### Original Problem Answer\n\nThe original problem involves selection sort where the smallest element from the unsorted portion of the array is selected and moved to the beginning of the unsorted portion. The loop starts at index `-1`.\n\n**Loop Invariant**:\n- **i-th iteration**: `min_value = min(arr[f+1:len(arr)])`\n\nTherefore, the final answer is: `min_value = min(arr[f+1:len(arr)])`"}]