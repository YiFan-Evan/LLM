[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    s = 0\n    while s < len(arr):\n        z = s + 1\n        while z < len(arr):\n            if arr[z] < arr[s]:\n                temp = arr[s]\n                arr[s] = arr[z]\n                arr[z] = temp\n            z += 1\n        s += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems and Solutions\n\n**Problem 1: Insertion Sort**\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n**Loop Invariant:**\n- At the end of each iteration of the inner while loop, `arr[0]` to `arr[j+1]` are sorted.\n\n**Problem 2: Bubble Sort**\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\n**Loop Invariant:**\n- At the end of each iteration of the outer for loop, the last `i` elements are in their correct position (sorted).\n\n**Problem 3: Heap Sort**\n```python\ndef heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[largest] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n```\n**Loop Invariant:**\n- After each call to `heapify`, the subtree rooted at index `i` satisfies the max-heap property (the parent node is greater than or equal to its children).\n\n### Original Problem Answer\n\n**Selection Sort Loop Invariant:**\n- At the end of each iteration of the outer while loop, the subarray `arr[0]` to `arr[s-1]` contains the smallest `s` elements from the original array, in sorted order.\n\n**Therefore, the final answer is:**\n- `sorted_value = fun(arr[0]->arr[s-1])`"}, {"role": "user", "content": "def selection_sort(arr):\n    s = -1\n    while s < len(arr) - 1:\n        s += 1\n        z = s + 1\n        while z < len(arr):\n            if arr[z] < arr[s]:\n                temp = arr[s]\n                arr[s] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems and Solutions\n\n**Problem 1: Insertion Sort**\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n**Loop Invariant:**\n- At the end of each iteration of the inner while loop, the subarray `arr[0]` to `arr[j+1]` is sorted.\n\n**Problem 2: Bubble Sort**\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\n**Loop Invariant:**\n- At the end of each iteration of the outer for loop, the last `i` elements are in their correct position (sorted).\n\n**Problem 3: Selection Sort (Given Code)**\n```python\ndef selection_sort(arr):\n    s = -1\n    while s < len(arr) - 1:\n        s += 1\n        z = s + 1\n        while z < len(arr):\n            if arr[z] < arr[s]:\n                temp = arr[s]\n                arr[s] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr\n```\n\n### Original Problem Answer\n\nTo find the loop invariant for the given selection sort code, we need to understand how the algorithm works. The outer loop runs from `s = -1` to `len(arr) - 2`. For each iteration of the outer loop, the smallest element in the unsorted portion of the array is found and swapped with the element at the current `s` position.\n\n**Loop Invariant:**\n- At the end of each iteration of the outer while loop, the subarray `arr[0]` to `arr[s]` contains the smallest `s + 1` elements from the original array, in sorted order.\n\n**Therefore, the final answer is:**\n- `sorted_value = fun(arr[0]->arr[s])`"}]