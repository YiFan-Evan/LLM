[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    i = 0\n    while i < len(arr):\n        z = i + 1\n        while z < len(arr):\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n        i += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n#### Problem 1:\n**Description**: Implement a selection sort algorithm that sorts an array in descending order.\n- **Solution**:\n```python\ndef selection_sort_descending(arr):\n    i = 0\n    while i < len(arr):\n        z = i + 1\n        while z < len(arr):\n            if arr[z] > arr[i]:  # Change the comparison operator to sort in descending order\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n        i += 1\n    return arr\n```\n- **Loop Invariant**: `max_value = max(arr[i]->arr[len(arr)-1])`\n\n#### Problem 2:\n**Description**: Implement a selection sort algorithm that sorts only the first k elements of an array.\n- **Solution**:\n```python\ndef selection_sort_k_elements(arr, k):\n    i = 0\n    while i < k:\n        z = i + 1\n        while z < k:\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n        i += 1\n    return arr[:k]\n```\n- **Loop Invariant**: `min_value = min(arr[i]->arr[k-1])`\n\n#### Problem 3:\n**Description**: Implement a selection sort algorithm that sorts an array using a sentinel value.\n- **Solution**:\n```python\ndef selection_sort_with_sentinel(arr):\n    i = 0\n    sentinel = float('inf')\n    while i < len(arr):\n        z = i + 1\n        while z < len(arr):\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n        arr.append(sentinel)  # Append sentinel at the end of the list\n        i += 1\n    arr.remove(sentinel)  # Remove sentinel after sorting\n    return arr\n```\n- **Loop Invariant**: `sorted_value = sorted(arr[i]->arr[len(arr)-1])`\n\n### Original Problem Solution\n\nThe provided code implements the selection sort algorithm which sorts an array in ascending order.\n\n- **Loop Invariant**: `sorted_value = sorted(arr[0]->arr[i-1])`\n\nTherefore, the final answer is: `sorted_value = sorted(arr[0]->arr[i-1])`"}, {"role": "user", "content": "def selection_sort(arr):\n    i = len(arr)\n    while i > 0:\n        i -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n#### Problem 1:\n**Description**: Implement a selection sort algorithm that sorts an array in descending order.\n- **Solution**:\n```python\ndef selection_sort_descending(arr):\n    i = len(arr)\n    while i > 0:\n        i -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] > arr[i]:  # Change the comparison operator to sort in descending order\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n    return arr\n```\n- **Loop Invariant**: `max_value = max(arr[z+1]->arr[i])`\n\n#### Problem 2:\n**Description**: Implement a selection sort algorithm that sorts only the first k elements of an array.\n- **Solution**:\n```python\ndef selection_sort_k_elements(arr, k):\n    i = k\n    while i > 0:\n        i -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n    return arr[:k]\n```\n- **Loop Invariant**: `min_value = min(arr[z+1]->arr[i])`\n\n#### Problem 3:\n**Description**: Implement a selection sort algorithm that sorts an array using a sentinel value.\n- **Solution**:\n```python\ndef selection_sort_with_sentinel(arr):\n    i = len(arr)\n    sentinel = float('-inf')\n    while i > 0:\n        i -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n        arr.append(sentinel)  # Append sentinel at the end of the list\n    arr.remove(sentinel)  # Remove sentinel after sorting\n    return arr\n```\n- **Loop Invariant**: `sorted_value = sorted(arr[z+1]->arr[i])`\n\n### Original Problem Solution\n\nThe provided code implements the selection sort algorithm which sorts an array in ascending order.\n\n- **Loop Invariant**: `sorted_value = sorted(arr[i+1]->arr[len(arr)-1])`\n\nTherefore, the final answer is: `sorted_value = sorted(arr[i+1]->arr[len(arr)-1])`"}]