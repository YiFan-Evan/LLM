[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    t = 0\n    while t < len(arr):\n        z = t + 1\n        while z < len(arr):\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n**Problem 1:**  \n**Description:**  \nWrite a Python program to sort an array using bubble sort. The program should ensure that after each pass through the array, the largest unsorted element has bubbled up to its correct position.  \n**Solution:**  \n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for t in range(n):\n        for z in range(0, n-t-1):\n            if arr[z] > arr[z+1]:\n                arr[z], arr[z+1] = arr[z+1], arr[z]\n    return arr\n```\n**Loop Invariant:**  \nTherefore, the loop invariant for this problem can be stated as:\n\"largest_unsorted_value = max(arr[t:len(arr)])\"\n\n**Problem 2:**  \n**Description:**  \nWrite a Python program to sort an array using insertion sort. The program should ensure that at the end of each iteration, all elements from index 0 to t are sorted.  \n**Solution:**  \n```python\ndef insertion_sort(arr):\n    for t in range(1, len(arr)):\n        key = arr[t]\n        z = t - 1\n        while z >= 0 and key < arr[z]:\n            arr[z + 1] = arr[z]\n            z -= 1\n        arr[z + 1] = key\n    return arr\n```\n**Loop Invariant:**  \nTherefore, the loop invariant for this problem can be stated as:\n\"sorted_value = arr[0:t+1]\"\n\n**Problem 3:**  \n**Description:**  \nWrite a Python program to sort an array using merge sort. The program should ensure that at the start of each merge step, the subarrays to be merged are already sorted.  \n**Solution:**  \n```python\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr\n```\n**Loop Invariant:**  \nTherefore, the loop invariant for this problem can be stated as:\n\"left_subarray_sorted = sorted(L) and right_subarray_sorted = sorted(R)\"\n\n### Original Problem\n\n**Problem:**  \nWrite a Python program to sort an array using selection sort. The program should ensure that at the end of each iteration, the smallest element in the unsorted portion of the array has been moved to its correct position.  \n**Solution:**  \n```python\ndef selection_sort(arr):\n    t = 0\n    while t < len(arr):\n        z = t + 1\n        while z < len(arr):\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr\n```\n\n**Loop Invariant:**  \nTherefore, the final answer is:\n\"smallest_unsorted_value = min(arr[t:len(arr)])\""}, {"role": "user", "content": "def selection_sort(arr):\n    t = 0\n    while t <= len(arr) - 1:\n        z = t + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n**Problem 1:**  \n**Description:**  \nWrite a Python program to sort an array using bubble sort. The program should ensure that after each pass through the array, the largest unsorted element has bubbled up to its correct position.  \n**Solution:**  \n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for t in range(n-1):\n        for z in range(0, n-t-1):\n            if arr[z] > arr[z+1]:\n                arr[z], arr[z+1] = arr[z+1], arr[z]\n    return arr\n```\n**Loop Invariant:**  \n\"largest_unsorted_value = max(arr[t:n])\"\n\n**Problem 2:**  \n**Description:**  \nWrite a Python program to sort an array using insertion sort. The program should ensure that at the end of each iteration, all elements from index 0 to t are sorted.  \n**Solution:**  \n```python\ndef insertion_sort(arr):\n    for t in range(1, len(arr)):\n        key = arr[t]\n        z = t - 1\n        while z >= 0 and key < arr[z]:\n            arr[z + 1] = arr[z]\n            z -= 1\n        arr[z + 1] = key\n    return arr\n```\n**Loop Invariant:**  \n\"sorted_value = arr[0:t+1]\"\n\n**Problem 3:**  \n**Description:**  \nWrite a Python program to sort an array using selection sort. The program should ensure that at the end of each iteration, the smallest element in the unsorted portion of the array has been moved to its correct position.  \n**Solution:**  \n```python\ndef selection_sort(arr):\n    t = 0\n    while t <= len(arr) - 1:\n        z = t + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr\n```\n\n**Loop Invariant:**  \nTo determine the loop invariant for the given `selection_sort` function, we need to ensure that after each iteration of the outer loop, the smallest element in the unsorted portion of the array has been placed in its correct position.\n\nThe outer loop runs from `t = 0` to `t = len(arr) - 1`. For each iteration of the outer loop, the inner loop finds the smallest element in the unsorted portion of the array and swaps it with the element at index `t`.\n\nTherefore, the loop invariant for the i-th iteration of the outer loop can be stated as:\n\"smallest_unsorted_value = min(arr[t:len(arr)])\"\n\n### Final Answer\nTherefore, the final answer is:\n\"smallest_unsorted_value = min(arr[t:len(arr)])\""}]