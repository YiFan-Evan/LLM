[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n < len(arr):\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "### Problem Description and Solutions\n\n#### Problem 1:\n**Description:** \nWrite a Python program that sorts an array using selection sort and prove the partial correctness of the program using a loop invariant.\n\n**Code:**\n```python\ndef selection_sort(arr):\n    n = 0\n    while n < len(arr):\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr\n```\n\n**Loop Invariant:**\nTo prove the partial correctness of this loop, we need a loop invariant that captures the state of the array at the start of each iteration of the outer loop. \n\nLet's consider the invariant: `sorted_elements_value = n`.\n\n**Explanation:** \nAt the beginning of each iteration of the outer loop, the first `n` elements of the array are sorted in non-decreasing order. This invariant holds because the inner loop finds the smallest element in the unsorted portion of the array (from index `n` to the end) and swaps it with the element at index `n`. Thus, after each iteration of the outer loop, the first `n` elements are guaranteed to be sorted.\n\n#### Problem 2:\n**Description:** \nWrite a Python program that sorts an array using insertion sort and prove the partial correctness of the program using a loop invariant.\n\n**Code:**\n```python\ndef insertion_sort(arr):\n    n = 1\n    while n < len(arr):\n        key = arr[n]\n        j = n - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n        n += 1\n    return arr\n```\n\n**Loop Invariant:**\nLet's consider the invariant: `sorted_elements_value = n`.\n\n**Explanation:** \nAt the beginning of each iteration of the outer loop, the first `n` elements of the array are sorted in non-decreasing order. This invariant holds because the inner loop inserts the element at index `n` into its correct position within the sorted portion of the array (from index `0` to `n-1`). After each iteration of the outer loop, the first `n` elements are guaranteed to be sorted.\n\n#### Problem 3:\n**Description:** \nWrite a Python program that sorts an array using bubble sort and prove the partial correctness of the program using a loop invariant.\n\n**Code:**\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    while n > 0:\n        for i in range(n - 1):\n            if arr[i] > arr[i + 1]:\n                temp = arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = temp\n        n -= 1\n    return arr\n```\n\n**Loop Invariant:**\nLet's consider the invariant: `sorted_elements_value = len(arr) - n`.\n\n**Explanation:** \nAt the beginning of each iteration of the outer loop, the last `n` elements of the array are sorted in non-decreasing order. This invariant holds because the inner loop compares adjacent elements and swaps them if they are out of order. After each pass of the outer loop, the largest unsorted element bubbles up to its correct position at the end of the array, making the last `n` elements sorted.\n\n### Original Problem:\n**Description:** \nWrite a Python program that sorts an array using selection sort and prove the partial correctness of the program using a loop invariant.\n\n**Answer:**\n\nTherefore, the final answer is: `sorted_elements_value = n`."}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n <= len(arr) - 1:\n        z = n + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "### Problem Description and Solutions\n\n#### Problem 1:\n**Description:** \nWrite a Python program that sorts an array using selection sort and prove the partial correctness of the program using a loop invariant.\n\n**Code:**\n```python\ndef selection_sort(arr):\n    n = 0\n    while n <= len(arr) - 1:\n        z = n + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr\n```\n\n**Loop Invariant:**\nThe loop invariant for the outer loop can be expressed as: `sorted_elements_value = n`.\n\n**Explanation:** \nAt the beginning of each iteration of the outer loop, the first `n` elements of the array are sorted in non-decreasing order. This invariant holds because the inner loop finds the smallest element in the unsorted portion of the array (from index `n` to the end) and swaps it with the element at index `n`. Thus, after each iteration of the outer loop, the first `n` elements are guaranteed to be sorted.\n\n#### Problem 2:\n**Description:** \nWrite a Python program that sorts an array using insertion sort and prove the partial correctness of the program using a loop invariant.\n\n**Code:**\n```python\ndef insertion_sort(arr):\n    n = 1\n    while n < len(arr):\n        key = arr[n]\n        j = n - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n        n += 1\n    return arr\n```\n\n**Loop Invariant:**\nThe loop invariant for the outer loop can be expressed as: `sorted_elements_value = n`.\n\n**Explanation:** \nAt the beginning of each iteration of the outer loop, the first `n` elements of the array are sorted in non-decreasing order. This invariant holds because the inner loop inserts the element at index `n` into its correct position within the sorted portion of the array (from index `0` to `n-1`). After each iteration of the outer loop, the first `n` elements are guaranteed to be sorted.\n\n#### Problem 3:\n**Description:** \nWrite a Python program that sorts an array using bubble sort and prove the partial correctness of the program using a loop invariant.\n\n**Code:**\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    while n > 0:\n        for i in range(n - 1):\n            if arr[i] > arr[i + 1]:\n                temp = arr[i]\n                arr[i] = arr[i + 1]\n                arr[i + 1] = temp\n        n -= 1\n    return arr\n```\n\n**Loop Invariant:**\nThe loop invariant for the outer loop can be expressed as: `sorted_elements_value = len(arr) - n`.\n\n**Explanation:** \nAt the beginning of each iteration of the outer loop, the last `n` elements of the array are sorted in non-decreasing order. This invariant holds because the inner loop compares adjacent elements and swaps them if they are out of order. After each pass of the outer loop, the largest unsorted element bubbles up to its correct position at the end of the array, making the last `n` elements sorted.\n\n### Original Problem:\n**Description:** \nWrite a Python program that sorts an array using selection sort and prove the partial correctness of the program using a loop invariant.\n\n**Answer:**\n\nTherefore, the final answer is: `sorted_elements_value = n`."}]