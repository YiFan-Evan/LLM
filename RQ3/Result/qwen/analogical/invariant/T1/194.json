[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    o = 0\n    while o < len(arr):\n        z = o + 1\n        while z < len(arr):\n            if arr[z] < arr[o]:\n                temp = arr[o]\n                arr[o] = arr[z]\n                arr[z] = temp\n            z += 1\n        o += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n**Problem 1:**  \n- **Description:** The same as the original problem, but the comparison inside the inner loop is reversed to sort the array in descending order instead of ascending order.\n- **Solution:** The only change needed is to reverse the comparison inside the inner loop:\n  ```python\n  def selection_sort_descending(arr):\n      o = 0\n      while o < len(arr):\n          z = o + 1\n          while z < len(arr):\n              if arr[z] > arr[o]:  # Change '<' to '>'\n                  temp = arr[o]\n                  arr[o] = arr[z]\n                  arr[z] = temp\n              z += 1\n          o += 1\n      return arr\n  ```\n\n**Problem 2:**  \n- **Description:** The same as the original problem, but the algorithm uses a different variable naming scheme for better readability.\n- **Solution:** Rename variables for clarity:\n  ```python\n  def selection_sort(arr):\n      outer_index = 0\n      while outer_index < len(arr):\n          inner_index = outer_index + 1\n          while inner_index < len(arr):\n              if arr[inner_index] < arr[outer_index]:\n                  temp = arr[outer_index]\n                  arr[outer_index] = arr[inner_index]\n                  arr[inner_index] = temp\n              inner_index += 1\n          outer_index += 1\n      return arr\n  ```\n\n**Problem 3:**  \n- **Description:** The same as the original problem, but the algorithm sorts an array of strings based on lexicographical order.\n- **Solution:** Change the comparison to work with strings:\n  ```python\n  def selection_sort_strings(arr):\n      outer_index = 0\n      while outer_index < len(arr):\n          inner_index = outer_index + 1\n          while inner_index < len(arr):\n              if arr[inner_index] < arr[outer_index]:  # Lexicographical comparison\n                  temp = arr[outer_index]\n                  arr[outer_index] = arr[inner_index]\n                  arr[inner_index] = temp\n              inner_index += 1\n          outer_index += 1\n      return arr\n  ```\n\n### Original Problem Answer\n\nTo find the loop invariant for the i-th iteration of the loop in the `selection_sort` function, we need to consider what properties hold true at the start of each iteration of the outer loop.\n\nThe outer loop starts with `o = 0` and increments `o` until it reaches `len(arr)`. At the start of each iteration of the outer loop, the subarray from index `0` to `o - 1` contains the smallest elements found so far, in sorted order.\n\nFor the inner loop, which runs from `z = o + 1` to `len(arr)`, it finds the smallest element in the subarray from `o` to `len(arr) - 1` and swaps it with the element at index `o`.\n\nThus, the loop invariant can be stated as:\n\n- At the start of the i-th iteration of the outer loop, the subarray `arr[0:i]` is sorted in non-decreasing order.\n\nTherefore, the final answer is: \n```plaintext\nTherefore, the final answer is: arr[0:o]_value = sorted(arr[0:o])\n```"}, {"role": "user", "content": "def selection_sort(arr):\n    o = 0\n    while o <= len(arr) - 1:\n        z = o + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[o]:\n                temp = arr[o]\n                arr[o] = arr[z]\n                arr[z] = temp\n            z += 1\n        o += 1\n    return arr"}, {"role": "assistant", "content": "### Related Problems\n\n**Problem 1:**  \n- **Description:** The same as the original problem, but the comparison inside the inner loop is reversed to sort the array in descending order instead of ascending order.\n- **Solution:** The only change needed is to reverse the comparison inside the inner loop:\n  ```python\n  def selection_sort_descending(arr):\n      o = 0\n      while o <= len(arr) - 1:\n          z = o + 1\n          while z <= len(arr) - 1:\n              if arr[z] > arr[o]:  # Change '<' to '>'\n                  temp = arr[o]\n                  arr[o] = arr[z]\n                  arr[z] = temp\n              z += 1\n          o += 1\n      return arr\n  ```\n\n**Problem 2:**  \n- **Description:** The same as the original problem, but the algorithm uses a different variable naming scheme for better readability.\n- **Solution:** Rename variables for clarity:\n  ```python\n  def selection_sort(arr):\n      outer_index = 0\n      while outer_index <= len(arr) - 1:\n          inner_index = outer_index + 1\n          while inner_index <= len(arr) - 1:\n              if arr[inner_index] < arr[outer_index]:\n                  temp = arr[outer_index]\n                  arr[outer_index] = arr[inner_index]\n                  arr[inner_index] = temp\n              inner_index += 1\n          outer_index += 1\n      return arr\n  ```\n\n**Problem 3:**  \n- **Description:** The same as the original problem, but the algorithm sorts an array of strings based on lexicographical order.\n- **Solution:** Change the comparison to work with strings:\n  ```python\n  def selection_sort_strings(arr):\n      outer_index = 0\n      while outer_index <= len(arr) - 1:\n          inner_index = outer_index + 1\n          while inner_index <= len(arr) - 1:\n              if arr[inner_index] < arr[outer_index]:  # Lexicographical comparison\n                  temp = arr[outer_index]\n                  arr[outer_index] = arr[inner_index]\n                  arr[inner_index] = temp\n              inner_index += 1\n          outer_index += 1\n      return arr\n  ```\n\n### Original Problem Answer\n\nTo find the loop invariant for the i-th iteration of the loop in the `selection_sort` function, we need to consider what properties hold true at the start of each iteration of the outer loop.\n\nThe outer loop starts with `o = 0` and increments `o` until it reaches `len(arr) - 1`. At the start of each iteration of the outer loop, the subarray from index `0` to `o - 1` contains the smallest elements found so far, in sorted order.\n\nFor the inner loop, which runs from `z = o + 1` to `len(arr) - 1`, it finds the smallest element in the subarray from `o` to `len(arr) - 1` and swaps it with the element at index `o`.\n\nThus, the loop invariant can be stated as:\n\n- At the start of the i-th iteration of the outer loop, the subarray `arr[0:i]` is sorted in non-decreasing order.\n\nTherefore, the final answer is:\n```plaintext\nTherefore, the final answer is: arr[0:o]_value = sorted(arr[0:o])\n```"}]