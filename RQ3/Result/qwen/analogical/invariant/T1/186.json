[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    g = 0\n    while g < len(arr):\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "To solve this problem, we need to identify the loop invariant for the outer loop and the inner loop separately. Let's break down the problem into three related but not identical subproblems:\n\n### Subproblem 1:\n**Problem Statement:** \nGiven an array `arr` and an integer `g`, after the outer loop runs until `g = i`, the first `i` elements of the array are sorted in non-decreasing order.\n\n**Solution:**\nThe loop invariant for the outer loop can be stated as:\n- After the outer loop runs until `g = i`, the first `i` elements of the array are sorted in non-decreasing order.\n- Therefore, the loop invariant can be expressed as: `sorted_value = True` where `sorted_value` checks that the first `g` elements of `arr` are sorted in non-decreasing order.\n\n### Subproblem 2:\n**Problem Statement:**\nGiven an array `arr` and integers `g` and `z`, during the inner loop iteration when `z` is between `g+1` and `len(arr)-1`, the smallest element between `g` and `z` is at position `g`.\n\n**Solution:**\nThe loop invariant for the inner loop can be stated as:\n- During the inner loop iteration when `z` is between `g+1` and `len(arr)-1`, the smallest element between `g` and `z` is at position `g`.\n- Therefore, the loop invariant can be expressed as: `min_value = min(arr[g:z+1]) == arr[g]`.\n\n### Subproblem 3:\n**Problem Statement:**\nGiven an array `arr` and an integer `g`, after the inner loop completes for a given `g`, the element at position `g` is the smallest element in the subarray `arr[g:len(arr)]`.\n\n**Solution:**\nThe loop invariant for the inner loop can also be stated as:\n- After the inner loop completes for a given `g`, the element at position `g` is the smallest element in the subarray `arr[g:len(arr)]`.\n- Therefore, the loop invariant can be expressed as: `smallest_value = min(arr[g:len(arr)]) == arr[g]`.\n\n### Final Answer:\nCombining the insights from the above subproblems, we can state the loop invariant for the i-th iteration of the outer loop as:\n- After the outer loop runs until `g = i`, the first `i` elements of the array are sorted in non-decreasing order.\n- Therefore, the final answer is: `sorted_value = all(arr[j] <= arr[j+1] for j in range(g))`.\n\nFor the inner loop:\n- During the inner loop iteration when `z` is between `g+1` and `len(arr)-1`, the smallest element between `g` and `z` is at position `g`.\n- Therefore, the final answer is: `min_value = min(arr[g:z+1]) == arr[g]`. \n\nHowever, since the question asks for a single loop invariant, we focus on the outer loop invariant which is more relevant for proving the partial correctness of the entire program.\n\nTherefore, the final answer is: `sorted_value = all(arr[j] <= arr[j+1] for j in range(g))`."}, {"role": "user", "content": "def selection_sort(arr):\n    g = 0\n    while g <= len(arr) - 1:\n        z = g + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "To solve this problem, let's break it down into three related but not identical subproblems, focusing on both the outer and inner loops.\n\n### Subproblem 1:\n**Problem Statement:** \nGiven an array `arr` and an integer `g`, after the outer loop runs until `g = i`, the first `i` elements of the array are sorted in non-decreasing order.\n\n**Solution:**\nThe loop invariant for the outer loop can be stated as:\n- After the outer loop runs until `g = i`, the first `i` elements of the array are sorted in non-decreasing order.\n- Therefore, the loop invariant can be expressed as: `sorted_value = all(arr[j] <= arr[j+1] for j in range(g))`.\n\n### Subproblem 2:\n**Problem Statement:**\nGiven an array `arr` and integers `g` and `z`, during the inner loop iteration when `z` is between `g+1` and `len(arr)-1`, the smallest element between `g` and `z` is at position `g`.\n\n**Solution:**\nThe loop invariant for the inner loop can be stated as:\n- During the inner loop iteration when `z` is between `g+1` and `len(arr)-1`, the smallest element between `g` and `z` is at position `g`.\n- Therefore, the loop invariant can be expressed as: `min_value = min(arr[g:z+1]) == arr[g]`.\n\n### Subproblem 3:\n**Problem Statement:**\nGiven an array `arr` and an integer `g`, after the inner loop completes for a given `g`, the element at position `g` is the smallest element in the subarray `arr[g:len(arr)]`.\n\n**Solution:**\nThe loop invariant for the inner loop can also be stated as:\n- After the inner loop completes for a given `g`, the element at position `g` is the smallest element in the subarray `arr[g:len(arr)]`.\n- Therefore, the loop invariant can be expressed as: `smallest_value = min(arr[g:len(arr)]) == arr[g]`.\n\n### Final Answer:\nSince the question asks for the loop invariant for the i-th iteration of the loop to prove the partial correctness of the program, we focus on the outer loop invariant which is more relevant for proving the overall correctness of the selection sort algorithm.\n\nTherefore, the final answer is: `sorted_value = all(arr[j] <= arr[j+1] for j in range(g))`."}]