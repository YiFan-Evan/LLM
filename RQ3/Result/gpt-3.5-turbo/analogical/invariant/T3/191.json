[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    l = 0\n    while l < len(arr):\n        z = l + 1\n        while z < len(arr):\n            if arr[z] < arr[l]:\n                temp = arr[l]\n                arr[l] = arr[z]\n                arr[z] = temp\n            z += 1\n        l += 1\n    return arr"}, {"role": "assistant", "content": "1. Problem: Loop Invariant for Bubble Sort\nDescription: Given a Python program implementing the bubble sort algorithm, provide a loop invariant for the i-th iteration of the outer loop.\nSolution: Loop invariant for bubble sort would be of the form 'j_value = fun(arr[j]->arr[j+1])'.\n\n2. Problem: Loop Invariant for Insertion Sort\nDescription: Given a Python program implementing the insertion sort algorithm, provide a loop invariant for the i-th iteration of the outer loop.\nSolution: Loop invariant for insertion sort would be of the form 'key_value = fun(key, arr[1:i+1])'.\n\n3. Problem: Loop Invariant for Merge Sort\nDescription: Given a Python program implementing the merge sort algorithm, provide a loop invariant for the i-th iteration of the merge function.\nSolution: Loop invariant for merge sort would be of the form 'merge_value = fun(left_arr, right_arr, arr[:i])'.\n\nTherefore, the final answer is: 'z_value = arr[l] > arr[z]'."}, {"role": "user", "content": "def selection_sort(arr):\n    l = len(arr)\n    while l > 0:\n        l -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[l]:\n                temp = arr[l]\n                arr[l] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "1. Problem: Loop Invariant for Insertion Sort\nDescription: Given a Python program implementing the insertion sort algorithm, provide a loop invariant for the i-th iteration of the outer loop.\nSolution: Loop invariant for insertion sort would be of the form 'key_value = fun(arr[z], arr[z+1:i+1])'.\n\n2. Problem: Loop Invariant for Quick Sort\nDescription: Given a Python program implementing the quick sort algorithm, provide a loop invariant for the i-th iteration of the partitioning step.\nSolution: Loop invariant for quick sort would be of the form 'pivot_value = pivot->arr[low:high]'.\n\n3. Problem: Loop Invariant for Bubble Sort\nDescription: Given a Python program implementing the bubble sort algorithm, provide a loop invariant for the i-th iteration of the outer loop.\nSolution: Loop invariant for bubble sort would be of the form 'j_value = fun(arr[j]->arr[j+1])'.\n\nTherefore, the final answer is: 'z_value = arr[z] < arr[l]'."}]