[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r < len(arr):\n        z = r + 1\n        while z < len(arr):\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem:** Consider a program where the loop is intended to find the maximum element in an array. The array `arr` contains `n` elements. At the end of each iteration of the loop, the variable `r` stores the index with the maximum element found so far.\n\n**Loop Invariant:** At the start of the i-th iteration of the loop, the maximum element among `arr[0:i]` is stored at `arr[r]`.\n\n**Termination:** The loop terminates when `r = n-1`, ensuring that the maximum element is correctly placed at the end of the array.\n\nSolution: Applying the loop invariant, we can prove the partial correctness of the program.\n\n2. **Problem:** You are given a program that aims to find the minimum element in an array. The array `arr` contains `n` elements. At the end of each iteration of the loop, the variable `r` holds the index with the minimum element found so far.\n\n**Loop Invariant:** At the start of the i-th iteration of the loop, the minimum element among `arr[0:i]` is stored at `arr[r]`.\n\n**Termination:** The loop terminates when `r = n-1`, ensuring that the minimum element is correctly placed at the beginning of the array.\n\nSolution: Validate the correctness by proving the loop invariant.\n\n3. **Problem:** Suppose you have a code snippet that is designed to find the k-th smallest element in an array. The array `arr` contains `n` elements, and the variable `k` represents the index of the element to be found.\n\n**Loop Invariant:** At the beginning of the i-th iteration of the loop, the k-th smallest element among `arr[0:i]` is located correctly within the first k elements of the array.\n\n**Termination:** The loop ends when `r = k - 1`, ensuring that the k-th smallest element is correctly placed at the k-th position in the array.\n\nSolution: Use the loop invariant to prove the correctness of the algorithm in locating the k-th smallest element.\n\nTherefore, the final answer is: \"At the start of the i-th iteration of the outer loop in the `selection_sort` function, the subarray `arr[0:r]` is sorted in non-decreasing order.\""}, {"role": "user", "content": "def selection_sort(arr):\n    r = len(arr)\n    while r > 0:\n        r -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "1. **Problem:** Consider a program where the loop is intended to find the maximum element in an array. The array `arr` contains `n` elements. At the end of each iteration of the loop, the variable `r` stores the index with the maximum element found so far.\n\n**Loop Invariant:** At the start of the i-th iteration of the outer loop, the maximum element among `arr[r:n]` is stored at `arr[r]`.\n\n**Termination:** The loop terminates when `r = 0`, ensuring that the maximum element is correctly placed at the beginning of the array.\n\nSolution: By proving the loop invariant, we can establish the partial correctness of the program.\n\n2. **Problem:** You are given a program that aims to find the minimum element in an array. The array `arr` contains `n` elements. At the end of each iteration of the loop, the variable `r` holds the index with the minimum element found so far.\n\n**Loop Invariant:** At the start of the i-th iteration of the outer loop, the minimum element among `arr[r:n]` is stored at `arr[r]`.\n\n**Termination:** The loop terminates when `r = 0`, ensuring that the minimum element is correctly placed at the beginning of the array.\n\nSolution: Validate the correctness by proving the loop invariant.\n\n3. **Problem:** Suppose you have a code snippet that is designed to find the k-th smallest element in an array. The array `arr` contains `n` elements, and the variable `k` represents the index of the element to be found.\n\n**Loop Invariant:** At the beginning of the i-th iteration of the outer loop, the k-th smallest element among `arr[r:n]` is located correctly within the last k elements of the array.\n\n**Termination:** The loop ends when `r = n - 1 - k`, ensuring that the k-th smallest element is correctly placed at the k-th position from the end of the array.\n\nSolution: Utilize the loop invariant to demonstrate the correctness.\n\nTherefore, the final answer is: \"At the start of the i-th iteration of the outer loop in the `selection_sort` function, the subarray `arr[r:len(arr)]` is sorted in non-decreasing order.\""}]