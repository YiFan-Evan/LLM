[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    c = 0\n    while c < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        c += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem 1:**\n   - **Description:** Write a Python program to sort an array using insertion sort in descending order.\n   - **Solution:** The program will be similar to the given program, but the inner while loop condition will change to `(z > 0 and arr[z - 1] < arr[z])` to sort in descending order.\n   \n2. **Problem 2:**\n   - **Description:** Write a Python program to find the second smallest element in an array.\n   - **Solution:** Use selection sort, and in the loop, maintain both the smallest and second smallest numbers found so far. Return the second smallest number after the loop finishes.\n\n3. **Problem 3:**\n   - **Description:** Write a Python program to count the number of inversions in an array.\n   - **Solution:** Use a variation of merge sort, where at each merge step, the number of inversions can be counted. Return the total count of inversions at the end.\n\n**Loop Invariant:**\nAt the beginning of the i-th iteration of the outer loop, the subarray `arr[0:i]` is sorted in non-decreasing order.\n\n**Therefore, the final answer is:** `sorted subarray arr[0:c]`"}, {"role": "user", "content": "def insertion_sort(arr):\n    c = len(arr)\n    while c > 0:\n        z = i\n        while z < len(arr) and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z += 1\n        c -= 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem 1:**\n   - **Description:** Write a Python program to sort an array using insertion sort in non-decreasing order.\n   - **Solution:** The program will be similar to the given program, but the inner while loop condition will change to `(z < len(arr) and arr[z - 1] > arr[z])` to sort in non-decreasing order.\n   \n2. **Problem 2:**\n   - **Description:** Write a Python program to find the median of an array.\n   - **Solution:** Use a modified quicksort algorithm to partition the array around the median until the median element is identified or approximated.\n\n3. **Problem 3:**\n   - **Description:** Write a Python program to remove duplicates from a sorted array in-place.\n   - **Solution:** Traverse through the array and keep track of the last unique element. If the current element is different from the last unique element, replace it with the next unique element.\n\n**Loop Invariant:**\nAt the beginning of the i-th iteration of the outer loop, the subarray `arr[len(arr)-c:len(arr)]` is sorted in non-increasing order.\n\n**Therefore, the final answer is:** `sorted subarray arr[len(arr)-c:len(arr)]`"}]