[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    r = 0\n    while r < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. Problem: Given an array of integers, sort the array in ascending order using insertion sort.\nSolution: Use a nested loop where the outer loop iterates over each element of the array and the inner loop moves the element to its correct position.\n```python\ndef insertion_sort(arr):\n    for i in range(len(arr)):\n        j = i\n        while j > 0 and arr[j - 1] > arr[j]:\n            arr[j - 1], arr[j] = arr[j], arr[j - 1]\n            j -= 1\n    return arr\n```\n\n2. Problem: Given an array of strings, sort the array in lexicographical order using insertion sort.\nSolution: Similar to the previous solution, use a nested loop to compare and swap elements to sort the array of strings.\n```python\ndef insertion_sort(arr):\n    for i in range(len(arr)):\n        j = i\n        while j > 0 and arr[j - 1] > arr[j]:\n            arr[j - 1], arr[j] = arr[j], arr[j - 1]\n            j -= 1\n    return arr\n```\n\n3. Problem: Given an array of tuples, sort the array based on the second element of each tuple in ascending order using insertion sort.\nSolution: Modify the comparison condition in the inner loop to compare the second element of the tuples for sorting.\n```python\ndef insertion_sort(arr):\n    for i in range(len(arr)):\n        j = i\n        while j > 0 and arr[j - 1][1] > arr[j][1]:\n            arr[j - 1], arr[j] = arr[j], arr[j - 1]\n            j -= 1\n    return arr\n```\n\nTherefore, the final answer is: \n\"z = z_value = fun(arr[z]->arr[z-1])\""}, {"role": "user", "content": "def insertion_sort(arr):\n    r = len(arr)\n    while r > 0:\n        z = i\n        while z < len(arr) and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z += 1\n        r -= 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. Problem: Given an array of integers, sort the array in descending order using insertion sort.\nSolution: The function can be modified to sort the array in descending order by changing the comparison in the inner loop to check if the previous element is smaller than the current element.\n```python\ndef insertion_sort(arr):\n    r = len(arr)\n    while r > 0:\n        z = i\n        while z < len(arr) and arr[z - 1] < arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z += 1\n        r -= 1\n    return arr\n```\n\n2. Problem: Given an array of strings, sort the array in reverse lexicographical order using insertion sort.\nSolution: Similar to the previous solution, change the comparison in the inner loop to sort the array of strings in reverse order.\n```python\ndef insertion_sort(arr):\n    r = len(arr)\n    while r > 0:\n        z = i\n        while z < len(arr) and arr[z - 1] < arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z += 1\n        r -= 1\n    return arr\n```\n\n3. Problem: Given an array of tuples, sort the array based on the second element of each tuple in descending order using insertion sort.\nSolution: Modify the comparison condition in the inner loop to compare the second element of the tuples in reverse order.\n```python\ndef insertion_sort(arr):\n    r = len(arr)\n    while r > 0:\n        z = i\n        while z < len(arr) and arr[z - 1][1] < arr[z][1]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z += 1\n        r -= 1\n    return arr\n```\n\nTherefore, the final answer is: \n\"z = z_value = fun(arr[z]->arr[z-1])\""}]