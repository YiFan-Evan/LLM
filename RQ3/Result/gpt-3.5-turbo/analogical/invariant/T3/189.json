[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    j = 0\n    while j < len(arr):\n        z = j + 1\n        while z < len(arr):\n            if arr[z] < arr[j]:\n                temp = arr[j]\n                arr[j] = arr[z]\n                arr[z] = temp\n            z += 1\n        j += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem:**\n   - **Description:** You are given a Python program that implements the bubble sort algorithm to sort an array in non-decreasing order. The algorithm iterates through the array and compares adjacent elements, swapping them if they are in the wrong order.\n   - **Solution:** You need to provide a loop invariant for the i-th iteration of the outer loop in the bubble sort algorithm to prove its partial correctness.\n\n2. **Problem:**\n   - **Description:** You are provided with a Python program that implements the insertion sort algorithm to sort an array in non-decreasing order. The algorithm iterates through the array, inserting each element into its correct position in the sorted part of the array.\n   - **Solution:** You need to give a loop invariant for the i-th iteration of the outer loop in the insertion sort algorithm to ensure its partial correctness.\n\n3. **Problem:**\n   - **Description:** Consider a Python program that implements the quicksort algorithm to sort an array in non-decreasing order. The algorithm selects a pivot element, partitions the array into two subarrays based on the pivot, and recursively sorts the subarrays.\n   - **Solution:** You are required to present a loop invariant for the i-th iteration of the quicksort algorithm to demonstrate its partial correctness.\n\n**Answer:**\nTherefore, the final answer is: 'z_value = arr[z] \u2264 arr[j]'."}, {"role": "user", "content": "def selection_sort(arr):\n    j = len(arr)\n    while j > 0:\n        j -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[j]:\n                temp = arr[j]\n                arr[j] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "1. **Problem:**\n   - **Description:** You have a Python program that implements the insertion sort algorithm to sort an array in non-decreasing order. The algorithm iterates through the array, swapping adjacent elements if they are in the wrong order.\n   - **Solution:** Provide a loop invariant for the i-th iteration of the outer loop in the insertion sort algorithm.\n\n2. **Problem:**\n   - **Description:** You are given a Python program that implements the merge sort algorithm to sort an array in non-decreasing order. The algorithm divides the array into two halves, recursively sorts the halves, and then merges them.\n   - **Solution:** Present a loop invariant for the i-th iteration of the merge sort algorithm to prove its partial correctness.\n\n3. **Problem:**\n   - **Description:** Consider a Python program implementing the heap sort algorithm to sort an array in non-decreasing order. The algorithm builds a max heap from the array and repeatedly extracts the maximum element to get a sorted array.\n   - **Solution:** Provide a loop invariant for the i-th iteration of the heap sort algorithm.\n\n**Answer:**\nTherefore, the final answer is: 'z_value = arr[z] \u2265 arr[j]'."}]