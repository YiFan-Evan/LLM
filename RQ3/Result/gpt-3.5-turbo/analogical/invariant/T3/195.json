[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    p = 0\n    while p < len(arr):\n        z = p + 1\n        while z < len(arr):\n            if arr[z] < arr[p]:\n                temp = arr[p]\n                arr[p] = arr[z]\n                arr[z] = temp\n            z += 1\n        p += 1\n    return arr"}, {"role": "assistant", "content": "Similar Problem 1:\n**Problem**: \nGiven a list of integers, write a program to find the maximum element in the list and move it to the end of the list.\n```python\ndef move_max_to_end(arr):\n    p = 0\n    while p < len(arr):\n        max_idx = p\n        z = p + 1\n        while z < len(arr):\n            if arr[z] > arr[max_idx]:\n                max_idx = z\n            z += 1\n        temp = arr[p]\n        arr[p] = arr[max_idx]\n        arr[max_idx] = temp\n        p += 1\n    return arr\n```\n\nSimilar Problem 2:\n**Problem**: \nGiven a list of integers, write a program to find the minimum element in the list and move it to the beginning of the list.\n```python\ndef move_min_to_beginning(arr):\n    p = 0\n    while p < len(arr):\n        min_idx = p\n        z = p + 1\n        while z < len(arr):\n            if arr[z] < arr[min_idx]:\n                min_idx = z\n            z += 1\n        temp = arr[p]\n        arr[p] = arr[min_idx]\n        arr[min_idx] = temp\n        p += 1\n    return arr\n```\n\nSimilar Problem 3:\n**Problem**: \nGiven a list of integers, write a program to sort the list in non-decreasing order using the selection sort algorithm.\n```python\ndef sort_non_decreasing(arr):\n    p = 0\n    while p < len(arr):\n        min_idx = p\n        z = p + 1\n        while z < len(arr):\n            if arr[z] < arr[min_idx]:\n                min_idx = z\n            z += 1\n        temp = arr[p]\n        arr[p] = arr[min_idx]\n        arr[min_idx] = temp\n        p += 1\n    return arr\n```\n\nTherefore, the final answer is: \n'p_value = fun(arr[0]->arr[p-1] are in non-decreasing order and arr[p] is the smallest element in this range)'"}, {"role": "user", "content": "def selection_sort(arr):\n    p = len(arr)\n    while p > 0:\n        p -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[p]:\n                temp = arr[p]\n                arr[p] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "Similar Problem 1:\n**Problem**: \nGiven a list of integers, write a program to find the maximum element in the list and move it to the end of the list.\n```python\ndef move_max_to_end(arr):\n    p = len(arr)\n    while p > 0:\n        p -= 1\n        max_idx = p\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] > arr[max_idx]:\n                max_idx = z\n        temp = arr[p]\n        arr[p] = arr[max_idx]\n        arr[max_idx] = temp\n    return arr\n```\n\nSimilar Problem 2:\n**Problem**: \nGiven a list of integers, write a program to find the minimum element in the list and move it to the beginning of the list.\n```python\ndef move_min_to_beginning(arr):\n    p = len(arr)\n    while p > 0:\n        p -= 1\n        min_idx = p\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[min_idx]:\n                min_idx = z\n        temp = arr[p]\n        arr[p] = arr[min_idx]\n        arr[min_idx] = temp\n    return arr\n```\n\nSimilar Problem 3:\n**Problem**: \nGiven a list of integers, write a program to sort the list in non-decreasing order using the selection sort algorithm.\n```python\ndef sort_non_decreasing(arr):\n    p = len(arr)\n    while p > 0:\n        p -= 1\n        min_idx = p\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[min_idx]:\n                min_idx = z\n        temp = arr[p]\n        arr[p] = arr[min_idx]\n        arr[min_idx] = temp\n    return arr\n```\n\nTherefore, the final answer is: \n'p_value = fun(arr[p+1]->arr[len(arr)-1] are in non-decreasing order and arr[p] is the largest element in this range)'"}]