[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    h = 0\n    while h < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "Similar problem 1:\n**Problem:** Write a program to implement selection sort.\n```python\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n```\n**Solution:** The selection sort algorithm is used to sort an array by repeatedly finding the minimum element from the unsorted part and moving it to the beginning.\n\nSimilar problem 2:\n**Problem:** Write a program to implement bubble sort.\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\n**Solution:** The bubble sort algorithm works by repeatedly swapping adjacent elements if they are in the wrong order.\n\nSimilar problem 3:\n**Problem:** Write a program to calculate the factorial of a number.\n```python\ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n```\n**Solution:** This program calculates the factorial of a given number by iterating through all integers from 1 to n and multiplying them.\n\nTherefore, the final answer is:"}, {"role": "user", "content": "def insertion_sort(arr):\n    h = len(arr)\n    while h > 0:\n        z = i\n        while z < len(arr) and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z += 1\n        h -= 1\n    return arr"}, {"role": "assistant", "content": "Similar problem 1:\n**Problem:** Write a program to implement insertion sort without using a nested loop.\n```python\ndef insertion_sort_no_nested(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n**Solution:** This program sorts an array in ascending order by iteratively inserting elements from the unsorted part into the sorted part of the array.\n\nSimilar problem 2:\n**Problem:** Write a program to find the median of an array using insertion sort.\n```python\ndef find_median(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    if len(arr) % 2 != 0:\n        return arr[len(arr) // 2]\n    else:\n        return (arr[len(arr) // 2 - 1] + arr[len(arr) // 2]) / 2\n```\n**Solution:** This program uses insertion sort to sort the array and then finds the median of the sorted array.\n\nSimilar problem 3:\n**Problem:** Write a program to find the k-th smallest element in an array using insertion sort.\n```python\ndef kth_smallest(arr, k):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr[k - 1] if k <= len(arr) else None\n```\n**Solution:** This program sorts the array using insertion sort and then returns the k-th smallest element if it exists within the array.\n\nTherefore, the final answer is:"}]