[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    g = 0\n    while g < len(arr):\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "Similar problem 1:\n**Problem:**\nFind the maximum element in an array using a search algorithm.\n**Solution:**\n- Consider the following loop invariant: 'max_value = max(arr[0], arr[1], ..., arr[g])'.\n- As the loop progresses, the variable 'max_value' will store the maximum element found so far in the array. This can be used to find the overall maximum element in the array.\n\nSimilar problem 2:\n**Problem:**\nImplement a function to calculate the sum of elements in an array.\n**Solution:**\n- Loop invariant: 'sum_value = sum(arr[0], arr[1], ..., arr[g-1])'.\n- The variable 'sum_value' will store the sum of the elements encountered so far in the array during the iterative process.\n\nSimilar problem 3:\n**Problem:**\nWrite a function to count the number of occurrences of a specific element in an array.\n**Solution:**\n- Loop invariant: 'count_value = count(arr[0], arr[1], ..., arr[g-1], element)'.\n- The variable 'count_value' will maintain the count of occurrences of the specified element in the array iterated up to the current index 'g'.\n\nTherefore, the final answer is: 'arr is sorted in ascending order when the function ends'."}, {"role": "user", "content": "def selection_sort(arr):\n    g = len(arr)\n    while g > 0:\n        g -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "Similar problem 1:\n**Problem:**\nFind the minimum element in an array using a search algorithm.\n**Solution:**\n- Loop invariant: 'min_value = min(arr[z], arr[z+1], ..., arr[g])'.\n- The variable 'min_value' will contain the minimum element encountered so far in the array while iterating through the elements.\n\nSimilar problem 2:\n**Problem:**\nCalculate the product of elements in an array using a loop.\n**Solution:**\n- Loop invariant: 'product_value = prod(arr[z], arr[z+1], ..., arr[g-1])'.\n- The variable 'product_value' will store the product of array elements from index 0 to index 'g-1' as the loop progresses.\n\nSimilar problem 3:\n**Problem:**\nImplement a function to reverse an array in-place.\n**Solution:**\n- Loop invariant: 'reversed_arr = reversed(arr[g], arr[g+1], ..., arr[n-1])'.\n- The variable 'reversed_arr' will hold the reversed elements of the array from index 'g' to the end of the array as the loop continues iterating.\n\nTherefore, the final answer is: 'arr is sorted in ascending order when the function ends'."}]