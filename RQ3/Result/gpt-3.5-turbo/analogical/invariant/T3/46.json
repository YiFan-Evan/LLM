[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def give_count(arr, target):\n    count_value = 0\n    g = 0\n    while g < len(arr):\n        if arr[g] == target:\n            count_value += 1\n        g += 1\n    return count_value"}, {"role": "assistant", "content": "1. Problem: \nWrite a Python program to find the sum of all elements in an array.\n```python\ndef find_sum(arr):\n    sum_value = 0\n    i = 0\n    while i < len(arr):\n        sum_value += arr[i]\n        i += 1\n    return sum_value\n```\n\n2. Problem: \nWrite a Python program to find the maximum element in an array.\n```python\ndef find_max(arr):\n    max_value = float('-inf')\n    i = 0\n    while i < len(arr):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        i += 1\n    return max_value\n```\n\n3. Problem: \nWrite a Python program to check if an array is sorted in ascending order.\n```python\ndef is_sorted(arr):\n    sorted_value = True\n    i = 1\n    while i < len(arr):\n        if arr[i] < arr[i-1]:\n            sorted_value = False\n            break\n        i += 1\n    return sorted_value\n```"}, {"role": "user", "content": "def give_count(arr, target):\n    count_value = 0\n    g = len(arr)\n    while g > 0:\n        g -= 1\n        if arr[g] == target:\n            count_value += 1\n    return count_value"}, {"role": "assistant", "content": "Therefore, the final answer is: the loop invariant for the i-th iteration of the loop is 'g_value = arr[g]->arr[len(arr)-g]'."}]