[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    c = 0\n    while c < len(arr):\n        z = c + 1\n        while z < len(arr):\n            if arr[z] < arr[c]:\n                temp = arr[c]\n                arr[c] = arr[z]\n                arr[z] = temp\n            z += 1\n        c += 1\n    return arr"}, {"role": "assistant", "content": "**Related Problem 1:**\n\n**Description:**\nGiven an array of integers, write a Python program 'arrange_increasing_order' to arrange the elements of the array in increasing order using the selection sort algorithm.\n\n**Input:**\nAn array of integers: [3, 1, 5, 2, 4]\n\n**Output:**\nAfter applying the selection sort algorithm, the array should be sorted in increasing order: [1, 2, 3, 4, 5]\n\n**Solution:**\n1. Initialize a variable 'c' to 0.\n2. Use a while loop to iterate through the array from 0 to len(arr).\n3. Inside the outer loop, initialize a variable 'z' to c + 1.\n4. Use another while loop to iterate through the array from z to len(arr).\n5. If arr[z] < arr[c], swap the values at indices z and c.\n6. Increment z in each iteration of the inner loop.\n7. Increment c in each iteration of the outer loop.\n8. Finally, return the sorted array.\n\n**Related Problem 2:**\n\n**Description:**\nWrite a Python program 'find_smallest_element' to find and return the smallest element in an array using the selection sort algorithm.\n\n**Input:**\nAn array of integers: [8, 3, 5, 2, 10]\n\n**Output:**\nThe smallest element in the array is 2.\n\n**Solution:**\n1. Initialize a variable 'c' to 0.\n2. Use a while loop to iterate through the array from 0 to len(arr).\n3. Inside the outer loop, initialize a variable 'z' to c + 1.\n4. Use another while loop to iterate through the array from z to len(arr).\n5. If arr[z] < arr[c], swap the values at indices z and c.\n6. Increment z in each iteration of the inner loop.\n7. Increment c in each iteration of the outer loop.\n8. Finally, return arr[0] as it will be the smallest element after sorting.\n\n**Related Problem 3:**\n\n**Description:**\nImplement a Python program 'sort_alphabetically' to sort a list of strings alphabetically using the selection sort algorithm.\n\n**Input:**\nA list of strings: [\"apple\", \"banana\", \"grape\", \"pear\", \"orange\"]\n\n**Output:**\nAfter sorting alphabetically: [\"apple\", \"banana\", \"grape\", \"orange\", \"pear\"]\n\n**Solution:**\n1. Initialize a variable 'c' to 0.\n2. Use a while loop to iterate through the list from 0 to len(arr).\n3. Inside the outer loop, initialize a variable 'z' to c + 1.\n4. Use another while loop to iterate through the list from z to len(arr).\n5. If arr[z] < arr[c], swap the strings at indices z and c.\n6. Increment z in each iteration of the inner loop.\n7. Increment c in each iteration of the outer loop.\n8. Finally, return the list of strings sorted alphabetically.\n\n**Therefore, the final answer is:** 'z_value = c + 1'"}, {"role": "user", "content": "def selection_sort(arr):\n    c = len(arr)\n    while c > 0:\n        c -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[c]:\n                temp = arr[c]\n                arr[c] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "**Related Problem 1:**\n\n**Description:**\nWrite a Python program 'find_largest_element' to find and return the largest element in an array using the selection sort algorithm.\n\n**Input:**\nAn array of integers: [8, 3, 5, 2, 10]\n\n**Output:**\nThe largest element in the array is 10.\n\n**Solution:**\n1. Initialize a variable 'c' to len(arr).\n2. Use a while loop to iterate through the array from len(arr) to 0.\n3. Decrement c in each iteration of the outer loop.\n4. Inside the outer loop, initialize a variable 'z' to c.\n5. Use another while loop to iterate through the array from z to 0.\n6. Decrement z in each iteration of the inner loop.\n7. If arr[z] < arr[c], swap the values at indices z and c.\n8. Finally, return arr[len(arr)-1] as it will be the largest element after sorting.\n\n**Related Problem 2:**\n\n**Description:**\nImplement a Python program 'sort_descending_order' to sort an array of integers in descending order using the selection sort algorithm.\n\n**Input:**\nAn array of integers: [6, 3, 9, 2, 5]\n\n**Output:**\nAfter sorting in descending order: [9, 6, 5, 3, 2]\n\n**Solution:**\n1. Initialize a variable 'c' to len(arr).\n2. Use a while loop to iterate through the array from len(arr) to 0.\n3. Decrement c in each iteration of the outer loop.\n4. Inside the outer loop, initialize a variable 'z' to c.\n5. Use another while loop to iterate through the array from z to 0.\n6. Decrement z in each iteration of the inner loop.\n7. If arr[z] > arr[c], swap the values at indices z and c.\n8. Finally, return the sorted array in descending order.\n\n**Related Problem 3:**\n\n**Description:**\nWrite a Python program 'sort_strings_by_length' to sort a list of strings by their lengths using the selection sort algorithm.\n\n**Input:**\nA list of strings: [\"apple\", \"banana\", \"grape\", \"pear\", \"orange\"]\n\n**Output:**\nAfter sorting by length: [\"pear\", \"grape\", \"apple\", \"banana\", \"orange\"]\n\n**Solution:**\n1. Initialize a variable 'c' to len(arr).\n2. Use a while loop to iterate through the list from len(arr) to 0.\n3. Decrement c in each iteration of the outer loop.\n4. Inside the outer loop, initialize a variable 'z' to c.\n5. Use another while loop to iterate through the list from z to 0.\n6. Decrement z in each iteration of the inner loop.\n7. If len(arr[z]) > len(arr[c]), swap the strings at indices z and c.\n8. Finally, return the list of strings sorted by length.\n\n**Therefore, the final answer is:** 'z_value = c'"}]