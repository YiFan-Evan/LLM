[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    o = 0\n    while o < len(arr):\n        z = o + 1\n        while z < len(arr):\n            if arr[z] < arr[o]:\n                temp = arr[o]\n                arr[o] = arr[z]\n                arr[z] = temp\n            z += 1\n        o += 1\n    return arr"}, {"role": "assistant", "content": "Related Problem 1:\n**Problem Description:** You are given a program to find the maximum element in an array and move it to the end of the array using selection sort. The program contains a loop where it iterates over the array elements to find the maximum element and swap it with the last element. \n\n**Solution:** The loop invariant for this problem can be stated as 'i_value = max(arr[i] -> arr[-1])', where i is the index of the current iteration.\n\nRelated Problem 2:\n**Problem Description:** You are given a program to sort an array in non-decreasing order using selection sort. The program contains a loop where it iterates over the array elements and selects the minimum element to place at the beginning of the array.\n\n**Solution:** The loop invariant for this problem can be stated as 'i_value = min(arr[i] -> arr[-1])', where i is the index of the current iteration.\n\nRelated Problem 3:\n**Problem Description:** You are given a program to reverse an array in-place using selection sort. The program contains a loop where it iterates over the array elements and swaps the elements to reverse the array.\n\n**Solution:** The loop invariant for this problem can be stated as 'i_value = arr[i] -> arr[-i-1]', where i is the index of the current iteration.\n\nTherefore, the final answer is: 'o_value = arr[0] -> arr[o]'."}, {"role": "user", "content": "def selection_sort(arr):\n    o = len(arr)\n    while o > 0:\n        o -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[o]:\n                temp = arr[o]\n                arr[o] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "Related Problem 1:\n**Problem Description:** You are given a program to find the minimum element in an array and move it to the beginning of the array using selection sort. The program contains a loop where it iterates over the array elements to find the minimum element and swap it with the first element.\n\n**Solution:** The loop invariant for this problem can be stated as 'i_value = min(arr[i] -> arr[0])', where i is the index of the current iteration.\n\nRelated Problem 2:\n**Problem Description:** You are given a program to sort an array in non-increasing order using selection sort. The program contains a loop where it iterates over the array elements and selects the maximum element to place at the beginning of the array.\n\n**Solution:** The loop invariant for this problem can be stated as 'i_value = max(arr[i] -> arr[0])', where i is the index of the current iteration.\n\nRelated Problem 3:\n**Problem Description:** You are given a program to shift all negative elements in an array to the left side and positive elements to the right side using selection sort. The program contains a loop where it iterates over the array elements and shifts the elements accordingly.\n\n**Solution:** The loop invariant for this problem can be stated as 'i_value = negative(arr[i] -> arr[negative])', where i is the index of the current iteration and \"negative\" represents the partition index for negative elements.\n\nTherefore, the final answer is: 'o_value = arr[o] -> arr[0]'."}]