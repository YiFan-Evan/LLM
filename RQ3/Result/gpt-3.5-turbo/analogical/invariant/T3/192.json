[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    m = 0\n    while m < len(arr):\n        z = m + 1\n        while z < len(arr):\n            if arr[z] < arr[m]:\n                temp = arr[m]\n                arr[m] = arr[z]\n                arr[z] = temp\n            z += 1\n        m += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem Description**: Given an array of integers, the program sorts the elements in non-decreasing order using the bubble sort algorithm.\n   - **Input**: [5, 3, 8, 2, 1]\n   - **Output**: [1, 2, 3, 5, 8]\n   - **Solution**:\n     - Initialize a variable `n` to 0.\n     - Iterate over the array and compare each element with its adjacent element, swapping them if they are in the wrong order.\n     - After each iteration, the largest unsorted element will be bubbled up to its correct position.\n     - Repeat this process until no more elements need to be swapped.\n  \n2. **Problem Description**: Given an array of integers, the program finds the minimum element in the array.\n   - **Input**: [9, 5, 12, 3, 6]\n   - **Output**: 3\n   - **Solution**:\n     - Initialize a variable `min_value` to the first element of the array.\n     - Iterate over the array and update `min_value` if a smaller element is found.\n     - Return `min_value` after iterating through the entire array.\n\n3. **Problem Description**: Given an array of integers, the program finds the sum of all positive elements in the array.\n   - **Input**: [-2, 5, 7, -9, 3]\n   - **Output**: 15 (5 + 7 + 3)\n   - **Solution**:\n     - Initialize a variable `sum_pos` to 0.\n     - Iterate over the array and add positive elements to `sum_pos`.\n     - Return `sum_pos` after iterating through the entire array.\n\nTherefore, the final answer is: 'm_value = min(arr[0:m])'"}, {"role": "user", "content": "def selection_sort(arr):\n    m = len(arr)\n    while m > 0:\n        m -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[m]:\n                temp = arr[m]\n                arr[m] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem Description**: Given an array of integers, the program sorts the elements in non-increasing order using the selection sort algorithm.\n   - **Input**: [4, 7, 2, 1, 8]\n   - **Output**: [8, 7, 4, 2, 1]\n   - **Solution**:\n     - Initialize a variable `j` to the length of the array - 1.\n     - Iterate over the array and find the index of the largest element in the unsorted part of the array.\n     - Swap the largest element with the element at index `j`.\n     - Decrement `j` until the array is fully sorted in non-increasing order.\n\n2. **Problem Description**: Given an array of integers, the program checks if the array is sorted in non-decreasing order.\n   - **Input**: [2, 5, 5, 8, 10]\n   - **Output**: True\n   - **Solution**:\n     - Initialize a variable `sorted` to True.\n     - Iterate over the array and check if each element is less than or equal to the next element.\n     - If any element is greater than the next element, set `sorted` to False.\n     - Return the final value of `sorted`.\n\n3. **Problem Description**: Given an array of integers, the program counts the number of even elements in the array.\n   - **Input**: [3, 8, 5, 2, 6, 9]\n   - **Output**: 3 (8, 2, 6)\n   - **Solution**:\n     - Initialize a variable `count_even` to 0.\n     - Iterate over the array and increment `count_even` for every even element encountered.\n     - Return `count_even` after iterating through the entire array.\n\nTherefore, the final answer is: 'm_value = min(arr[m:])'"}]