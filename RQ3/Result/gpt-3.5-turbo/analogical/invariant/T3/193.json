[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n < len(arr):\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "Problem 1:\nDescription: In this problem, we need to find the smallest element in the array starting from index n and swap it with the element at index n.\nSolution: The solution is to find the minimum element in the subarray starting from index n, and if it is smaller than the element at index n, swap them.\n\nProblem 2:\nDescription: In this problem, we need to sort the array in ascending order using the selection sort algorithm.\nSolution: The solution is to repeatedly select the smallest element from the unsorted part of the array and swap it with the element at the beginning of the unsorted part.\n\nProblem 3:\nDescription: In this problem, we need to find the smallest and second smallest elements in the array.\nSolution: The solution is to find the minimum element in the array and swap it with the first element, then find the minimum element in the subarray starting from index 1 and swap it with the second element.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration is 'n_value = min(arr[n:->arr[n:])'."}, {"role": "user", "content": "def selection_sort(arr):\n    n = len(arr)\n    while n > 0:\n        n -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "Problem 1:\nDescription: In this problem, we need to sort the array in descending order using the selection sort algorithm.\nSolution: The solution is to repeatedly select the largest element from the unsorted part of the array and swap it with the element at the beginning of the unsorted part.\n\nProblem 2:\nDescription: In this problem, we need to find the largest element in the array starting from index n and swap it with the element at index n.\nSolution: The solution is to find the maximum element in the subarray starting from index n, and if it is larger than the element at index n, swap them.\n\nProblem 3:\nDescription: In this problem, we need to find the largest and second largest elements in the array.\nSolution: The solution is to find the maximum element in the array and swap it with the last element, then find the maximum element in the subarray excluding the last element and swap it with the second last element.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration is 'n_value = max(arr[:n+1]->arr[:n+1])'."}]