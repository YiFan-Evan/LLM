[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[0]\n    t = 0\n    while t < len(arr):\n        if arr[t] > max_value:\n            max_value = arr[t]\n        t += 1\n    return max_value\n"}, {"role": "assistant", "content": "Problem 1:\n**Description:** Given an array of integers, find the sum of all elements in the array.\n**Code:**\n```python\ndef find_sum(arr):\n    sum_value = 0\n    t = 0\n    while t < len(arr):\n        sum_value += arr[t]\n        t += 1\n    return sum_value\n```\n**Solution:**\n1. sum_value = sum(arr[0:t])\n2. sum_value = fun(arr[0:t-1]) + arr[t-1]\n3. sum_value = fun(arr[0:t]) - arr[t]\n\nProblem 2:\n**Description:** Given an array of integers, find the average value of all elements in the array.\n**Code:**\n```python\ndef find_average(arr):\n    sum_value = 0\n    t = 0\n    while t < len(arr):\n        sum_value += arr[t]\n        t += 1\n    return sum_value / len(arr)\n```\n**Solution:**\n1. sum_value = sum(arr[0:t])\n2. sum_value = fun(arr[0:t-1]) + arr[t-1]\n3. sum_value = fun(arr[0:t]) - arr[t]\n\nProblem 3:\n**Description:** Given an array of integers, find the number of even elements in the array.\n**Code:**\n```python\ndef count_even(arr):\n    count = 0\n    t = 0\n    while t < len(arr):\n        if arr[t] % 2 == 0:\n            count += 1\n        t += 1\n    return count\n```\n**Solution:**\n1. count = number of even elements in arr[0:t]\n2. count = fun(arr[0:t-1]) + 1 if arr[t-1] is even, otherwise fun(arr[0:t-1])\n3. count = fun(arr[0:t]) - 1 if arr[t] is even, otherwise fun(arr[0:t])\n\n**Therefore, the final answer is:**\nmax_value = max(arr[0:t])"}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[-1]\n    t = len(arr)\n    while t > 0:\n        t -= 1\n        if arr[t] > max_value:\n            max_value = arr[t]\n    return max_value"}, {"role": "assistant", "content": "Problem 1:\n**Description:** Given an array of integers, find the minimum value in the array.\n**Code:**\n```python\ndef find_min(arr):\n    min_value = arr[0]\n    t = 0\n    while t < len(arr):\n        if arr[t] < min_value:\n            min_value = arr[t]\n        t += 1\n    return min_value\n```\n**Solution:**\n1. min_value = min(arr[0:t])\n2. min_value = fun(arr[0:t-1]) if arr[t-1] < min_value, else arr[t-1]\n3. min_value = fun(arr[0:t]) if arr[t] >= min(arr[0:t]), else min(arr[0:t])\n\nProblem 2:\n**Description:** Given a list of integers, find the number of elements greater than a given value.\n**Code:**\n```python\ndef count_greater_than(arr, value):\n    count = 0\n    t = 0\n    while t < len(arr):\n        if arr[t] > value:\n            count += 1\n        t += 1\n    return count\n```\n**Solution:**\n1. count = number of elements in arr[0:t] greater than 'value'\n2. count = fun(arr[0:t-1]) + 1 if arr[t-1] > value, else fun(arr[0:t-1])\n3. count = fun(arr[0:t]) - 1 if arr[t] > value, else fun(arr[0:t])\n\nProblem 3:\n**Description:** Given an array of integers, find the second largest element in the array.\n**Code:**\n```python\ndef find_second_largest(arr):\n    max_value = arr[0]\n    second_largest = arr[0]\n    t = 1\n    while t < len(arr):\n        if arr[t] > max_value:\n            second_largest = max_value\n            max_value = arr[t]\n        elif arr[t] > second_largest:\n            second_largest = arr[t]\n        t += 1\n    return second_largest\n```\n**Solution:**\n1. second_largest = second largest element in arr[0:t]\n2. second_largest = max(fun(arr[0:t-1]), arr[t-1]) if arr[t] <= max(fun(arr[0:t-1]), arr[t-1]), else min(fun(arr[0:t-1]), arr[t-1])\n3. second_largest = fun(arr[0:t]) if arr[t] <= max(fun(arr[0:t]), arr[t]), else max(fun(arr[0:t]), arr[t])\n\n**Therefore, the final answer is:**\nmax_value = max(arr[t:len(arr)])"}]