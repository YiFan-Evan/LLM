[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    q = 0\n    while q < len(arr):\n        z = q + 1\n        while z < len(arr):\n            if arr[z] < arr[q]:\n                temp = arr[q]\n                arr[q] = arr[z]\n                arr[z] = temp\n            z += 1\n        q += 1\n    return arr"}, {"role": "assistant", "content": "1. Problem: Provide a loop invariant for the i-th iteration of a loop that sums up the elements in an array.\n\nDescription: Given a loop that iterates through an array and calculates the sum of its elements, provide a loop invariant that states the sum of elements up to index i during the i-th iteration of the loop.\n\nSolution:\nLoop Invariant: 'sum_value = sum(arr[0:i])'\n\n2. Problem: Provide a loop invariant for the i-th iteration of a loop that finds the maximum element in an array.\n\nDescription: Given a loop that iterates through an array and finds the maximum element, provide a loop invariant that states the maximum element found in the array up to index i during the i-th iteration of the loop.\n\nSolution:\nLoop Invariant: 'max_value = max(arr[0:i])'\n\n3. Problem: Provide a loop invariant for the i-th iteration of a loop that checks if all elements in an array are positive.\n\nDescription: Given a loop that iterates through an array and checks if all elements are positive, provide a loop invariant that states whether all elements up to index i are positive during the i-th iteration of the loop.\n\nSolution:\nLoop Invariant: 'all_positive = all(x > 0 for x in arr[0:i])'\n\nTherefore, the final answer is: Loop Invariant: 'arr[0:z] is sorted in non-decreasing order'."}, {"role": "user", "content": "def selection_sort(arr):\n    q = len(arr)\n    while q > 0:\n        q -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[q]:\n                temp = arr[q]\n                arr[q] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "1. Problem: Provide a loop invariant for the i-th iteration of a loop that calculates the product of elements in an array.\n\nDescription: Given a loop that iterates through an array and calculates the product of its elements, provide a loop invariant that states the product of elements up to index i during the i-th iteration of the loop.\n\nSolution:\nLoop Invariant: 'product_value = math.prod(arr[0:i])'\n\n2. Problem: Provide a loop invariant for the i-th iteration of a loop that finds the minimum element in an array.\n\nDescription: Given a loop that iterates through an array and finds the minimum element, provide a loop invariant that states the minimum element found in the array up to index i during the i-th iteration of the loop.\n\nSolution:\nLoop Invariant: 'min_value = min(arr[0:i])'\n\n3. Problem: Provide a loop invariant for the i-th iteration of a loop that checks if all elements in an array are negative.\n\nDescription: Given a loop that iterates through an array and checks if all elements are negative, provide a loop invariant that states whether all elements up to index i are negative during the i-th iteration of the loop.\n\nSolution:\nLoop Invariant: 'all_negative = all(x < 0 for x in arr[0:i])'\n\nTherefore, the final answer is: Loop Invariant: 'arr[q:len(arr)] is sorted in non-increasing order'."}]