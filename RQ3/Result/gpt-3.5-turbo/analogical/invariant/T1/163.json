[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    d = 0\n    while d < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        d += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem**:\n    **Function Name**: `binary_search`\n    **Purpose**: The function performs a binary search in a sorted array to find the index of a target value.\n    **Code**:\n    ```python\n    def binary_search(arr, target):\n        low = 0\n        high = len(arr) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n    ```\n    **Solution**: The loop invariant for the i-th iteration can be - `'low_value = 0, high_value = len(arr) - 1, mid_value = (low + high) // 2'`.\n\n2. **Problem**:\n    **Function Name**: `selection_sort`\n    **Purpose**: The function implements selection sort to sort an array in ascending order.\n    **Code**:\n    ```python\n    def selection_sort(arr):\n        for i in range(len(arr)):\n            min_idx = i\n            for j in range(i + 1, len(arr)):\n                if arr[j] < arr[min_idx]:\n                    min_idx = j\n            arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        return arr\n    ```\n    **Solution**: The loop invariant for the i-th iteration can be - `'min_idx_value = i'`.\n\n3. **Problem**:\n    **Function Name**: `factorial`\n    **Purpose**: The function calculates the factorial of a given positive integer.\n    **Code**:\n    ```python\n    def factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n    ```\n    **Solution**: The loop invariant for the i-th iteration can be - `'result_value = i!'`.\n\nTherefore, the final answer is: `'d_value = d'`."}, {"role": "user", "content": "def insertion_sort(arr):\n    d = 0\n    while d <= len(arr) - 1:\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        d += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem**:\n    **Function Name**: `linear_search`\n    **Purpose**: The function performs a linear search in an array to find the index of a target value.\n    **Code**:\n    ```python\n    def linear_search(arr, target):\n        for i in range(len(arr)):\n            if arr[i] == target:\n                return i\n        return -1\n    ```\n    **Solution**: The loop invariant for the i-th iteration can be - `'i_value = i'`.\n\n2. **Problem**:\n    **Function Name**: `bubble_sort`\n    **Purpose**: The function implements bubble sort to sort an array in ascending order.\n    **Code**:\n    ```python\n    def bubble_sort(arr):\n        n = len(arr)\n        for i in range(n):\n            for j in range(0, n - i - 1):\n                if arr[j] > arr[j + 1]:\n                    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n        return arr\n    ```\n    **Solution**: The loop invariant for the i-th iteration can be - `'j_value = j'`.\n\n3. **Problem**:\n    **Function Name**: `power`\n    **Purpose**: The function calculates the power of a number given the base and exponent.\n    **Code**:\n    ```python\n    def power(base, exponent):\n        result = 1\n        for i in range(exponent):\n            result *= base\n        return result\n    ```\n    **Solution**: The loop invariant for the i-th iteration can be - `'result_value = base^i'`.\n\nTherefore, the final answer is: `'d_value = d'`."}]