[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    b = 0\n    while b < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        b += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem**: Let's assume we have a program that finds the maximum element in an array.\n\n```python\ndef find_max(arr):\n    max_val = float('-inf')\n    i = 0\n    while i < len(arr):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        i += 1\n    return max_val\n```\n\n2. **Problem**: Let's assume we have a program that checks if an array is sorted in non-decreasing order.\n\n```python\ndef is_sorted(arr):\n    i = 1\n    while i < len(arr):\n        if arr[i - 1] > arr[i]:\n            return False\n        i += 1\n    return True\n```\n\n3. **Problem**: Let's assume we have a program that calculates the sum of all elements in an array.\n\n```python\ndef array_sum(arr):\n    total = 0\n    i = 0\n    while i < len(arr):\n        total += arr[i]\n        i += 1\n    return total\n```\n\n**Invariant for the insertion_sort program**:\n- Loop Invariant: \"z_value = fun(arr[0...z])\""}, {"role": "user", "content": "def insertion_sort(arr):\n    b = 0\n    while b <= len(arr) - 1:\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        b += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem**: Let's assume we have a program that finds the minimum element in an array.\n\n```python\ndef find_min(arr):\n    min_val = float('inf')\n    i = 0\n    while i < len(arr):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        i += 1\n    return min_val\n```\n\n2. **Problem**: Let's assume we have a program that checks if an array is sorted in non-increasing order.\n\n```python\ndef is_sorted_reverse(arr):\n    i = 1\n    while i < len(arr):\n        if arr[i - 1] < arr[i]:\n            return False\n        i += 1\n    return True\n```\n\n3. **Problem**: Let's assume we have a program that calculates the product of all elements in an array.\n\n```python\ndef array_product(arr):\n    product = 1\n    i = 0\n    while i < len(arr):\n        product *= arr[i]\n        i += 1\n    return product\n```\n\n**Invariant for the insertion_sort program**:\n- Loop Invariant: \"z_value = fun(arr[0...z])\"\n\nTherefore, the final answer is: Loop Invariant: \"z_value = fun(arr[0...z])\""}]