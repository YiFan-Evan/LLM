[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    g = 0\n    while g < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem:** Verify the correctness of the bubble sort algorithm.\n   - **Description:** Given an array of numbers, the task is to sort them in non-decreasing order using the bubble sort algorithm.\n   - **Example:** \n     - Input: [4, 2, 1, 5]\n     - Output: [1, 2, 4, 5]\n\n2. **Problem:** Verify the correctness of the selection sort algorithm.\n   - **Description:** Given an array of numbers, the task is to sort them in non-decreasing order using the selection sort algorithm.\n   - **Example:** \n     - Input: [4, 2, 1, 5]\n     - Output: [1, 2, 4, 5]\n\n3. **Problem:** Verify the correctness of the merge sort algorithm.\n   - **Description:** Given an unsorted array of numbers, the task is to sort them in non-decreasing order using the merge sort algorithm.\n   - **Example:** \n     - Input: [4, 2, 1, 5]\n     - Output: [1, 2, 4, 5]\n\n**Answer to the original problem:**\nTherefore, the final answer is: `z = i -> arr[0:z] is sorted in each iteration of the outer loop`"}, {"role": "user", "content": "def insertion_sort(arr):\n    g = 0\n    while g <= len(arr) - 1:\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem:** Verify the correctness of the bubble sort algorithm.\n   - **Description:** Given an array of numbers, the task is to sort them in non-decreasing order using the bubble sort algorithm.\n   - **Example:** \n     - Input: [4, 2, 1, 5]\n     - Output: [1, 2, 4, 5]\n\n2. **Problem:** Verify the correctness of the selection sort algorithm.\n   - **Description:** Given an array of numbers, the task is to sort them in non-decreasing order using the selection sort algorithm.\n   - **Example:** \n     - Input: [4, 2, 1, 5]\n     - Output: [1, 2, 4, 5]\n\n3. **Problem:** Verify the correctness of the merge sort algorithm.\n   - **Description:** Given an unsorted array of numbers, the task is to sort them in non-decreasing order using the merge sort algorithm.\n   - **Example:** \n     - Input: [4, 2, 1, 5]\n     - Output: [1, 2, 4, 5]\n\n**Answer to the original problem:**\nTherefore, the final answer is: `z = i -> arr[0:z] is sorted in each iteration of the outer loop`"}]