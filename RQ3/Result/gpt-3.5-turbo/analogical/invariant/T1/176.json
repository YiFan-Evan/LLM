[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    q = 0\n    while q < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        q += 1\n    return arr"}, {"role": "assistant", "content": "**Similar Problem 1:**\n\n**Description:**\nConsider a function that sorts an array in descending order using the insertion sort algorithm. The function has a loop where it iterates through the array elements and moves the current element leftwards until it finds its correct position.\n\n**Solution:**\nTo prove the correctness of this sorting algorithm, we need to provide a loop invariant for the i-th iteration of the outer loop.\n\n**Loop Invariant:**\n```python\nz_value = fun(arr[z] -> arr[len(arr) - z])\n```\n\n**Similar Problem 2:**\n\n**Description:**\nYou are given a function that finds the maximum element in an array and moves it to the end of the array in each iteration. It repeats this process until the array is sorted in ascending order.\n\n**Solution:**\nTo prove the correctness of this sorting algorithm, we need to provide a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n```python\nz_value = fun(arr[z] -> arr[z:])\n```\n\n**Similar Problem 3:**\n\n**Description:**\nConsider a function that removes duplicates from an array by shifting the unique elements towards the beginning of the array.\n\n**Solution:**\nTo prove the correctness of this function, we need a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n```python\nz_value = fun(arr[0] -> arr[i])\n```\n\n**Therefore, the final answer is:**\n\n```python\nz_value = fun(arr[z] -> arr[z])\n```"}, {"role": "user", "content": "def insertion_sort(arr):\n    q = 0\n    while q <= len(arr) - 1:\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        q += 1\n    return arr"}, {"role": "assistant", "content": "**Similar Problem 1:**\n\n**Description:**\nYou are given a function that sorts an array in reverse order using the insertion sort algorithm. The function iterates through the array elements and moves the current element to its correct position.\n\n**Solution:**\nTo prove the correctness of this sorting algorithm, we need to provide a loop invariant for the i-th iteration of the outer loop.\n\n**Loop Invariant:**\n```python\nz_value = fun(arr[z] -> arr[z])\n```\n\n**Similar Problem 2:**\n\n**Description:**\nConsider a function that sorts an array in ascending order by repeatedly moving the minimum element to the beginning of the array.\n\n**Solution:**\nTo prove the correctness of this sorting algorithm, we need to provide a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n```python\nz_value = fun(arr[0] -> arr[z])\n```\n\n**Similar Problem 3:**\n\n**Description:**\nYou have a function that rearranges the positive and negative elements of an array, placing negative elements on the left side and positive elements on the right side.\n\n**Solution:**\nTo prove the correctness of this rearranging algorithm, we need a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n```python\nz_value = fun(arr[z] -> arr[0:z+1])\n```\n\n**Therefore, the final answer is:**\n\n```python\nz_value = fun(arr[z] -> arr[z])\n```"}]