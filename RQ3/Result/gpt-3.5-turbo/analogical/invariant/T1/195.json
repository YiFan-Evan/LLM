[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    p = 0\n    while p < len(arr):\n        z = p + 1\n        while z < len(arr):\n            if arr[z] < arr[p]:\n                temp = arr[p]\n                arr[p] = arr[z]\n                arr[z] = temp\n            z += 1\n        p += 1\n    return arr"}, {"role": "assistant", "content": "Similar problem 1:\n**Problem:**\nGiven a list of integers, write a Python program to implement insertion sort to sort the list in non-decreasing order.\n**Solution:**\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n\nSimilar problem 2:\n**Problem:**\nCreate a Python program to implement bubble sort for sorting a list of integers in non-decreasing order.\n**Solution:**\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\n\nSimilar problem 3:\n**Problem:**\nWrite a Python program to implement merge sort for sorting a list of integers in non-decreasing order.\n**Solution:**\n```python\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        \n        merge_sort(L)\n        merge_sort(R)\n        \n        i = j = k = 0\n        \n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n            \n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n            \n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr\n``` \n\nTherefore, the final answer is: 'p_value = arr[p] >= arr[0] and arr[p] <= arr[p]'"}, {"role": "user", "content": "def selection_sort(arr):\n    p = 0\n    while p <= len(arr) - 1:\n        z = p + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[p]:\n                temp = arr[p]\n                arr[p] = arr[z]\n                arr[z] = temp\n            z += 1\n        p += 1\n    return arr"}, {"role": "assistant", "content": "Similar problem 1:\n**Problem:**\nGiven an array of strings, write a Python program to implement selection sort to sort the array in lexicographically non-decreasing order.\n**Solution:**\n```python\ndef selection_sort_strings(arr):\n    p = 0\n    while p <= len(arr) - 1:\n        z = p + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[p]:\n                temp = arr[p]\n                arr[p] = arr[z]\n                arr[z] = temp\n            z += 1\n        p += 1\n    return arr\n```\n\nSimilar problem 2:\n**Problem:**\nCreate a Python program to implement selection sort on a list of tuples based on the second element of each tuple in non-decreasing order.\n**Solution:**\n```python\ndef selection_sort_tuples(arr):\n    p = 0\n    while p <= len(arr) - 1:\n        z = p + 1\n        while z <= len(arr) - 1:\n            if arr[z][1] < arr[p][1]:\n                temp = arr[p]\n                arr[p] = arr[z]\n                arr[z] = temp\n            z += 1\n        p += 1\n    return arr\n```\n\nSimilar problem 3:\n**Problem:**\nWrite a Python program to implement selection sort on a list of dictionaries based on a specific key in non-decreasing order.\n**Solution:**\n```python\ndef selection_sort_dicts(arr, key):\n    p = 0\n    while p <= len(arr) - 1:\n        z = p + 1\n        while z <= len(arr) - 1:\n            if arr[z][key] < arr[p][key]:\n                temp = arr[p]\n                arr[p] = arr[z]\n                arr[z] = temp\n            z += 1\n        p += 1\n    return arr\n```\n\nTherefore, the final answer is: 'p_value = arr[p] >= arr[0] and arr[p] <= arr[p]'"}]