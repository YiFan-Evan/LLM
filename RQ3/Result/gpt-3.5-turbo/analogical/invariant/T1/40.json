[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def give_count(arr, target):\n    count_value = 0\n    a = 0\n    while a < len(arr):\n        if arr[a] == target:\n            count_value += 1\n        a += 1\n    return count_value"}, {"role": "assistant", "content": "Three related problems:\nProblem 1:\n**Problem Description:**\nSuppose we have a function that finds the sum of all elements in a given array.\n\n```python\ndef find_sum(arr):\n    sum_value = 0\n    i = 0\n    while i < len(arr):\n        sum_value += arr[i]\n        i += 1\n    return sum_value\n```\n\n**Solution:**\nTo prove the partial correctness of the program, we need to provide a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n`i = find_sum(arr[0:i])`\n\nProblem 2:\n**Problem Description:**\nConsider a function that computes the maximum element in an array.\n\n```python\ndef find_max(arr):\n    max_value = arr[0]\n    i = 1\n    while i < len(arr):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        i += 1\n    return max_value\n```\n\n**Solution:**\nTo prove the partial correctness of the program, we need to provide a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n`i = find_max(arr[0:i])`\n\nProblem 3:\n**Problem Description:**\nSuppose we have a function that checks if a given element is present in the array.\n\n```python\ndef is_present(arr, key):\n    present = False\n    i = 0\n    while i < len(arr):\n        if arr[i] == key:\n            present = True\n            break\n        i += 1\n    return present\n```\n\n**Solution:**\nTo prove the partial correctness of the program, we need to provide a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n`i = is_present(arr[0:i], key)`\n\nTherefore, the final answer is: \nLoop Invariant: `a = give_count(arr[0:a], target)`"}, {"role": "user", "content": "def give_count(arr, target):\n    count_value = 0\n    a = 0\n    while a <= len(arr) - 1:\n        if arr[a] == target:\n            count_value += 1\n        a += 1\n    return count_value"}, {"role": "assistant", "content": "Three related problems:\nProblem 1:\n**Problem Description:**\nSuppose we have a function that calculates the product of all elements in an array.\n\n```python\ndef find_product(arr):\n    product_value = 1\n    i = 0\n    while i < len(arr):\n        product_value *= arr[i]\n        i += 1\n    return product_value\n```\n\n**Solution:**\nTo prove the partial correctness of the program, we need to provide a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n`i = find_product(arr[0:i])`\n\nProblem 2:\n**Problem Description:**\nConsider a function that finds the sum of squares of elements in an array.\n\n```python\ndef sum_of_squares(arr):\n    sum_value = 0\n    i = 0\n    while i < len(arr):\n        sum_value += arr[i] ** 2\n        i += 1\n    return sum_value\n```\n\n**Solution:**\nTo prove the partial correctness of the program, we need to provide a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n`i = sum_of_squares(arr[0:i])`\n\nProblem 3:\n**Problem Description:**\nSuppose we have a function that counts the number of negative elements in an array.\n\n```python\ndef count_negatives(arr):\n    count_value = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] < 0:\n            count_value += 1\n        i += 1\n    return count_value\n```\n\n**Solution:**\nTo prove the partial correctness of the program, we need to provide a loop invariant for the i-th iteration of the loop.\n\n**Loop Invariant:**\n`i = count_negatives(arr[0:i])`\n\nTherefore, the final answer is: \nLoop Invariant: `a = give_count(arr[0:a], target)`"}]