[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r < len(arr):\n        z = r + 1\n        while z < len(arr):\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "Related Problem 1:\n**Problem**: Prove the partial correctness of the insertion sort algorithm.\n**Solution**: The insertion sort algorithm works by repeatedly inserting the current element into its correct position within the sorted section of the array. We can prove its partial correctness by providing a loop invariant for the i-th iteration of the outer loop.\n\nRelated Problem 2:\n**Problem**: Prove the partial correctness of the bubble sort algorithm.\n**Solution**: The bubble sort algorithm compares adjacent elements and swaps them if they are in the wrong order. We can prove its partial correctness by providing a loop invariant for the i-th iteration of the outer loop.\n\nRelated Problem 3:\n**Problem**: Prove the partial correctness of the merge sort algorithm.\n**Solution**: The merge sort algorithm divides the array into two halves, sorts them separately, and then merges them. We can prove its partial correctness by providing a loop invariant for the merging step.\n\nTherefore, the final answer is: 'r_value = fun(arr[0:r]) and z_value = fun(arr[r+1:z])'."}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r <= len(arr) - 1:\n        z = r + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "Related Problem 1:\n**Problem**: Prove the partial correctness of the quick sort algorithm.\n**Solution**: The quick sort algorithm picks an element as pivot and partitions the array around the pivot. We can prove its partial correctness by providing a loop invariant for the partitioning step.\n\nRelated Problem 2:\n**Problem**: Prove the partial correctness of the heap sort algorithm.\n**Solution**: The heap sort algorithm builds a max heap and then repeatedly extracts the maximum element. We can prove its partial correctness by providing a loop invariant for the max heap construction.\n\nRelated Problem 3:\n**Problem**: Prove the partial correctness of the shell sort algorithm.\n**Solution**: The shell sort algorithm sorts elements at a specific interval using insertion sort. We can prove its partial correctness by providing a loop invariant for the insertion sort step with varying intervals.\n\nTherefore, the final answer is: 'r_value = fun(arr[0:r]) and z_value = fun(arr[r+1:z])'."}]