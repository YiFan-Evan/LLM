[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[0]\n    k = 0\n    while k < len(arr):\n        if arr[k] > max_value:\n            max_value = arr[k]\n        k += 1\n    return max_value\n"}, {"role": "assistant", "content": "Similar problem 1: Consider a program that finds the sum of all elements in an array. \n\n```python\ndef find_sum(arr):\n    sum_value = 0\n    i = 0\n    while i < len(arr):\n        sum_value += arr[i]\n        i += 1\n    return sum_value\n```\n\nSolution to similar problem 1:\n1. Loop invariant: `sum_value = sum(arr[0:i])`.\n\nSimilar problem 2: Consider a program that finds the smallest element in an array. \n\n```python\ndef find_min(arr):\n    min_value = arr[0]\n    j = 0\n    while j < len(arr):\n        if arr[j] < min_value:\n            min_value = arr[j]\n        j += 1\n    return min_value\n```\n\nSolution to similar problem 2:\n1. Loop invariant: `min_value = min(arr[0:j])`.\n\nSimilar problem 3: Consider a program that calculates the average of elements in an array. \n\n```python\ndef find_average(arr):\n    sum_value = 0\n    n = len(arr)\n    m = 0\n    while m < n:\n        sum_value += arr[m]\n        m += 1\n    average = sum_value / n\n    return average\n```\n\nSolution to similar problem 3:\n1. Loop invariant: `sum_value = sum(arr[0:m])`.\n\nTherefore, the final answer is: \nLoop invariant: `max_value = max(arr[0:k])`."}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[0]\n    k = 0\n    while k <= len(arr) - 1:\n        if arr[k] > max_value:\n            max_value = arr[k]\n        k += 1\n    return max_value\n"}, {"role": "assistant", "content": "Similar problem 1: Consider a program that finds the product of all elements in an array.\n\n```python\ndef find_product(arr):\n    product_value = 1\n    i = 0\n    while i < len(arr):\n        product_value *= arr[i]\n        i += 1\n    return product_value\n```\n\nSolution to similar problem 1:\n1. Loop invariant: `product_value = arr[0:i]`.\n\nSimilar problem 2: Consider a program that finds the index of a specific element in an array.\n\n```python\ndef find_index(target, arr):\n    index = -1\n    j = 0\n    while j < len(arr):\n        if arr[j] == target:\n            index = j\n            break\n        j += 1\n    return index\n```\n\nSolution to similar problem 2:\n1. Loop invariant: `index = index of target element in arr[0:j]` or `-1 if target not found`.\n\nSimilar problem 3: Consider a program that checks if all elements in an array are positive.\n\n```python\ndef all_positive(arr):\n    all_positive = True\n    n = len(arr)\n    m = 0\n    while m < n:\n        if arr[m] <= 0:\n            all_positive = False\n            break\n        m += 1\n    return all_positive\n```\n\nSolution to similar problem 3:\n1. Loop invariant: `all_positive = all elements in arr[0:m] are positive`.\n\nTherefore, the final answer is: \nLoop invariant: `max_value = max(arr[0:k])`."}]