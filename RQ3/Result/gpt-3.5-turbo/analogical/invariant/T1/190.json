[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    k = 0\n    while k < len(arr):\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n        k += 1\n    return arr"}, {"role": "assistant", "content": "Similar problem 1:\nProblem: Provide a loop invariant for the i-th iteration of the loop in the following insertion_sort function.\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\nSolution: The loop invariant for the i-th iteration of the loop can be 'key_value = arr[i]->arr[i]'.\n\nSimilar problem 2:\nProblem: Provide a loop invariant for the i-th iteration of the loop in the following bubble_sort function.\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSolution: The loop invariant for the i-th iteration of the loop can be 'j_value = arr[j]->arr[j]'.\n\nSimilar problem 3:\nProblem: Provide a loop invariant for the i-th iteration of the loop in the following merge_sort function.\n```python\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    L = arr[:mid]\n    R = arr[mid:]\n    merge_sort(L)\n    merge_sort(R)\n    merge(arr, L, R)\n    return arr\n\ndef merge(arr, L, R):\n    i = j = k = 0\n    while i < len(L) and j < len(R):\n        if L[i] < R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n\n    while i < len(L):\n        arr[k] = L[i]\n        i += 1\n        k += 1\n\n    while j < len(R):\n        arr[k] = R[j]\n        j += 1\n        k += 1\n```\nSolution: The loop invariant for the i-th iteration of the loop can be 'k_value = arr[k]->arr[k]'.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration of the loop in the selection_sort function is 'z_value = arr[z]->arr[z]'."}, {"role": "user", "content": "def selection_sort(arr):\n    k = 0\n    while k <= len(arr) - 1:\n        z = k + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n        k += 1\n    return arr"}, {"role": "assistant", "content": "Similar problem 1:\nProblem: Provide a loop invariant for the i-th iteration of the loop in the following insertion_sort function.\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\nSolution: The loop invariant for the i-th iteration of the loop can be 'key_value = arr[i]->arr[i]'.\n\nSimilar problem 2:\nProblem: Provide a loop invariant for the i-th iteration of the loop in the following merge_sort function.\n```python\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    L = arr[:mid]\n    R = arr[mid:]\n    merge_sort(L)\n    merge_sort(R)\n    merge(arr, L, R)\n    return arr\n\ndef merge(arr, L, R):\n    i = j = k = 0\n    while i < len(L) and j < len(R):\n        if L[i] < R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n\n    while i < len(L):\n        arr[k] = L[i]\n        i += 1\n        k += 1\n\n    while j < len(R):\n        arr[k] = R[j]\n        j += 1\n        k += 1\n```\nSolution: The loop invariant for the i-th iteration of the loop can be 'k_value = arr[k]->arr[k]'.\n\nSimilar problem 3:\nProblem: Provide a loop invariant for the i-th iteration of the loop in the following bubble_sort function.\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\nSolution: The loop invariant for the i-th iteration of the loop can be 'j_value = arr[j]->arr[j]'.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration of the loop in the selection_sort function is 'z_value = arr[z]->arr[z]'."}]