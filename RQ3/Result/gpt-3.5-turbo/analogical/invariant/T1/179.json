[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    t = 0\n    while t < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem:** Define a loop invariant for a program that finds the maximum element in an array.\n    - **Code:**\n    ```python\n    def find_max(arr):\n        max_val = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n        return max_val\n    ```\n    - **Loop Invariant:** `max_value = max(arr[0:i])`\n\n2. **Problem:** Provide a loop invariant for a program that calculates the sum of elements in an array.\n    - **Code:**\n    ```python\n    def array_sum(arr):\n        total = 0\n        for i in range(len(arr)):\n            total += arr[i]\n        return total\n    ```\n    - **Loop Invariant:** `total_value = sum(arr[0:i])`\n\n3. **Problem:** Formulate a loop invariant for a program that counts the number of even elements in an array.\n    - **Code:**\n    ```python\n    def count_even(arr):\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                count += 1\n        return count\n    ```\n    - **Loop Invariant:** `count_value = count(arr[0:i] where x is even)`\n\nTherefore, the final answer is: \n`z_value = arr[z] > arr[z-1]`"}, {"role": "user", "content": "def insertion_sort(arr):\n    t = 0\n    while t <= len(arr) - 1:\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem:** Describe a loop invariant for a program that reverses an array in-place.\n    - **Code:**\n    ```python\n    def reverse_array(arr):\n        left = 0\n        right = len(arr) - 1\n        while left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        return arr\n    ```\n    - **Loop Invariant:** `reverse_value = reverse(arr[0:left], arr[right+1:])`\n\n2. **Problem:** Provide a loop invariant for a program that shifts all elements of an array to the right by one position.\n    - **Code:**\n    ```python\n    def shift_right(arr):\n        if len(arr) <= 1:\n            return arr\n        temp = arr[-1]\n        for i in range(len(arr) - 1, 0, -1):\n            arr[i] = arr[i - 1]\n        arr[0] = temp\n        return arr\n    ```\n    - **Loop Invariant:** `shift_value = shift(arr[0:i])`\n\n3. **Problem:** Suggest a loop invariant for a program that finds the median of a sorted array.\n    - **Code:**\n    ```python\n    def find_median(arr):\n        n = len(arr)\n        if n % 2 == 1:\n            return arr[n // 2]\n        else:\n            return (arr[n // 2 - 1] + arr[n // 2]) / 2\n    ```\n    - **Loop Invariant:** `median_value = median(arr[0:i])`\n\nTherefore, the final answer is: \n`z_value = arr[z] > arr[z-1]`"}]