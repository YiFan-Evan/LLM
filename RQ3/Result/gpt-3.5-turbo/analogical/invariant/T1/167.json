[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    h = 0\n    while h < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem:** Given an array of integers, write a Python program to return the array sorted in non-decreasing order using the insertion sort algorithm.\n   \n   **Solution:** Implement the insertion sort algorithm by iterating over the elements of the array and inserting each element into its correct position in the sorted array.\n\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n\n2. **Problem:** Given an array of strings, write a Python program to return the array sorted in non-decreasing order based on their lengths using the insertion sort algorithm.\n\n   **Solution:** Implement the insertion sort algorithm by comparing the lengths of strings and inserting them into their correct position in the sorted array based on length.\n\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and len(key) < len(arr[j]):\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n\n3. **Problem:** Given a list of tuples, with each tuple containing two elements, write a Python program to return the list sorted in non-decreasing order based on the second element of each tuple using the insertion sort algorithm.\n\n   **Solution:** Implement the insertion sort algorithm by comparing the second elements of tuples and inserting them into their correct position in the sorted list based on the second element.\n\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key[1] < arr[j][1]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n\nTherefore, the final answer is: 'z_value = fun(arr[z]->arr[z-1])'."}, {"role": "user", "content": "def insertion_sort(arr):\n    h = 0\n    while h <= len(arr) - 1:\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem:** Given an array of integers, write a Python program to return the array sorted in non-increasing order using the insertion sort algorithm.\n\n   **Solution:** Implement the insertion sort algorithm by iterating over the elements of the array and inserting each element into its correct position in the sorted array in non-increasing order.\n\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key > arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n\n2. **Problem:** Given an array of strings, write a Python program to return the array sorted in non-increasing order based on their lengths using the insertion sort algorithm.\n\n   **Solution:** Implement the insertion sort algorithm by comparing the lengths of strings and inserting them into their correct position in the sorted array in non-increasing order based on length.\n\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and len(key) > len(arr[j]):\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n\n3. **Problem:** Given a list of tuples, with each tuple containing two elements, write a Python program to return the list sorted in non-increasing order based on the second element of each tuple using the insertion sort algorithm.\n\n   **Solution:** Implement the insertion sort algorithm by comparing the second elements of tuples and inserting them into their correct position in the sorted list in non-increasing order based on the second element.\n\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key[1] > arr[j][1]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n\nTherefore, the final answer is: 'z_value = fun(arr[z]->arr[z-1])'."}]