[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    m = 0\n    while m < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        m += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem 1:**\nGiven an array of integers, sort the array in non-decreasing order using the insertion sort algorithm.\n\n*Example:*\n- Input: [4, 2, 1, 3]\n- Output: [1, 2, 3, 4]\n\n**Solution:**\n```\ndef insertion_sort(arr):\n    m = 0\n    while m < len(arr):\n        z = m\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        m += 1\n    return arr\n```\n\n2. **Problem 2:**\nGiven an array of characters, sort the array in non-decreasing order using the insertion sort algorithm.\n\n*Example:*\n- Input: ['d', 'b', 'a', 'c']\n- Output: ['a', 'b', 'c', 'd']\n\n3. **Problem 3:**\nGiven an array of strings, sort the array in non-decreasing lexicographic order using the insertion sort algorithm.\n\n*Example:*\n- Input: [\"banana\", \"apple\", \"cherry\"]\n- Output: [\"apple\", \"banana\", \"cherry\"]\n\n**Therefore, the final answer is:**\n'z_value = insertion_sort(arr[:m])'"}, {"role": "user", "content": "def insertion_sort(arr):\n    m = 0\n    while m <= len(arr) - 1:\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        m += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem 1:**\nGiven an array of integers, sort the array in non-decreasing order using the insertion sort algorithm.\n\n*Example:*\n- Input: [4, 2, 1, 3]\n- Output: [1, 2, 3, 4]\n\n**Solution:**\n```\ndef insertion_sort(arr):\n    m = 0\n    while m <= len(arr) - 1:\n        z = m\n        \n        # Loop invariant: z_value = insertion_sort(arr[:z])\n        \n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        m += 1\n    return arr\n```\n\n2. **Problem 2:**\nGiven an array of characters, sort the array in non-decreasing order using the insertion sort algorithm.\n\n*Example:*\n- Input: ['d', 'b', 'a', 'c']\n- Output: ['a', 'b', 'c', 'd']\n\n3. **Problem 3:**\nGiven an array of strings, sort the array in non-decreasing lexicographic order using the insertion sort algorithm.\n\n*Example:*\n- Input: [\"banana\", \"apple\", \"cherry\"]\n- Output: [\"apple\", \"banana\", \"cherry\"]\n\n**Therefore, the final answer is:**\n'z_value = insertion_sort(arr[:z])'"}]