[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    o = 0\n    while o < len(arr):\n        z = o + 1\n        while z < len(arr):\n            if arr[z] < arr[o]:\n                temp = arr[o]\n                arr[o] = arr[z]\n                arr[z] = temp\n            z += 1\n        o += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem**: You are given an array of integers and you need to determine the maximum element in the array and its index.\n    - **Input**: [4, 7, 2, 1, 5]\n    - **Output**: max_value = max(arr[0], arr[1], ..., arr[i-1]), max(arr) = max(arr[0], arr[1], ..., arr[i-1])\n    - **Solution**: Initialize two variables `max_value` and `max_index` to be the first element of the input array. Iterate through the array, if an element is greater than `max_value`, update `max_value` and `max_index` accordingly.\n\n2. **Problem**: You are given a list of students and their corresponding scores. You need to determine the student with the highest score.\n    - **Input**: [(\"Alice\", 85), (\"Bob\", 92), (\"Cathy\", 88)]\n    - **Output**: highest_score = max(arr[0][1], arr[1][1], ..., arr[i-1][1]), highest_score_student = arr[j][0] where arr[j][1] = highest_score\n    - **Solution**: Initialize two variables `highest_score` and `highest_score_student` to be the score and name of the first student. Iterate through the list, update `highest_score` and `highest_score_student` if a student's score is higher.\n\n3. **Problem**: You are given a list of strings and you need to find the longest string in the list.\n    - **Input**: [\"apple\", \"banana\", \"kiwi\", \"orange\"]\n    - **Output**: longest_length = max(len(arr[0]), len(arr[1]), ..., len(arr[i-1])), longest_string = arr[j] where len(arr[j]) = longest_length\n    - **Solution**: Initialize two variables `longest_length` and `longest_string` to be the length and content of the first string. Iterate through the list, update `longest_length` and `longest_string` if a longer string is found.\n\nTherefore, the final answer is: `o_value = min(arr[0], arr[1], ..., arr[o-1])`."}, {"role": "user", "content": "def selection_sort(arr):\n    o = 0\n    while o <= len(arr) - 1:\n        z = o + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[o]:\n                temp = arr[o]\n                arr[o] = arr[z]\n                arr[z] = temp\n            z += 1\n        o += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem**: You are given a list of integers and you need to sort them in descending order.\n    - **Input**: [3, 7, 1, 5, 2]\n    - **Output**: sorted_desc_value = sorted(arr[0], arr[1], ..., arr[i-1], reverse=True), sorted_desc_arr = arr[0], arr[1], ..., arr[i-1]\n    - **Solution**: Use the same implementation of the selection_sort function provided. Just change the comparison condition in the inner loop to sort the elements in descending order.\n\n2. **Problem**: You are given a list of tuples and you need to sort them based on the second element of each tuple in ascending order.\n    - **Input**: [(3, 6), (1, 9), (5, 4), (2, 8)]\n    - **Output**: sorted_asc_value = sorted(arr[0][1], arr[1][1], ..., arr[i-1][1]), sorted_asc_arr = arr[0], arr[1], ..., arr[i-1]\n    - **Solution**: Modify the selection_sort function to compare the second elements of the tuples instead of array values to sort them based on the second element ascending order.\n\n3. **Problem**: You are given a list of strings and you want to sort them based on their lengths in ascending order.\n    - **Input**: [\"apple\", \"kiwi\", \"orange\", \"banana\"]\n    - **Output**: sorted_len_asc_value = sorted(len(arr[0]), len(arr[1]), ..., len(arr[i-1])), sorted_len_asc_arr = arr[0], arr[1], ..., arr[i-1]\n    - **Solution**: Adapt the selection_sort implementation to compare the lengths of strings to sort them in ascending order based on length.\n\nTherefore, the final answer is: `z_value = min(arr[o+1], arr[o+2], ..., arr[len(arr) - 1])`."}]