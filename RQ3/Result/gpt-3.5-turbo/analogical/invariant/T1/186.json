[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    g = 0\n    while g < len(arr):\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem**: Given an array of integers, sort the array in ascending order using selection sort. Instead of directly swapping elements, store the indices of the two elements that need to be swapped, and finally perform the swapping at the end of the inner loop.\n   \n    **Example**:\n    Input: [4, 2, 1, 5, 3]\n    Output: [1, 2, 3, 4, 5]\n    \n    **Solution**:\n    \n    ```python\n    def selection_sort_with_indices(arr):\n        g = 0\n        while g < len(arr):\n            min_index = g\n            z = g + 1\n            while z < len(arr):\n                if arr[z] < arr[min_index]:\n                    min_index = z\n                z += 1\n            if min_index != g:\n                temp = arr[g]\n                arr[g] = arr[min_index]\n                arr[min_index] = temp\n            g += 1\n        return arr\n    ```\n\n2. **Problem**: Given an array of integers, sort the array in descending order using selection sort.\n\n    **Example**:\n    Input: [4, 2, 1, 5, 3]\n    Output: [5, 4, 3, 2, 1]\n    \n    **Solution**:\n    \n    ```python\n    def selection_sort_descending(arr):\n        g = 0\n        while g < len(arr):\n            max_index = g\n            z = g + 1\n            while z < len(arr):\n                if arr[z] > arr[max_index]:\n                    max_index = z\n                z += 1\n            if max_index != g:\n                temp = arr[g]\n                arr[g] = arr[max_index]\n                arr[max_index] = temp\n            g += 1\n        return arr\n    ```\n\n3. **Problem**: Given an array of strings, sort the array in lexicographically increasing order using selection sort.\n\n    **Example**:\n    Input: [\"apple\", \"zebra\", \"banana\", \"cat\"]\n    Output: [\"apple\", \"banana\", \"cat\", \"zebra\"]\n    \n    **Solution**:\n    \n    ```python\n    def selection_sort_strings(arr):\n        g = 0\n        while g < len(arr):\n            min_index = g\n            z = g + 1\n            while z < len(arr):\n                if arr[z] < arr[min_index]:\n                    min_index = z\n                z += 1\n            if min_index != g:\n                temp = arr[g]\n                arr[g] = arr[min_index]\n                arr[min_index] = temp\n            g += 1\n        return arr\n    ```\n\nTherefore, the final answer is: `g_value = g >= 0 and g <= len(arr)`"}, {"role": "user", "content": "def selection_sort(arr):\n    g = 0\n    while g <= len(arr) - 1:\n        z = g + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem**: Given an array of integers, sort the array in ascending order using selection sort. Instead of directly swapping elements, store the indices of the two elements that need to be swapped, and finally perform the swapping at the end of the inner loop.\n   \n    **Example**:\n    Input: [4, 2, 1, 5, 3]\n    Output: [1, 2, 3, 4, 5]\n    \n    **Solution**:\n    \n    ```python\n    def selection_sort_with_indices(arr):\n        g = 0\n        while g <= len(arr) - 1:\n            min_index = g\n            z = g + 1\n            while z <= len(arr) - 1:\n                if arr[z] < arr[min_index]:\n                    min_index = z\n                z += 1\n            if min_index != g:\n                temp = arr[g]\n                arr[g] = arr[min_index]\n                arr[min_index] = temp\n            g += 1\n        return arr\n    ```\n\n2. **Problem**: Given an array of integers, sort the array in descending order using selection sort.\n\n    **Example**:\n    Input: [4, 2, 1, 5, 3]\n    Output: [5, 4, 3, 2, 1]\n    \n    **Solution**:\n    \n    ```python\n    def selection_sort_descending(arr):\n        g = 0\n        while g <= len(arr) - 1:\n            max_index = g\n            z = g + 1\n            while z <= len(arr) - 1:\n                if arr[z] > arr[max_index]:\n                    max_index = z\n                z += 1\n            if max_index != g:\n                temp = arr[g]\n                arr[g] = arr[max_index]\n                arr[max_index] = temp\n            g += 1\n        return arr\n    ```\n\n3. **Problem**: Given an array of strings, sort the array in lexicographically increasing order using selection sort.\n\n    **Example**:\n    Input: [\"apple\", \"zebra\", \"banana\", \"cat\"]\n    Output: [\"apple\", \"banana\", \"cat\", \"zebra\"]\n    \n    **Solution**:\n    \n    ```python\n    def selection_sort_strings(arr):\n        g = 0\n        while g <= len(arr) - 1:\n            min_index = g\n            z = g + 1\n            while z <= len(arr) - 1:\n                if arr[z] < arr[min_index]:\n                    min_index = z\n                z += 1\n            if min_index != g:\n                temp = arr[g]\n                arr[g] = arr[min_index]\n                arr[min_index] = temp\n            g += 1\n        return arr\n    ```\n\nTherefore, the final answer is: `g_value = g >= 0 and g <= len(arr)`"}]