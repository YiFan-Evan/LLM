[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    a = 0\n    while a < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        a += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. Problem: Prove the correctness of a linear search algorithm.\nDescription: Given an array of integers `arr` and a target integer `target`, implement a linear search algorithm to search for the target integer in the array.\nSolution: Use a loop to iterate through the array elements. At each iteration, check if the current element is equal to the target integer.\n\n2. Problem: Prove the correctness of a selection sort algorithm.\nDescription: Given an array of integers `arr`, implement a selection sort algorithm to sort the array in non-decreasing order.\nSolution: Use a loop to find the minimum element in the unsorted portion of the array and swap it with the first unsorted element.\n\n3. Problem: Prove the correctness of a binary search algorithm.\nDescription: Given a sorted array of integers `arr` and a target integer `target`, implement a binary search algorithm to search for the target integer in the array.\nSolution: Use a loop to iteratively narrow down the search range by comparing the target integer with the middle element of the current range.\n\nTherefore, the final answer is: \"z_value = i >= z >= 0 and arr[z] <= arr[z + 1]\"."}, {"role": "user", "content": "def insertion_sort(arr):\n    a = 0\n    while a <= len(arr) - 1:\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        a += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. Problem: Prove the correctness of a bubble sort algorithm.\nDescription: Given an array of integers `arr`, implement a bubble sort algorithm to sort the array in non-decreasing order.\nSolution: Use nested loops to iterate through the array and swap elements if they are in the wrong order until the array is sorted.\n\n2. Problem: Prove the correctness of a merge sort algorithm.\nDescription: Given an array of integers `arr`, implement a merge sort algorithm to sort the array in non-decreasing order.\nSolution: Split the array into halves recursively, sort each half, and then merge the sorted halves back together in order.\n\n3. Problem: Prove the correctness of a quicksort algorithm.\nDescription: Given an array of integers `arr`, implement a quicksort algorithm to sort the array in non-decreasing order.\nSolution: Choose a pivot element, partition the array into elements smaller and larger than the pivot, and recursively sort the subarrays.\n\nTherefore, the final answer is: \"z_value = i >= z >= 0 and arr[z] <= arr[z + 1]\"."}]