[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    r = 0\n    while r < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\nProblem 1:\n**Description:** You are given a Python program that implements a selection sort algorithm. The goal is to provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n**Solution:** The loop invariant statement can be `'r_value = fun(arr[0:r]->arr[0:r])'.\n\nProblem 2:\n**Description:** You are given a Python program that implements a bubble sort algorithm. The task is to provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n**Solution:** The loop invariant statement can be `'r_value = fun(arr[r:len(arr)]->arr[r:len(arr)])'.\n\nProblem 3:\n**Description:** You are given a Python program that implements a quicksort algorithm. The objective is to provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n**Solution:** The loop invariant statement can be `'r_value = fun(arr[0:len(arr)]->arr[0:len(arr)])'.\n\nTherefore, the final answer is: `'r_value = fun(arr[0:r]->arr[0:r])'."}, {"role": "user", "content": "def insertion_sort(arr):\n    r = 0\n    while r <= len(arr) - 1:\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\nProblem 1:\n**Description:** You are given a Python program that implements a selection sort algorithm. The goal is to provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n**Solution:** The loop invariant statement can be `'r_value = fun(arr[0:r+1]->arr[0:r+1])'.\n\nProblem 2:\n**Description:** You are given a Python program that implements a bubble sort algorithm. The task is to provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n**Solution:** The loop invariant statement can be `'r_value = fun(arr[r:len(arr)]->arr[r:len(arr)])'.\n\nProblem 3:\n**Description:** You are given a Python program that implements a quicksort algorithm. The objective is to provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n**Solution:** The loop invariant statement can be `'r_value = fun(arr[0:len(arr)]->arr[0:len(arr)])'.\n\nTherefore, the final answer is: `'r_value = fun(arr[0:r+1]->arr[0:r+1])'."}]