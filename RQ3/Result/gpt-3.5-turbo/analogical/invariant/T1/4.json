[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[0]\n    e = 0\n    while e < len(arr):\n        if arr[e] > max_value:\n            max_value = arr[e]\n        e += 1\n    return max_value\n"}, {"role": "assistant", "content": "**Related Problem 1:**\n\n**Problem Description:**  \nSuppose we have a target Python program that implements a function to find the minimum value in an array.  \n\n```python\ndef find_min(arr):\n    min_value = arr[0]\n    i = 0\n    while i < len(arr):\n        if arr[i] < min_value:\n            min_value = arr[i]\n        i += 1\n    return min_value\n```\n\n**Solution:**  \nTo prove the correctness of the `find_min` function, we need to provide a loop invariant for the i-th iteration of the loop.\n\n**Related Problem 2:**\n\n**Problem Description:**  \nConsider a Python program that calculates the sum of all elements in an array.\n\n```python\ndef calculate_sum(arr):\n    total = 0\n    j = 0\n    while j < len(arr):\n        total += arr[j]\n        j += 1\n    return total\n```\n\n**Solution:**  \nIn this case, we need to come up with a loop invariant to prove the partial correctness of the `calculate_sum` function.\n\n**Related Problem 3:**\n\n**Problem Description:**  \nSuppose we have a Python program that counts the number of even numbers in an array.\n\n```python\ndef count_evens(arr):\n    count = 0\n    k = 0\n    while k < len(arr):\n        if arr[k] % 2 == 0:\n            count += 1\n        k += 1\n    return count\n```\n\n**Solution:**  \nTo verify the accuracy of the `count_evens` function, we must establish a loop invariant for the k-th iteration of the loop.\n\n**Therefore, the final answer is:**  \n'j_value = fun(arr[j]->arr[j])'"}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[0]\n    e = 0\n    while e <= len(arr) - 1:\n        if arr[e] > max_value:\n            max_value = arr[e]\n        e += 1\n    return max_value\n"}, {"role": "assistant", "content": "**Related Problem 1:**\n\n**Problem Description:**  \nSuppose we have a target Python program that finds the second smallest element in an array.\n\n```python\ndef find_second_smallest(arr):\n    min_value = float('inf')\n    second_min_value = float('inf')\n    i = 0\n    while i < len(arr):\n        if arr[i] < min_value:\n            second_min_value = min_value\n            min_value = arr[i]\n        elif arr[i] < second_min_value and arr[i] != min_value:\n            second_min_value = arr[i]\n        i += 1\n    return second_min_value\n```\n\n**Related Problem 2:**\n\n**Problem Description:**  \nConsider a Python program that searches for a specific target value in an array.\n\n```python\ndef find_target(arr, target):\n    found = False\n    target_index = -1\n    j = 0\n    while j < len(arr):\n        if arr[j] == target:\n            found = True\n            target_index = j\n            break\n        j += 1\n    return target_index\n```\n\n**Related Problem 3:**\n\n**Problem Description:**  \nSuppose we have a Python program that determines whether an array is sorted in non-decreasing order.\n\n```python\ndef is_sorted(arr):\n    sorted = True\n    k = 0\n    while k < len(arr) - 1:\n        if arr[k] > arr[k+1]:\n            sorted = False\n            break\n        k += 1\n    return sorted\n```\n\n**Therefore, the final answer is:**  \n'e_value = fun(arr[e]->arr[e])'"}]