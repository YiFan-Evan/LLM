[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    c = 0\n    while c < len(arr):\n        z = c + 1\n        while z < len(arr):\n            if arr[z] < arr[c]:\n                temp = arr[c]\n                arr[c] = arr[z]\n                arr[z] = temp\n            z += 1\n        c += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem 1:**\n**Description:** \nYou are given a program that reverses an array in-place. The program swaps the elements of the array iteratively until the whole array is reversed.\n**Solution:**\nThe program iterates over the array from the start and end simultaneously, exchanging the elements at the two ends in each iteration. At the end of the loop, the array will be reversed.\n\n2. **Problem 2:**\n**Description:** \nYou are given a program that sorts an array in ascending order using bubble sort algorithm. The program iteratively compares adjacent elements and swaps them if they are in the wrong order.\n**Solution:**\nThe program iterates over the array in each pass and compares adjacent elements. If they are in the wrong order, it swaps them. The largest element in the array bubbles up to its correct position after each pass.\n\n3. **Problem 3:**\n**Description:** \nYou are given a program that finds the maximum element in an array. The program iterates over the array and keeps track of the maximum element encountered so far.\n**Solution:**\nThe program initializes the maximum element as the first element of the array. It then iterates over the array, updating the maximum element if a larger element is encountered.\n\nTherefore, the final answer is: \n'c_value = min(arr[0:c]) and z_value = c+1'"}, {"role": "user", "content": "def selection_sort(arr):\n    c = 0\n    while c <= len(arr) - 1:\n        z = c + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[c]:\n                temp = arr[c]\n                arr[c] = arr[z]\n                arr[z] = temp\n            z += 1\n        c += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem 1:**\n**Description:** \nYou are given a program that calculates the sum of elements in an array. The program iterates over the array and keeps adding the elements to a running sum variable.\n**Solution:**\nThe program initializes a sum variable to 0. It then iterates over the array, adding each element to the sum variable.\n\n2. **Problem 2:**\n**Description:** \nYou are given a program that checks if an array is sorted in non-decreasing order. The program iterates over the array and checks if each element is less than or equal to the next element.\n**Solution:**\nThe program iterates over the array, comparing each element to the next. If an element is greater than the next element, the array is not sorted.\n\n3. **Problem 3:**\n**Description:** \nYou are given a program that finds the minimum element in an array. The program iterates over the array and keeps track of the minimum element encountered so far.\n**Solution:**\nThe program initializes the minimum element as the first element of the array. It then iterates over the array, updating the minimum element if a smaller element is encountered.\n\nTherefore, the final answer is: \n'c_value = min(arr[c:len(arr)]) and z_value = c+1'"}]