[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    g = 0\n    while g < len(arr):\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "**Related Problem 1:**  \n**Problem:** Write a Python program to find the minimum element in an array and move it to the beginning of the array.  \n**Solution:** We can use a loop to iterate through the array and compare each element with the first element. If a smaller element is found, we swap it with the first element.  \n**Code:**\n```python\ndef move_min_to_beginning(arr):\n    g = 0\n    while g < len(arr):\n        min_index = g\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[min_index]:\n                min_index = z\n            z += 1\n        if min_index != g:\n            temp = arr[g]\n            arr[g] = arr[min_index]\n            arr[min_index] = temp\n        g += 1\n    return arr\n```\n\n**Related Problem 2:**  \n**Problem:** Write a Python program to move the maximum element in an array to the end of the array.  \n**Solution:** Similar to the previous problem, we can find the maximum element in the array and swap it with the last element of the array.  \n**Code:**\n```python\ndef move_max_to_end(arr):\n    g = 0\n    while g < len(arr):\n        max_index = g\n        z = g + 1\n        while z < len(arr):\n            if arr[z] > arr[max_index]:\n                max_index = z\n            z += 1\n        if max_index != len(arr) - 1 - g:\n            temp = arr[len(arr) - 1 - g]\n            arr[len(arr) - 1 - g] = arr[max_index]\n            arr[max_index] = temp\n        g += 1\n    return arr\n```\n\n**Related Problem 3:**  \n**Problem:** Write a Python program to sort an array of integers in descending order.  \n**Solution:** By modifying the selection sort algorithm, we can sort the array in descending order by finding the maximum element in each iteration and moving it to the correct position.  \n**Code:**\n```python\ndef selection_sort_descending(arr):\n    g = 0\n    while g < len(arr):\n        max_index = g\n        z = g + 1\n        while z < len(arr):\n            if arr[z] > arr[max_index]:\n                max_index = z\n            z += 1\n        if max_index != g:\n            temp = arr[g]\n            arr[g] = arr[max_index]\n            arr[max_index] = temp\n        g += 1\n    return arr\n```\n\n**Therefore, the final answer is:**  \n'g_value = 0; z_value = g + 1; arr[0->g] is partially sorted.'"}, {"role": "user", "content": "def selection_sort(arr):\n    g = -1\n    while g < len(arr) - 1:\n        g += 1\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "**Related Problem 1:**  \n**Problem:** Write a Python program to find the index of the first negative number in an array and move it to the beginning of the array.  \n**Solution:** We can modify the selection sort algorithm to find the index of the first negative number in the array and move it to the beginning.  \n**Code:**\n```python\ndef move_first_negative_to_beginning(arr):\n    g = 0\n    neg_index = -1\n    while g < len(arr) and neg_index == -1:\n        if arr[g] < 0:\n            neg_index = g\n        g += 1\n        \n    if neg_index != -1:\n        temp = arr[0]\n        arr[0] = arr[neg_index]\n        arr[neg_index] = temp\n\n    return arr\n```\n\n**Related Problem 2:**  \n**Problem:** Write a Python program to move all zeros to the end of an array.  \n**Solution:** Use a loop to find the first zero in the array and swap it with the last non-zero element. Repeat this process until all zeros are at the end of the array.  \n**Code:**\n```python\ndef move_zeros_to_end(arr):\n    g = 0\n    z = len(arr) - 1\n    while g < z:\n        if arr[g] == 0:\n            while arr[z] == 0 and z > g:\n                z -= 1\n            if z > g:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z -= 1\n        g += 1\n    return arr\n```\n\n**Related Problem 3:**  \n**Problem:** Write a Python program to sort an array of strings in lexicographical order.  \n**Solution:** By modifying the selection sort algorithm and comparing strings instead of numbers, we can sort an array of strings in lexicographical order.  \n**Code:**\n```python\ndef selection_sort_lexicographical(arr):\n    g = 0\n    while g < len(arr) - 1:\n        min_index = g\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[min_index]:\n                min_index = z\n            z += 1\n        if min_index != g:\n            temp = arr[g]\n            arr[g] = arr[min_index]\n            arr[min_index] = temp\n        g += 1\n    return arr\n```\n\n**Therefore, the final answer is:**  \n'g_value = -1; z_value = g + 1; arr[-1->g] is partially sorted.'"}]