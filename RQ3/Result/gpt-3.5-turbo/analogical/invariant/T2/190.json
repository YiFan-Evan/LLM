[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    k = 0\n    while k < len(arr):\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n        k += 1\n    return arr"}, {"role": "assistant", "content": "**Related Problem 1:**\n\n**Problem:** Write a Python program to find the maximum element in an array using a loop.\n\n**Program:**\n```python\ndef find_max(arr):\n    curr_max = arr[0]\n    i = 1\n    while i < len(arr):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n        i += 1\n    return curr_max\n\narr = [3, 7, 1, 15, 4, 9]\nprint(find_max(arr))\n```\n\n**Solution:** In the above program, we iterate through the array to find the maximum element by comparing the current element with the current maximum value.\n\n**Related Problem 2:**\n\n**Problem:** Write a Python program to calculate the sum of all elements in an array using a loop.\n\n**Program:**\n```python\ndef calculate_sum(arr):\n    total = 0\n    i = 0\n    while i < len(arr):\n        total += arr[i]\n        i += 1\n    return total\n\narr = [3, 7, 1, 15, 4, 9]\nprint(calculate_sum(arr))\n```\n\n**Solution:** In the above program, we iterate through the array and accumulate the sum of all elements in the array by adding each element to a total.\n\n**Related Problem 3:**\n\n**Problem:** Write a Python program to count the number of even elements in an array using a loop.\n\n**Program:**\n```python\ndef count_even(arr):\n    count = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            count += 1\n        i += 1\n    return count\n\narr = [3, 7, 1, 15, 4, 9, 10, 6]\nprint(count_even(arr))\n```\n\n**Solution:** In the above program, we iterate through the array and increment a counter every time we encounter an even element in the array.\n\n**Therefore, the final answer is:**\n\nThe loop invariant for the i-th iteration of the outer loop in the `selection_sort` function is 'k_value = fun(arr[0:k]->arr[0:k] and min_value = fun(arr[0:k]->arr[k])'."}, {"role": "user", "content": "def selection_sort(arr):\n    k = -1\n    while k < len(arr) - 1:\n        k += 1\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "**Related Problem 1:**\n\n**Problem:** Write a Python program to find the minimum element in an array using a loop.\n\n**Program:**\n```python\ndef find_min(arr):\n    curr_min = arr[0]\n    i = 1\n    while i < len(arr):\n        if arr[i] < curr_min:\n            curr_min = arr[i]\n        i += 1\n    return curr_min\n\narr = [3, 7, 1, 15, 4, 9]\nprint(find_min(arr))\n```\n\n**Solution:** In the above program, we iterate through the array to find the minimum element by comparing the current element with the current minimum value.\n\n**Related Problem 2:**\n\n**Problem:** Write a Python program to reverse an array in-place using a loop.\n\n**Program:**\n```python\ndef reverse_array(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n\narr = [3, 7, 1, 15, 4, 9]\nprint(reverse_array(arr))\n```\n\n**Solution:** In the above program, we use two pointers to swap elements from the start and end of the array to reverse it in-place.\n\n**Related Problem 3:**\n\n**Problem:** Write a Python program to find the second largest element in an array using a loop.\n\n**Program:**\n```python\ndef find_second_largest(arr):\n    max_element = max(arr)\n    second_largest = float('-inf')\n    for num in arr:\n        if num != max_element and num > second_largest:\n            second_largest = num\n    return second_largest\n\narr = [3, 7, 1, 15, 4, 9]\nprint(find_second_largest(arr))\n```\n\n**Solution:** In the above program, we find the maximum element in the array first, then iterate through the array to find the second largest element without considering the maximum element.\n\n**Therefore, the final answer is:**\n\nThe loop invariant for the i-th iteration of the outer loop in the `selection_sort` function is 'k_value = fun(arr[0:k]->arr[0:k] and min_value = fun(arr[0:k]->arr[k])'."}]