[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[0]\n    m = 0\n    while m < len(arr):\n        if arr[m] > max_value:\n            max_value = arr[m]\n        m += 1\n    return max_value\n"}, {"role": "assistant", "content": "1. Problem: Write a function that finds the minimum value in a given array.\n\n```python\ndef find_min(arr):\n    min_value = arr[0]\n    m = 0\n    while m < len(arr):\n        if arr[m] < min_value:\n            min_value = arr[m]\n        m += 1\n    return min_value\n```\n\n2. Problem: Write a function that counts the number of even numbers in a given array.\n\n```python\ndef count_even(arr):\n    count = 0\n    m = 0\n    while m < len(arr):\n        if arr[m] % 2 == 0:\n            count += 1\n        m += 1\n    return count\n```\n\n3. Problem: Write a function that checks if all elements in a given array are positive.\n\n```python\ndef all_positive(arr):\n    positive = True\n    m = 0\n    while m < len(arr) and positive:\n        if arr[m] <= 0:\n            positive = False\n        m += 1\n    return positive\n```\n\nTherefore, the final answer is: 'm = 0->m<=len(arr)'"}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[0]\n    m = -1\n    while m < len(arr) - 1:\n        m += 1\n        if arr[m] > max_value:\n            max_value = arr[m]\n    return max_value\n"}, {"role": "assistant", "content": "1. Problem: Write a function that finds the second largest value in a given array.\n\n```python\ndef find_second_largest(arr):\n    max_value = arr[0]\n    second_largest = float('-inf')\n    m = 0\n    while m < len(arr):\n        if arr[m] > max_value:\n            second_largest = max_value\n            max_value = arr[m]\n        elif arr[m] > second_largest and arr[m] < max_value:\n            second_largest = arr[m]\n        m += 1\n    return second_largest\n```\n\n2. Problem: Write a function that finds the median value in a given array.\n\n```python\ndef find_median(arr):\n    arr.sort()\n    length = len(arr)\n    if length % 2 == 0:\n        return (arr[length // 2] + arr[length // 2 - 1]) / 2\n    else:\n        return arr[length // 2]\n```\n\n3. Problem: Write a function that returns the index of the first occurrence of a specific value in a given array.\n\n```python\ndef find_index(arr, value):\n    index = -1\n    m = 0\n    while m < len(arr) and index == -1:\n        if arr[m] == value:\n            index = m\n        m += 1\n    return index\n```\n\nTherefore, the final answer is: 'm = -1->m<=len(arr) - 1, max_value = max(arr[0], arr[0..m-1])'."}]