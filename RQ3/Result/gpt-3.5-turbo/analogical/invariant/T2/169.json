[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    j = 0\n    while j < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        j += 1\n    return arr"}, {"role": "assistant", "content": "Related Problem 1:\n**Problem Description:** You are given a target Python program that implements bubble sort. Provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n\n**Solution:** The loop invariant for bubble sort may be 'i_value = fun(arr[0:i]->arr[0:i])'.\n\nRelated Problem 2:\n**Problem Description:** You are given a target Python program that implements selection sort. Provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n\n**Solution:** The loop invariant for selection sort can be 'i_value = fun(arr[0:i]->arr[0:i])'.\n\nRelated Problem 3:\n**Problem Description:** You are given a target Python program that implements merge sort. Provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n\n**Solution:** The loop invariant for merge sort may be 'i_value = fun(arr[0:i]->arr[0:i])'.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration of the outer loop in the insertion sort program is 'j_value = fun(arr[0:j]->arr[0:j])'."}, {"role": "user", "content": "def insertion_sort(arr):\n    j = -1\n    while j < len(arr) - 1:\n        j += 1\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n    return arr"}, {"role": "assistant", "content": "Related Problem 1:\n**Problem Description:** You are given a target Python program that implements bubble sort. Provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n\n**Solution:** The loop invariant for bubble sort may be 'i_value = fun(arr[0:i]->arr[0:i])'.\n\nRelated Problem 2:\n**Problem Description:** You are given a target Python program that implements selection sort. Provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n\n**Solution:** The loop invariant for selection sort can be 'i_value = fun(arr[0:i]->arr[0:i])'.\n\nRelated Problem 3:\n**Problem Description:** You are given a target Python program that implements merge sort. Provide a loop invariant for the i-th iteration of the outer loop to prove the partial correctness of the program.\n\n**Solution:** The loop invariant for merge sort may be 'i_value = fun(arr[0:i]->arr[0:i])'.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration of the outer loop in the insertion sort program is 'j_value = fun(arr[0:j]->arr[0:j])'."}]