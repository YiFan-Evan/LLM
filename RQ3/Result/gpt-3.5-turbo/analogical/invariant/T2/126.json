[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def give_mid(arr):\n    mid_value = arr[0]\n    g = 0\n    while 2 * g < len(arr):\n        mid_value = arr[g]\n        g += 1\n    return mid_value"}, {"role": "assistant", "content": "Similar problem 1:\n**Problem**: Provide a loop invariant for the i-th iteration of the following loop: \n```python\ndef find_max(arr):\n    max_value = arr[0]\n    i = 1\n    while i < len(arr):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        i += 1\n    return max_value\n```\n**Loop Invariant**: 'max_value = max(arr[0:i])'\n\nSimilar problem 2:\n**Problem**: Provide a loop invariant for the i-th iteration of the following loop: \n```python\ndef compute_sum(arr):\n    total = 0\n    j = 0\n    while j < len(arr):\n        total += arr[j]\n        j += 1\n    return total\n```\n**Loop Invariant**: 'total = sum(arr[0:j])'\n\nSimilar problem 3:\n**Problem**: Provide a loop invariant for the i-th iteration of the following loop: \n```python\ndef find_min(arr):\n    min_value = arr[0]\n    k = 1\n    while k < len(arr):\n        if arr[k] < min_value:\n            min_value = arr[k]\n        k += 1\n    return min_value\n```\n**Loop Invariant**: 'min_value = min(arr[0:k])'\n\nTherefore, the final answer is: 'mid_value = arr[0:g]'"}, {"role": "user", "content": "def give_mid(arr):\n    mid_value = arr[0]\n    g = -1\n    while 2 * g < len(arr) - 2:\n        g += 1\n        mid_value = arr[g]\n    return mid_value"}, {"role": "assistant", "content": "Similar problem 1:\n**Problem**: Provide a loop invariant for the i-th iteration of the following loop: \n```python\ndef find_average(arr):\n    sum_value = 0\n    i = 0\n    while i < len(arr):\n        sum_value += arr[i]\n        i += 1\n    average = sum_value / len(arr)\n    return average\n```\n**Loop Invariant**: 'sum_value = sum(arr[0:i])'\n\nSimilar problem 2:\n**Problem**: Provide a loop invariant for the i-th iteration of the following loop: \n```python\ndef count_positive(arr):\n    count = 0\n    j = 0\n    while j < len(arr):\n        if arr[j] > 0:\n            count += 1\n        j += 1\n    return count\n```\n**Loop Invariant**: 'count = number of positive elements in arr[0:j]'\n\nSimilar problem 3:\n**Problem**: Provide a loop invariant for the i-th iteration of the following loop: \n```python\ndef count_zeros(arr):\n    zeros = 0\n    k = 0\n    while k < len(arr):\n        if arr[k] == 0:\n            zeros += 1\n        k += 1\n    return zeros\n```\n**Loop Invariant**: 'zeros = number of zeros in arr[0:k]'\n\nTherefore, the final answer is: 'mid_value = arr[0:g]'"}]