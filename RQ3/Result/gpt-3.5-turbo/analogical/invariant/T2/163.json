[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    d = 0\n    while d < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        d += 1\n    return arr"}, {"role": "assistant", "content": "**Related Problem 1:**\n\n**Description:** Modify the given program to use the insertion sort algorithm to sort the elements of the array in descending order. \n\n**Solution:** In this case, the algorithm remains the same; you only need to change the condition in the inner while loop to `arr[z - 1] < arr[z]`.\n\n**Related Problem 2:**\n\n**Description:** Revise the program to sort the array in non-decreasing order while maintaining the relative order of equal elements.\n\n**Solution:** The modification is made in the condition of the inner while loop to `arr[z - 1] <= arr[z]`.\n\n**Related Problem 3:**\n\n**Description:** Change the program to sort the negative elements of the array in descending order while keeping the order of positive elements intact.\n\n**Solution:** In this case, you can add an if-else condition before the inner while loop to handle the sorting based on the sign of the elements.\n\nTherefore, the final answer is: \"z = d\"."}, {"role": "user", "content": "def insertion_sort(arr):\n    d = -1\n    while d < len(arr) - 1:\n        d += 1\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the given program, we need to provide a loop invariant for the i-th iteration of the outer while loop.\n\nLoop Invariant: The subarray `arr[0:d]` is sorted in non-decreasing order.\n\n**Initialization:**\nBefore the first iteration of the outer while loop, `d` is initialized to -1. Therefore, the subarray `arr[0:d]` is empty and thus trivially sorted in non-decreasing order.\n\n**Maintenance:**\nAssume that the loop invariant is true for the i-th iteration. During the (i+1)-th iteration, the inner while loop compares each element `arr[z]` with its preceding element `arr[z - 1]` from right to left until `z` becomes 0 or `arr[z - 1] <= arr[z]`. If `arr[z - 1] > arr[z]`, it swaps the elements `arr[z]` and `arr[z - 1]`. This process is repeated until the inner while loop terminates.\n\nSince the inner while loop guarantees that `arr[z]` being moved to the left position until it is no longer greater than its preceding element, the subarray `arr[z - 1:z + 1]` (including `arr[z - 1]` and `arr[z]`) is sorted in non-decreasing order after each iteration of the inner while loop.\n\nTherefore, after the (i+1)-th iteration of the outer while loop, the subarray `arr[0:d + 1]` is sorted in non-decreasing order. \n\n**Termination:**\nThe termination condition of the outer while loop is `d < len(arr) - 1`, which means that the loop ends when `d` becomes equal to or greater than `len(arr) - 1`. At this point, `d` is incremented by 1. Since the loop invariant holds for the final value of `d`, the subarray `arr[0:len(arr)]` which is the whole array `arr`, is sorted in non-decreasing order.\n\nTherefore, the final answer is: `d = len(arr) - 1`."}]