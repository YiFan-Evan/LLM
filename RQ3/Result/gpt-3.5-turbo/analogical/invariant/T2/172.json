[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    m = 0\n    while m < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        m += 1\n    return arr"}, {"role": "assistant", "content": "**Related Problem 1:**\n\n**Description:**\nYou are given a program that uses a while loop to find the maximum value in an array `arr`. The variable `m` is used as an index to iterate over the array elements. You need to provide a loop invariant for the correct functionality of this program.\n\n**Program:**\n```python\ndef find_max(arr):\n    m = 0\n    while m < len(arr):\n        # loop logic here\n        m += 1\n    return m\n```\n\n**Solution:**\nLoop Invariant: `m_value = max(arr[:m])`\n\n**Related Problem 2:**\n\n**Description:**\nYou are given a program that calculates the sum of all elements in an array `arr` using a while loop. The variable `m` is used as an index to iterate over the array elements. You need to provide a loop invariant for the correct functionality of this program.\n\n**Program:**\n```python\ndef calculate_sum(arr):\n    m = 0\n    total_sum = 0\n    while m < len(arr):\n        # loop logic here\n        m += 1\n    return total_sum\n```\n\n**Solution:**\nLoop Invariant: `total_sum = sum(arr[:m])`\n\n**Related Problem 3:**\n\n**Description:**\nYou are given a program that checks whether a given number `target` is present in an array `arr` using a while loop. The variable `m` is used as an index to iterate over the array elements. You need to provide a loop invariant for the correct functionality of this program.\n\n**Program:**\n```python\ndef search_target(arr, target):\n    m = 0\n    while m < len(arr):\n        # loop logic here\n        m += 1\n    return False\n```\n\n**Solution:**\nLoop Invariant: `target in arr[:m]`\n\n**Therefore, the final answer is:**\n\nLoop Invariant: `z_value = arr[m-1]`"}, {"role": "user", "content": "def insertion_sort(arr):\n    m = -1\n    while m < len(arr) - 1:\n        m += 1\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n    return arr"}, {"role": "assistant", "content": "**Related Problem 1:**\n\n**Description:**\nYou are given a program that uses a while loop to find the minimum value in an array `arr`. The variable `m` is used as an index to iterate over the array elements. You need to provide a loop invariant for the correct functionality of this program.\n\n**Program:**\n```python\ndef find_min(arr):\n    m = -1\n    while m < len(arr) - 1:\n        # loop logic here\n        m += 1\n    return m\n```\n\n**Solution:**\nLoop Invariant: `m_value = min(arr[m+1:])`\n\n**Related Problem 2:**\n\n**Description:**\nYou are given a program that calculates the product of all elements in an array `arr` using a while loop. The variable `m` is used as an index to iterate over the array elements. You need to provide a loop invariant for the correct functionality of this program.\n\n**Program:**\n```python\ndef calculate_product(arr):\n    m = -1\n    product = 1\n    while m < len(arr) - 1:\n        # loop logic here\n        m += 1\n    return product\n```\n\n**Solution:**\nLoop Invariant: `product = reduce(lambda x, y: x*y, arr[:m+1])`\n\n**Related Problem 3:**\n\n**Description:**\nYou are given a program that counts the number of negative elements in an array `arr` using a while loop. The variable `m` is used as an index to iterate over the array elements. You need to provide a loop invariant for the correct functionality of this program.\n\n**Program:**\n```python\ndef count_negatives(arr):\n    m = -1\n    count = 0\n    while m < len(arr) - 1:\n        # loop logic here\n        m += 1\n    return count\n```\n\n**Solution:**\nLoop Invariant: `count = len([x for x in arr[:m+1] if x < 0])`\n\n**Therefore, the final answer is:**\n\nLoop Invariant: `z_value = arr[m-1]`"}]