[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r < len(arr):\n        z = r + 1\n        while z < len(arr):\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. Problem: Prove the correctness of a program that finds the maximum element in an array.\nSolution: We can iterate through the array, keeping track of the current maximum element found so far. At the end of the iteration, the current maximum will be the maximum element of the array.\n\n2. Problem: Prove the correctness of a program that calculates the sum of all elements in an array.\nSolution: We can iterate through the array, continuously adding the current element to a running sum. At the end of the iteration, the sum will be the total sum of all elements in the array.\n\n3. Problem: Prove the correctness of a program that searches for a specific element in an array.\nSolution: We can iterate through the array, comparing each element with the target element. If the target element is found, the program can terminate early, indicating that the element exists in the array.\n\nTherefore, the final answer is: \"r_value = fun(arr[0:r] is sorted in non-decreasing order)\""}, {"role": "user", "content": "def selection_sort(arr):\n    r = -1\n    while r < len(arr) - 1:\n        r += 1\n        z = r + 1\n        while z < len(arr):\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. Problem: Prove the correctness of a program that finds the minimum element in an array.\nSolution: By iterating through the array and keeping track of the current minimum element found so far, at the end of the iteration, the current minimum will be the minimum element of the array.\n\n2. Problem: Prove the correctness of a program that calculates the product of all elements in an array.\nSolution: By iterating through the array and continuously multiplying the current element with a running product, by the end of the iteration, the product will be the total product of all elements in the array.\n\n3. Problem: Prove the correctness of a program that checks if all elements of an array are positive.\nSolution: By iterating through the array and checking if each element is greater than 0, the program can determine if all elements are positive.\n\nTherefore, the final answer is: \"r_value = fun(arr[0:r] is sorted in non-decreasing order)\"."}]