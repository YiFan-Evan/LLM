[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    t = 0\n    while t < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem:** Prove the correctness of a simple insertion sort algorithm.\n   ```\n   arr = [5, 2, 4, 6, 1, 3]\n   ```\n   **Solution:** The insertion sort algorithm repeatedly takes an element from the unsorted part of the array and inserts it into its correct position in the sorted part. The loop invariant for the i-th iteration can be 'i_value = sorted(arr[0:i])'.\n\n2. **Problem:** Prove the correctness of a bubble sort algorithm.\n   ```\n   arr = [64, 34, 25, 12, 22, 11, 90]\n   ```\n   **Solution:** The bubble sort algorithm repeatedly compares adjacent elements and swaps them if they are in the wrong order. The loop invariant for the i-th iteration can be 'i_value = max(arr[i:])'.\n\n3. **Problem:** Prove the correctness of a merge sort algorithm.\n   ```\n   arr = [38, 27, 43, 3, 9, 82, 10]\n   ```\n   **Solution:** The merge sort algorithm recursively divides the array into two halves, sorts the halves, and then merges them. The loop invariant for the i-th iteration can be 'i_value = sorted(arr[0:2^i])'.\n\nTherefore, the final answer is: 'z_value = arr[0:z] is sorted'."}, {"role": "user", "content": "def insertion_sort(arr):\n    t = -1\n    while t < len(arr) - 1:\n        t += 1\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n    return arr"}, {"role": "assistant", "content": "Three related problems:\n\n1. **Problem:** Prove the correctness of a selection sort algorithm.\n   ```\n   arr = [64, 25, 12, 22, 11]\n   ```\n   **Solution:** The selection sort algorithm repeatedly selects the minimum element from the unsorted part of the array and swaps it with the first unsorted element. The loop invariant for the i-th iteration can be 'i_value = min(arr[i:])'.\n\n2. **Problem:** Prove the correctness of a quick sort algorithm.\n   ```\n   arr = [38, 27, 43, 3, 9, 82, 10]\n   ```\n   **Solution:** The quick sort algorithm selects a pivot element and partitions the array such that elements less than the pivot are on the left and greater are on the right. The loop invariant for the i-th iteration can be 'i_value = arr[0:i]'.\n\n3. **Problem:** Prove the correctness of a heap sort algorithm.\n   ```\n   arr = [12, 11, 13, 5, 6, 7]\n   ```\n   **Solution:** The heap sort algorithm first builds a max heap from the array and then repeatedly extracts the maximum element from the heap and rebuilds the heap. The loop invariant for the i-th iteration can be 'i_value = max_heap(arr[0:len(arr)-i+1])'.\n\nTherefore, the final answer is: 'z_value = arr[0:z] is sorted'."}]