[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    m = 0\n    while m < len(arr):\n        z = m + 1\n        while z < len(arr):\n            if arr[z] < arr[m]:\n                temp = arr[m]\n                arr[m] = arr[z]\n                arr[z] = temp\n            z += 1\n        m += 1\n    return arr"}, {"role": "assistant", "content": "Three Related Problems:\n\nProblem 1:\nModify the selection_sort function to sort the array in descending order instead of ascending order.\n\nProblem 2:\nModify the selection_sort function to sort only the first half of the array, while leaving the second half unchanged.\n\nProblem 3:\nModify the selection_sort function to sort only the odd indexed elements of the array, while leaving the even indexed elements unchanged.\n\nProblem 1 Description and Solution:\nProblem: Sort the given array in descending order using selection sort.\n\nSolution:\nTo solve this problem, we can modify the existing code by changing the if condition inside the nested while loop. Instead of checking if arr[z] < arr[m], we will check if arr[z] > arr[m]. If the condition is true, we will swap the elements.\n\nProblem 1 Loop Invariant:\nAt the start of each iteration of the nested while loop, the subarray arr[0:m] will be sorted in descending order.\n\nProblem 2 Description and Solution:\nProblem: Sort only the first half of the array using selection sort, while leaving the second half unchanged.\n\nSolution:\nTo solve this problem, we can modify the outer while loop condition. Instead of m < len(arr), we will change it to m < len(arr) // 2. This will limit the sorting to only the first half of the array.\n\nProblem 2 Loop Invariant:\nAt the start of each iteration of the nested while loop, the subarray arr[0:m] will be sorted, while the remaining elements arr[m:] will be unchanged.\n\nProblem 3 Description and Solution:\nProblem: Sort only the odd indexed elements of the array using selection sort, while leaving the even indexed elements unchanged.\n\nSolution:\nTo solve this problem, we can modify the inner while loop condition. Instead of z < len(arr), we will change it to z < len(arr) and increment z by 2 in each iteration. This will skip the even indexed elements and sort only the odd indexed elements.\n\nProblem 3 Loop Invariant:\nAt the start of each iteration of the nested while loop, the subarray arr[m:] will have the odd indexed elements sorted, while the even indexed elements will remain unchanged.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration of the loop in the selection_sort function to prove partial correctness is 'arr[0:m] is sorted in ascending order'."}, {"role": "user", "content": "def selection_sort(arr):\n    m = -1\n    while m < len(arr) - 1:\n        m += 1\n        z = m + 1\n        while z < len(arr):\n            if arr[z] < arr[m]:\n                temp = arr[m]\n                arr[m] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "Three Related Problems:\n\nProblem 1:\nModify the selection_sort function to sort the array in descending order instead of ascending order.\n\nProblem 2:\nModify the selection_sort function to sort only the first half of the array, while leaving the second half unchanged.\n\nProblem 3:\nModify the selection_sort function to sort only the odd indexed elements of the array, while leaving the even indexed elements unchanged.\n\nProblem 1 Description and Solution:\nProblem: Sort the given array in descending order using selection sort.\n\nSolution:\nTo solve this problem, we can modify the existing code by changing the if condition inside the nested while loop. Instead of checking if arr[z] < arr[m], we will check if arr[z] > arr[m]. If the condition is true, we will swap the elements.\n\nProblem 1 Loop Invariant:\nAt the start of each iteration of the inner while loop, the subarray arr[0:m] will be sorted in descending order.\n\nProblem 2 Description and Solution:\nProblem: Sort only the first half of the array using selection sort, while leaving the second half unchanged.\n\nSolution:\nTo solve this problem, we can modify the outer while loop condition. Instead of m < len(arr) - 1, we will change it to m < len(arr) // 2. This will limit the sorting to only the first half of the array.\n\nProblem 2 Loop Invariant:\nAt the start of each iteration of the inner while loop, the subarray arr[0:m] will be sorted, while the remaining elements arr[m:] will be unchanged.\n\nProblem 3 Description and Solution:\nProblem: Sort only the odd indexed elements of the array using selection sort, while leaving the even indexed elements unchanged.\n\nSolution:\nTo solve this problem, we can modify the inner while loop condition. Instead of z < len(arr), we will change it to z < len(arr) and increment z by 2 in each iteration. This will skip the even indexed elements and sort only the odd indexed elements.\n\nProblem 3 Loop Invariant:\nAt the start of each iteration of the inner while loop, the subarray arr[m:] will have the odd indexed elements sorted, while the even indexed elements will remain unchanged.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration of the loop in the selection_sort function to prove partial correctness is 'arr[0:m] is sorted in ascending order'."}]