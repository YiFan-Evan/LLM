[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    a = 0\n    while a < len(arr):\n        z = a + 1\n        while z < len(arr):\n            if arr[z] < arr[a]:\n                temp = arr[a]\n                arr[a] = arr[z]\n                arr[z] = temp\n            z += 1\n        a += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem**: \n   - **Description**: Given an array of integers, the program sorts the array using selection sort.\n   - **Solution**: Loop through the array, find the minimum element, and swap it with the element at the current position.\n   \n2. **Problem**: \n   - **Description**: Sort an array of strings in non-decreasing order.\n   - **Solution**: Iterate through the array, find the minimum string (according to lexicographical order), and swap it with the element at the current position.\n   \n3. **Problem**: \n   - **Description**: Sort an array of tuples based on the second element of each tuple in non-decreasing order.\n   - **Solution**: Traverse through the array, find the tuple with the smallest second element, and swap it with the element at the current position.\n\n**Loop Invariant**: \nFor the i-th iteration of the outer loop, before entering the inner loop, the subarray arr[0:a] is sorted in non-decreasing order.\n\nTherefore, the final answer is: \n`sorted subarray = fun(arr[0:a])`"}, {"role": "user", "content": "def selection_sort(arr):\n    a = -1\n    while a < len(arr) - 1:\n        a += 1\n        z = a + 1\n        while z < len(arr):\n            if arr[z] < arr[a]:\n                temp = arr[a]\n                arr[a] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem**: \n   - **Description**: Given an array of integers, the program sorts the array using selection sort with a slightly modified loop index initialization.\n   - **Solution**: Loop through the array, find the minimum element, and swap it with the element at the current position.\n   \n2. **Problem**: \n   - **Description**: Sort an array of positive integers in non-decreasing order.\n   - **Solution**: Traverse through the array, find the smallest integer, and swap it with the element at the current position.\n   \n3. **Problem**: \n   - **Description**: Sort an array of characters in non-decreasing order.\n   - **Solution**: Iterate over the array, find the smallest character, and swap it with the element at the current position.\n\n**Loop Invariant**: \nFor the i-th iteration of the outer loop, the element at index a is the minimum element in the subarray arr[0:a].\n\nTherefore, the final answer is: \n`min_element = fun(arr[0:a])`"}]