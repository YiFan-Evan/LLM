[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    s = 0\n    while s < len(arr):\n        z = s + 1\n        while z < len(arr):\n            if arr[z] < arr[s]:\n                temp = arr[s]\n                arr[s] = arr[z]\n                arr[z] = temp\n            z += 1\n        s += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem Description**: You are given a list of integers, and the task is to sort the list in non-decreasing order using selection sort.\n\n**Example**: \n- Input: [5, 2, 8, 1, 3]\n- Output: [1, 2, 3, 5, 8]\n\n**Solution**:\n1. Initialize s to 0.\n2. Starting from index s, find the index of the minimum element in the rest of the list.\n3. Swap the minimum element with the element at index s.\n4. Increment s by 1 and repeat until the list is sorted.\n\n2. **Problem Description**: You are given an array of strings, and the aim is to sort the array lexicographically using selection sort.\n\n**Example**: \n- Input: [\"banana\", \"apple\", \"cherry\", \"date\"]\n- Output: [\"apple\", \"banana\", \"cherry\", \"date\"]\n\n**Solution**:\n1. Initialize s to 0.\n2. Starting from index s, find the index of the minimum string in the rest of the array.\n3. Swap the minimum string with the string at index s.\n4. Increment s by 1 and repeat until the array is sorted.\n\n3. **Problem Description**: Consider a scenario where the elements in the list are objects of a class, and we aim to sort the list using their defined comparison method.\n\n**Example**: \n- Input: [obj3, obj1, obj4, obj2]\n- Output: [obj1, obj2, obj3, obj4]\n\n**Solution**:\n1. Initialize s to 0.\n2. Starting from index s, find the index of the minimum object in the rest of the list based on the defined criteria.\n3. Swap the minimum object with the object at index s.\n4. Increment s by 1 and repeat until the list is sorted.\n\n**Therefore, the final answer is**: \"s_value = s\"."}, {"role": "user", "content": "def selection_sort(arr):\n    s = -1\n    while s < len(arr) - 1:\n        s += 1\n        z = s + 1\n        while z < len(arr):\n            if arr[z] < arr[s]:\n                temp = arr[s]\n                arr[s] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "1. **Problem Description**: You are provided with a list of floating-point numbers, and the task is to sort the list in non-decreasing order using selection sort.\n\n**Example**: \n- Input: [3.5, 1.2, 2.8, 0.5, 4.0]\n- Output: [0.5, 1.2, 2.8, 3.5, 4.0]\n\n**Solution**:\n1. Begin with s set to -1.\n2. Iterate over the list from s + 1 to the end to find the minimum element, then swap it with the element at index s.\n3. Repeat the process, incrementing s by 1 each time, until the list is sorted.\n\n2. **Problem Description**: Given a list of tuples where each tuple has two elements, and the goal is to sort the list based on the second element of each tuple using selection sort.\n\n**Example**: \n- Input: [(3, 'a'), (1, 'c'), (4, 'b'), (2, 'd')]\n- Output: [(3, 'a'), (4, 'b'), (1, 'c'), (2, 'd')]\n\n**Solution**:\n1. Initialize s to -1.\n2. Traverse the list from s + 1 to the end, finding the tuple with the smallest second element and swapping it with the tuple at index s.\n3. Increment s by 1 and repeat the process until the list is sorted.\n\n3. **Problem Description**: Suppose you are given a list of boolean values, and the objective is to sort the list in such a way that False values come before True values using selection sort.\n\n**Example**: \n- Input: [True, False, True, False]\n- Output: [False, False, True, True]\n\n**Solution**:\n1. Start with s initialized to -1.\n2. Continue iterating over the list starting from s + 1, swapping True values with False values encountered and incrementing s.\n3. Repeat the process until the list is sorted.\n\n**Therefore, the final answer is**: \"s_value = s\"."}]