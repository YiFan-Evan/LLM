[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    e = 0\n    while e < len(arr):\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n        e += 1\n    return arr"}, {"role": "assistant", "content": "Problem 1:\nDescription: In the first problem, the initial array is already sorted in non-decreasing order. The purpose of the program is to sort the array using the selection sort algorithm. Since the array is already sorted, the program should not make any changes to it.\nSolution: To prove the partial correctness of the program, we need to provide a loop invariant. For the i-th iteration of the outer loop, the loop invariant is 'e_value = i'. This means that after each iteration of the outer loop, the first i elements of the array are sorted.\n\nProblem 2:\nDescription: In the second problem, the initial array is sorted in non-increasing order. The purpose of the program is to sort the array using the selection sort algorithm. Since the array is already sorted, the program should not make any changes to it.\nSolution: To prove the partial correctness of the program, we need to provide a loop invariant. For the i-th iteration of the outer loop, the loop invariant is 'e_value = i'. This means that after each iteration of the outer loop, the first i elements of the array are sorted.\n\nProblem 3:\nDescription: In the third problem, the initial array contains duplicate elements. The purpose of the program is to sort the array using the selection sort algorithm. Since the array contains duplicate elements, the program should preserve the order of the duplicate elements.\nSolution: To prove the partial correctness of the program, we need to provide a loop invariant. For the i-th iteration of the outer loop, the loop invariant is 'e_value = i'. This means that after each iteration of the outer loop, the first i elements of the array are sorted.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration of the outer loop is 'e_value = i'."}, {"role": "user", "content": "def selection_sort(arr):\n    e = -1\n    while e < len(arr) - 1:\n        e += 1\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "Problem 1:\nDescription: In the first problem, the initial array is empty. The purpose of the program is to sort the array using the selection sort algorithm. Since the array is empty, the program should return an empty array.\nSolution: To prove the partial correctness of the program, we need to provide a loop invariant. For the i-th iteration of the outer loop, the loop invariant is 'e_value = i - 1'. This means that after each iteration of the outer loop, the first i elements of the array are sorted.\n\nProblem 2:\nDescription: In the second problem, the initial array contains only one element. The purpose of the program is to sort the array using the selection sort algorithm. Since the array has only one element, the program should return the same array.\nSolution: To prove the partial correctness of the program, we need to provide a loop invariant. For the i-th iteration of the outer loop, the loop invariant is 'z_value = z'. This means that the inner loop is iterating correctly over the elements on and after the index of the outer loop counter.\n\nProblem 3:\nDescription: In the third problem, the initial array contains all elements equal. The purpose of the program is to sort the array using the selection sort algorithm. Since all elements are the same, the program should return the same array.\nSolution: To prove the partial correctness of the program, we need to provide a loop invariant. For the i-th iteration of the outer loop, the loop invariant is 'e_value = i - 1'. This indicates that after each iteration of the outer loop, the first i elements of the array remain in their original order.\n\nTherefore, the final answer is: The loop invariant for the i-th iteration of the outer loop is 'e_value = i - 1'."}]