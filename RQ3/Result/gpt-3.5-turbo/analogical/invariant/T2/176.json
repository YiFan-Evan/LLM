[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def insertion_sort(arr):\n    q = 0\n    while q < len(arr):\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n        q += 1\n    return arr"}, {"role": "assistant", "content": "1. Problem: **Selection Sort**\n\n   Description: Implement a function that sorts an array using selection sort.\n\n   Solution: \n   ```python\n   def selection_sort(arr):\n       for i in range(len(arr)):\n           min_index = i\n           for j in range(i+1, len(arr)):\n               if arr[j] < arr[min_index]:\n                   min_index = j\n           arr[i], arr[min_index] = arr[min_index], arr[i]\n       return arr\n   ```\n\n2. Problem: **Bubble Sort**\n\n   Description: Implement a function that sorts an array using bubble sort.\n\n   Solution: \n   ```python\n   def bubble_sort(arr):\n       n = len(arr)\n       for i in range(n):\n           for j in range(0, n-i-1):\n               if arr[j] > arr[j+1]:\n                   arr[j], arr[j+1] = arr[j+1], arr[j]\n       return arr\n   ```\n\n3. Problem: **Merge Sort**\n\n   Description: Implement a function that sorts an array using merge sort.\n\n   Solution:\n   ```python\n   def merge_sort(arr):\n       if len(arr) > 1:\n           mid = len(arr) // 2\n           L = arr[:mid]\n           R = arr[mid:]\n           merge_sort(L)\n           merge_sort(R)\n\n           i = j = k = 0\n           while i < len(L) and j < len(R):\n               if L[i] < R[j]:\n                   arr[k] = L[i]\n                   i += 1\n               else:\n                   arr[k] = R[j]\n                   j += 1\n               k += 1\n\n           while i < len(L):\n               arr[k] = L[i]\n               i += 1\n               k += 1\n\n           while j < len(R):\n               arr[k] = R[j]\n               j += 1\n               k += 1\n       return arr\n   ```\n\nTherefore, the final answer is: \n'z_value = i->i',\n'z_value = z->0',\n'z_value = q->q'"}, {"role": "user", "content": "def insertion_sort(arr):\n    q = -1\n    while q < len(arr) - 1:\n        q += 1\n        z = i\n        while z > 0 and arr[z - 1] > arr[z]:\n            temp = arr[z]\n            arr[z] = arr[z - 1]\n            arr[z - 1] = temp\n            z -= 1\n    return arr"}, {"role": "assistant", "content": "1. Problem: **Insertion Sort with a Twist**\n\n   Description: Modify the insertion sort function by initializing q to -1 instead of 0.\n\n   Solution: \n   ```python\n   def insertion_sort_twist(arr):\n       q = -1\n       while q < len(arr) - 1:\n           q += 1\n           z = i\n           while z > 0 and arr[z - 1] > arr[z]:\n               temp = arr[z]\n               arr[z] = arr[z - 1]\n               arr[z - 1] = temp\n               z -= 1\n       return arr\n   ```\n\n2. Problem: **Reverse Sort**\n\n   Description: Implement a function that sorts an array in reverse order.\n\n   Solution: \n   ```python\n   def reverse_sort(arr):\n       for i in range(len(arr)):\n           for j in range(0, len(arr)-1):\n               if arr[j] < arr[j+1]:\n                   arr[j], arr[j+1] = arr[j+1], arr[j]\n       return arr\n   ```\n\n3. Problem: **Modulo Sort**\n\n   Description: Implement a function that sorts an array based on the modulo operation on array elements.\n\n   Solution:\n   ```python\n   def modulo_sort(arr):\n       for i in range(len(arr)):\n           for j in range(0, len(arr)-1):\n               if arr[j] % 3 > arr[j+1] % 3:\n                   arr[j], arr[j+1] = arr[j+1], arr[j]\n       return arr\n   ```\n\nTherefore, the final answer is: \n'z_value = i->i',\n'z_value = z->0',\n'z_value = q->q'"}]