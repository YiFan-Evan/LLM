[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def give_sum(arr):\n    sum_value = 0\n    b = 0\n    while b < len(arr):\n        sum_value += arr[b]\n        b += 1\n    return sum_value"}, {"role": "assistant", "content": "Problem 1:\nDescription: Modify the program to compute the product of all elements in the given array.\nSolution:\n```\ndef give_product(arr):\n    product_value = 1\n    b = 0\n    while b < len(arr):\n        product_value *= arr[b]\n        b += 1\n    return product_value\n```\nLoop Invariant: `product_value = prod(arr[0:b])`\n\nProblem 2:\nDescription: Modify the program to find the maximum value in the given array.\nSolution:\n```\ndef find_max(arr):\n    max_value = float('-inf')\n    b = 0\n    while b < len(arr):\n        if arr[b] > max_value:\n            max_value = arr[b]\n        b += 1\n    return max_value\n```\nLoop Invariant: `max_value = max(arr[0:b])`\n\nProblem 3:\nDescription: Modify the program to count the number of even elements in the given array.\nSolution:\n```\ndef count_even(arr):\n    count = 0\n    b = 0\n    while b < len(arr):\n        if arr[b] % 2 == 0:\n            count += 1\n        b += 1\n    return count\n```\nLoop Invariant: `count = number of even elements in arr[0:b]`\n\nTherefore, the final answer is: `sum_value = sum(arr[0:b])`"}, {"role": "user", "content": "def give_sum(arr):\n    sum_value = 0\n    b = -1\n    while b < len(arr) - 1:\n        b += 1\n        sum_value += arr[b]\n    return sum_value"}, {"role": "assistant", "content": "Problem 1:\nDescription: Modify the program to find the minimum value in the given array.\nSolution:\n```\ndef find_min(arr):\n    min_value = float('inf')\n    b = -1\n    while b < len(arr) - 1:\n        b += 1\n        if arr[b] < min_value:\n            min_value = arr[b]\n    return min_value\n```\nLoop Invariant: `min_value = min(arr[0:b+1])`\n\nProblem 2:\nDescription: Modify the program to count the number of negative elements in the given array.\nSolution:\n```\ndef count_negative(arr):\n    count = 0\n    b = -1\n    while b < len(arr) - 1:\n        b += 1\n        if arr[b] < 0:\n            count += 1\n    return count\n```\nLoop Invariant: `count = number of negative elements in arr[0:b+1]`\n\nProblem 3:\nDescription: Modify the program to calculate the average of all elements in the array.\nSolution:\n```\ndef calculate_average(arr):\n    sum_value = 0\n    b = -1\n    while b < len(arr) - 1:\n        b += 1\n        sum_value += arr[b]\n    return sum_value / len(arr)\n```\nLoop Invariant: `sum_value = sum(arr[0:b+1])`\n\nTherefore, the final answer is: `sum_value = sum(arr[0:b+1])`"}]