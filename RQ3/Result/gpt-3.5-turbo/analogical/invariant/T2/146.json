[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def give_sum(arr):\n    sum_value = 0\n    g = 0\n    while g < len(arr):\n        sum_value += arr[g]\n        g += 1\n    return sum_value"}, {"role": "assistant", "content": "Problem 1:\n**Description:** The program contains a loop that calculates the sum of all elements in the input array.\n**Initial problem:** Provide a loop invariant for the i-th iteration of the loop.\n**Solution:** For each iteration of the loop, the loop invariant should be in the form 'g_value = sum(arr[0]->arr[g-1])'.\n\nProblem 2:\n**Description:** The code below calculates the maximum value in the array.\n```python\ndef find_max(arr):\n    max_value = float('-inf')\n    i = 0\n    while i < len(arr):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        i += 1\n    return max_value\n```\n**Initial problem:** Provide a loop invariant for the i-th iteration of the loop.\n**Solution:** For each iteration of the loop, the loop invariant should be in the form 'i_value = max(arr[0]->arr[i-1])'.\n\nProblem 3:\n**Description:** The below code snippet computes the factorial of a given non-negative integer.\n```python\ndef factorial(n):\n    fact = 1\n    i = 1\n    while i <= n:\n        fact *= i\n        i += 1\n    return fact\n```\n**Initial problem:** Provide a loop invariant for the i-th iteration of the loop.\n**Solution:** For each iteration of the loop, the loop invariant should be in the form 'i_value = n!'.\n\nTherefore, the final answer is: 'g_value = sum(arr[0]->arr[g-1])'."}, {"role": "user", "content": "def give_sum(arr):\n    sum_value = 0\n    g = -1\n    while g < len(arr) - 1:\n        g += 1\n        sum_value += arr[g]\n    return sum_value"}, {"role": "assistant", "content": "Problem 1:\n**Description:** The program contains a loop that calculates the sum of all elements in the input array.\n**Initial problem:** Provide a loop invariant for the i-th iteration of the loop.\n**Solution:** For each iteration of the loop, the loop invariant should be in the form 'g_value = sum(arr[0]->arr[g])'.\n\nProblem 2:\n**Description:** The code below calculates the minimum value in the array.\n```python\ndef find_min(arr):\n    min_value = float('inf')\n    i = 0\n    while i < len(arr):\n        if arr[i] < min_value:\n            min_value = arr[i]\n        i += 1\n    return min_value\n```\n**Initial problem:** Provide a loop invariant for the i-th iteration of the loop.\n**Solution:** For each iteration of the loop, the loop invariant should be in the form 'i_value = min(arr[0]->arr[i])'.\n\nProblem 3:\n**Description:** The given code calculates the average of elements in the array.\n```python\ndef calculate_average(arr):\n    avg_value = 0\n    i = 0\n    while i < len(arr):\n        avg_value += arr[i]\n        i += 1\n    return avg_value / len(arr)\n```\n**Initial problem:** Provide a loop invariant for the i-th iteration of the loop.\n**Solution:** For each iteration of the loop, the loop invariant should be in the form 'i_value = sum(arr[0]->arr[i])'.\n\nTherefore, the final answer is: 'g_value = sum(arr[0]->arr[g])'."}]