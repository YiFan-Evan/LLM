[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def give_count(arr, target):\n    count_value = 0\n    m = 0\n    while m < len(arr):\n        if arr[m] == target:\n            count_value += 1\n        m += 1\n    return count_value"}, {"role": "assistant", "content": "1. **Problem:** Write a Python function that finds the maximum element in an array.\n\n```python\ndef find_max(arr):\n    max_value = float('-inf')\n    i = 0\n    while i < len(arr):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        i += 1\n    return max_value\n```\n\n**Solution:** In this problem, the loop invariant for the i-th iteration of the loop could be 'max_value = max(arr[0:i])'.\n\n2. **Problem:** Write a Python function that searches for a specific element in a sorted array.\n\n```python\ndef binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```\n\n**Solution:** In this problem, the loop invariant for the i-th iteration of the loop could be 'arr[left] <= target <= arr[right]'.\n\n3. **Problem:** Write a Python function that calculates the sum of all even numbers in an array.\n\n```python\ndef sum_even(arr):\n    even_sum = 0\n    j = 0\n    while j < len(arr):\n        if arr[j] % 2 == 0:\n            even_sum += arr[j]\n        j += 1\n    return even_sum\n```\n\n**Solution:** In this problem, the loop invariant for the i-th iteration of the loop could be 'even_sum = sum(arr[0:j] for arr[j] % 2 == 0)'.\n\nTherefore, the final answer is: 'count_value = sum(arr[0:m] == target)'."}, {"role": "user", "content": "def give_count(arr, target):\n    count_value = 0\n    m = -1\n    while m < len(arr) - 1:\n        m += 1\n        if arr[m] == target:\n            count_value += 1\n    return count_value"}, {"role": "assistant", "content": "1. **Problem:** Write a Python function that checks if an array is sorted in non-decreasing order.\n\n```python\ndef is_sorted(arr):\n    sorted_value = True\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i+1]:\n            sorted_value = False\n        i += 1\n    return sorted_value\n```\n\n**Solution:** In this problem, the loop invariant for the i-th iteration of the loop could be 'sorted_value = arr[0:i+1] is sorted in non-decreasing order'.\n\n2. **Problem:** Write a Python function that reverses an array in-place.\n\n```python\ndef reverse_array(arr):\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    return arr\n```\n\n**Solution:** In this problem, the loop invariant for the i-th iteration of the loop could be 'arr[0:i] is reversed and arr[j+1:] is reversed, where j = len(arr) - 1 - i'.\n\n3. **Problem:** Write a Python function that finds the first occurrence of a duplicate element in an array.\n\n```python\ndef find_duplicate(arr):\n    i = 0\n    while i < len(arr) - 1:\n        j = i + 1\n        while j < len(arr):\n            if arr[i] == arr[j]:\n                return arr[i]\n            j += 1\n        i += 1\n    return None\n```\n\n**Solution:** In this problem, the loop invariant for the i-th iteration of the outer loop could be 'arr[0:i+1] does not contain any duplicate elements'.\n\nTherefore, the final answer is: 'count_value = sum(arr[0:m+1] == target)'."}]