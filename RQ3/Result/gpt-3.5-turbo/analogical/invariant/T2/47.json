[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def give_count(arr, target):\n    count_value = 0\n    h = 0\n    while h < len(arr):\n        if arr[h] == target:\n            count_value += 1\n        h += 1\n    return count_value"}, {"role": "assistant", "content": "Problem 1:\nDescription: Given an array `arr` and a target value `target`, count the number of occurrences of the target value in the array.\nSolution:\n```\ndef give_count(arr, target):\n    count_value = 0\n    h = 0\n    while h < len(arr):\n        if arr[h] == target:\n            count_value += 1\n        h += 1\n    return count_value\n```\n\nProblem 2:\nDescription: Given an array `arr` and a target value `target`, find the index of the first occurrence of the target value in the array.\nSolution:\n```\ndef give_first_index(arr, target):\n    index_value = -1\n    h = 0\n    while h < len(arr):\n        if arr[h] == target:\n            index_value = h\n            break\n        h += 1\n    return index_value\n```\n\nProblem 3:\nDescription: Given an array `arr` and a target value `target`, check if the target value is present in the array or not.\nSolution:\n```\ndef check_presence(arr, target):\n    presence_value = False\n    h = 0\n    while h < len(arr):\n        if arr[h] == target:\n            presence_value = True\n            break\n        h += 1\n    return presence_value\n```\n\nTherefore, the loop invariant for the i-th iteration of the loop in the `give_count` function is: `count_value = fun(arr[0:i]->arr[0:i])`, where `fun` is a function that calculates the count of occurrences of the target value in the input array."}, {"role": "user", "content": "def give_count(arr, target):\n    count_value = 0\n    h = -1\n    while h < len(arr) - 1:\n        h += 1\n        if arr[h] == target:\n            count_value += 1\n    return count_value"}, {"role": "assistant", "content": "Problem 1:\nDescription: Given an array `arr` and a target value `target`, count the number of occurrences of the target value in the array.\nSolution:\n```\ndef give_count(arr, target):\n    count_value = 0\n    h = -1\n    while h < len(arr) - 1:\n        h += 1\n        if arr[h] == target:\n            count_value += 1\n    return count_value\n```\n\nProblem 2:\nDescription: Given an array `arr` and a target value `target`, find the index of the first occurrence of the target value in the array.\nSolution:\n```\ndef give_first_index(arr, target):\n    index_value = -1\n    h = -1\n    while h < len(arr) - 1:\n        h += 1\n        if arr[h] == target:\n            index_value = h\n            break\n    return index_value\n```\n\nProblem 3:\nDescription: Given an array `arr` and a target value `target`, check if the target value is present in the array or not.\nSolution:\n```\ndef check_presence(arr, target):\n    presence_value = False\n    h = -1\n    while h < len(arr) - 1:\n        h += 1\n        if arr[h] == target:\n            presence_value = True\n            break\n    return presence_value\n```\n\nTherefore, the loop invariant for the i-th iteration of the loop in the `give_count` function is: `count_value = fun(arr[0:i]->arr[0:i])`, where `fun` is a function that calculates the count of occurrences of the target value in the input array."}]