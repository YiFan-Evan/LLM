[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[0]\n    l = 0\n    while l < len(arr):\n        if arr[l] > max_value:\n            max_value = arr[l]\n        l += 1\n    return max_value\n"}, {"role": "assistant", "content": "1. **Problem 1:**\n   - **Description:** Prove the partial correctness of a function that finds the minimum value in an array.\n   - **Loop Invariant:** 'l_value = min(arr[0]->arr[l-1])'\n\n2. **Problem 2:**\n   - **Description:** Prove the partial correctness of a function that computes the sum of all elements in an array.\n   - **Loop Invariant:** 'l_value = sum(arr[0]->arr[l-1])'\n\n3. **Problem 3:**\n   - **Description:** Prove the partial correctness of a function that searches for a specific target value in an array.\n   - **Loop Invariant:** 'l_value = index of target in arr if target in arr[0]->arr[l-1] else -1'\n\n**Answer:**\nTherefore, the final answer is: 'l_value = max(arr[0]->arr[l-1])'."}, {"role": "user", "content": "def find_max(arr):\n    max_value = arr[0]\n    l = -1\n    while l < len(arr) - 1:\n        l += 1\n        if arr[l] > max_value:\n            max_value = arr[l]\n    return max_value\n"}, {"role": "assistant", "content": "1. **Problem 1:**\n   - **Description:** Prove the partial correctness of a function that finds the minimum value in a subarray defined by indices `start` and `end`.\n   - **Loop Invariant:** 'l_value = min(arr[0]->arr[l])'\n\n2. **Problem 2:**\n   - **Description:** Prove the partial correctness of a function that calculates the average of elements in an array.\n   - **Loop Invariant:** 'l_value = average(arr[0]->arr[l])'\n\n3. **Problem 3:**\n   - **Description:** Prove the partial correctness of a function that sorts an array in non-decreasing order.\n   - **Loop Invariant:** 'l_value = sorted(arr[0]->arr[l])'\n\n**Answer:**\nTherefore, the final answer is: 'l_value = max(arr[0]->arr[l])'."}]