[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    e = 0\n    while e < len(arr):\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n        e += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the selection_sort function, we need to provide a loop invariant for the inner loop (the one with index z) that holds true before the loop, is preserved after each iteration, and helps establish the correctness of the sorting algorithm.\n\nIn selection sort, the algorithm selects the smallest element in the unsorted part of the array and swaps it with the first unsorted element. The outer loop (indexed by e) selects the current element to be swapped into the correct position.\n\nLoop Invariant for the inner loop:\nAt the start of each iteration of the inner loop with index z:\n'min_value = min(arr[e:] -> arr[z-1])'\n\nHere, min_value represents the minimum value in the subarray from index e to z-1. This loop invariant ensures that the elements before index z are in their correct sorted positions based on the selection sort algorithm.\n\nTherefore, the final answer is: 'min_value = min(arr[e:] -> arr[z-1])'."}, {"role": "user", "content": "def selection_sort(arr):\n    e = -1\n    while e < len(arr) - 1:\n        e += 1\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the selection_sort function, we need to provide a loop invariant for the outer loop (the one with index e) that holds true before the loop, is preserved after each iteration, and helps establish the correctness of the sorting algorithm.\n\nIn selection sort, the algorithm selects the smallest element in the unsorted part of the array and swaps it with the first unsorted element. The outer loop (indexed by e) selects the current element to be swapped into the correct position.\n\nLoop Invariant for the outer loop:\nAt the start of each iteration of the outer loop with index e:\n'min_value = min(arr[:e])'\n\nHere, min_value represents the minimum value in the subarray from index 0 to e-1. This loop invariant ensures that the elements before index e have already been sorted in ascending order.\n\nTherefore, the final answer is: 'min_value = min(arr[:e])'."}]