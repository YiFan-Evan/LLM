[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    p = 0\n    while p < len(arr):\n        z = p + 1\n        while z < len(arr):\n            if arr[z] < arr[p]:\n                temp = arr[p]\n                arr[p] = arr[z]\n                arr[z] = temp\n            z += 1\n        p += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the selection sort algorithm, we need to define a loop invariant for the inner loop of the algorithm. The purpose of the algorithm is to sort an array in non-decreasing order. The loop invariant should help us prove that the algorithm correctly sorts the array.\n\nIn this case, a possible loop invariant for the i-th iteration of the inner loop is:\n'p_value = fun(arr[0] -> arr[p]) and for all k in [p+1, z): arr[k] >= arr[p]'\n\nThis loop invariant states that after the i-th iteration of the inner loop:\n1. The element at index p contains the minimum value in the subarray arr[0:p].\n2. All elements in the subarray arr[p+1:z) are greater than or equal to arr[p].\n\nTherefore, the final answer is: 'p_value = fun(arr[0] -> arr[p]) and for all k in [p+1, z): arr[k] >= arr[p]'"}, {"role": "user", "content": "def selection_sort(arr):\n    p = -1\n    while p < len(arr) - 1:\n        p += 1\n        z = p + 1\n        while z < len(arr):\n            if arr[z] < arr[p]:\n                temp = arr[p]\n                arr[p] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the selection sort algorithm with the corrected loop initialization, we need to define a loop invariant for the inner loop of the algorithm. The purpose of the algorithm is to sort an array in non-decreasing order. The loop invariant should help us prove that the algorithm correctly sorts the array.\n\nIn this case, a possible loop invariant for the i-th iteration of the inner loop is:\n'p_value = fun(arr[0] -> arr[p]) and for all k in [p+1, z): arr[k] >= arr[p]'\n\nThis loop invariant states that after the i-th iteration of the inner loop:\n1. The element at index p contains the minimum value in the subarray arr[0:p].\n2. All elements in the subarray arr[p+1:z) are greater than or equal to arr[p].\n\nTherefore, the final answer is: 'p_value = fun(arr[0] -> arr[p]) and for all k in [p+1, z): arr[k] >= arr[p]'"}]