[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    h = 0\n    while h < len(arr):\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "To provide a loop invariant for the i-th iteration of the loop in the given program, we need to understand the logic behind the selection sort algorithm. \n\nSelection sort works by selecting the smallest element from the unsorted portion of the array and placing it at the beginning of the unsorted portion. In each iteration of the outer loop, the i-th smallest element is selected and placed at index i. To prove the correctness of the algorithm, we can define a loop invariant that relates to this process.\n\nIn this case, a suitable loop invariant for the i-th iteration of the outer loop would be an assertion that the subarray `arr[0:i]` is sorted.\n\nTherefore, the loop invariant for the i-th iteration of the outer loop is:\n'arr[0:h] is sorted'."}, {"role": "user", "content": "def selection_sort(arr):\n    h = -1\n    while h < len(arr) - 1:\n        h += 1\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "To provide a loop invariant for the i-th iteration of the inner loop in the modified given program, we need to consider the logic of the selection sort algorithm.\n\nDuring each iteration of the inner loop, the program searches for the minimum element in the unprocessed portion of the array (starting from index (h + 1)). If a smaller element is found compared to the element at index h, they are swapped.\n\nTo ensure the correctness of the inner loop, we can define a loop invariant that states the subarray `arr[h:z]` contains the smallest element after the i-th iteration of the outer loop.\n\nTherefore, the loop invariant for the i-th iteration of the inner loop is:\n'arr[h:z] contains the smallest element'."}]