[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    t = 0\n    while t < len(arr):\n        z = t + 1\n        while z < len(arr):\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "To find the loop invariant for the i-th iteration of the outer loop in the provided `selection_sort` function, we need to consider what the function aims to do. The function sorts an array `arr` in non-decreasing order using the selection sort algorithm. The outer loop variable `t` selects an element at the start of the unsorted portion of the array, and the inner loop variable `z` iterates through the unsorted portion to find the minimum element to swap with the selected element at index `t`.\n\nThe loop invariant should help us prove that the function `selection_sort` correctly sorts the array. Since the inner loop shifts the minimum element found in the unsorted portion to the position `t`, we can use that information to create the loop invariant.\n\nTherefore, the loop invariant for the i-th iteration of the outer loop (with the selected index `t`) is:\n\n`t_value = min(arr[t]...arr[n-1]) & arr[0]...arr[t-1]` are sorted in non-decreasing order. `n` is the length of the array.`"}, {"role": "user", "content": "def selection_sort(arr):\n    t = -1\n    while t < len(arr) - 1:\n        t += 1\n        z = t + 1\n        while z < len(arr):\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "To find the loop invariant for the i-th iteration of the outer loop in the revised `selection_sort` function, we need to consider the purpose of the function, which is to sort an array `arr` in non-decreasing order using the selection sort algorithm. \n\nIn this function, the outer loop iterates through the array from index 0 to len(arr) - 1, selecting a new element at each iteration. The inner loop then searches for the smallest element in the unsorted portion of the array starting from index t+1.\n\nKeeping this in mind, we can form the loop invariant for the i-th iteration of the outer loop (with the selected index `t`) as follows:\n\nTherefore, the final answer is: \n`t_value = min(arr[t]...arr[n-1])` & `arr[0]...arr[t-1]` are sorted in non-decreasing order. `n` is the length of the array."}]