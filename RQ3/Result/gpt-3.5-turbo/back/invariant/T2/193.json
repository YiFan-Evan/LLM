[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n < len(arr):\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "To find the loop invariant for the i-th iteration of the outer loop in the selection sort algorithm, we need to understand the purpose of this algorithm. In each iteration of the outer loop, the algorithm selects the smallest element from the unsorted part of the array and places it at the correct position in the sorted part of the array.\n\nThe outer loop iterates over each element of the array, and the inner loop compares the current element with the elements that come after it to find the smallest element. If a smaller element is found, it swaps the positions of the current element and the smallest element found so far.\n\nThe loop invariant for the i-th iteration of the outer loop can be stated as follows:\nAt the start of the i-th iteration, the subarray arr[0:i] is sorted in non-decreasing order.\n\nTherefore, the final answer is: \n'arr[0:n] = sorted(arr[0:n])'."}, {"role": "user", "content": "def selection_sort(arr):\n    n = -1\n    while n < len(arr) - 1:\n        n += 1\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "To find the loop invariant for the i-th iteration of the outer loop in the modified selection sort algorithm, we need to understand the purpose of this algorithm. In each iteration of the outer loop, the algorithm selects the smallest element from the unsorted part of the array and places it at the correct position in the sorted part of the array.\n\nThe outer loop iterates over each element of the array, and the inner loop compares the current element with the elements that come after it to find the smallest element. If a smaller element is found, it swaps the positions of the current element and the smallest element found so far.\n\nThe loop invariant for the i-th iteration of the outer loop can be stated as follows:\nAt the start of the i-th iteration, the subarray arr[0:n] is sorted in non-decreasing order.\n\nTherefore, the final answer is: \n'arr[0:n] = sorted(arr[0:n])'."}]