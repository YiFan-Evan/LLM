[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    g = 0\n    while g < len(arr):\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "To find a loop invariant for the selection sort algorithm, we need to understand that the goal of this sorting algorithm is to continually select the minimum element from the unsorted portion of the array and place it at the beginning of the sorted portion.\n\nIn the inner loop of the selection sort algorithm, for each iteration of the outer loop, we consider the elements from index `g+1` to the end of the array. The loop invariant should maintain that the elements before index `g` are already sorted in ascending order.\n\nTherefore, the loop invariant for the i-th iteration of the outer loop can be defined as:\n'arr[0..g-1] = sorted(arr[0..g-1])'.\n\nThis loop invariant ensures that the elements before index `g` are in their final sorted position in the array."}, {"role": "user", "content": "def selection_sort(arr):\n    g = -1\n    while g < len(arr) - 1:\n        g += 1\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "Therefore, the final answer is: \n'arr[0..g] = sorted(arr[0..g])'."}]