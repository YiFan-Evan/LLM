[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    s = 0\n    while s < len(arr):\n        z = s + 1\n        while z < len(arr):\n            if arr[z] < arr[s]:\n                temp = arr[s]\n                arr[s] = arr[z]\n                arr[z] = temp\n            z += 1\n        s += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the `selection_sort` function, we need to provide a loop invariant for the nested loop inside the main while loop. In selection sort, the outer loop moves through the array elements one by one, and for each element, the inner loop finds the minimum element in the unsorted part of the array and swaps it with the current element.\n\nIn this case, we want to find a loop invariant for the inner loop when it is executing on the `s`-th iteration of the outer loop. The loop invariant in this case should clearly state the property that is true for each iteration of the inner loop.\n\nTherefore, the loop invariant for the `z`-th iteration of the inner loop on the `s`-th iteration of the outer loop is: \n`arr[s] <= arr[s+1] <= ... <= arr[z-1]`"}, {"role": "user", "content": "def selection_sort(arr):\n    s = 0\n    while s <= len(arr) - 1:\n        z = s + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[s]:\n                temp = arr[s]\n                arr[s] = arr[z]\n                arr[z] = temp\n            z += 1\n        s += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the `selection_sort` function, we need to provide a loop invariant for the nested loop inside the main while loop. In selection sort, the outer loop moves through the array elements one by one, and for each element, the inner loop finds the minimum element in the unsorted part of the array and swaps it with the current element.\n\nIn this case, we want to find a loop invariant for the inner loop when it is executing on the `s`-th iteration of the outer loop. The loop invariant in this case should clearly state the property that is true for each iteration of the inner loop.\n\nTherefore, the loop invariant for the `z`-th iteration of the inner loop on the `s`-th iteration of the outer loop is: \n`arr[s] <= arr[s+1] <= ... <= arr[z-1]`"}]