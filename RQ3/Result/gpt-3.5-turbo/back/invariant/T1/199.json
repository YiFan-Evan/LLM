[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    t = 0\n    while t < len(arr):\n        z = t + 1\n        while z < len(arr):\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the `selection_sort` function, we need to come up with a loop invariant for the inner loop. In this case, the inner loop is going through the elements of the array to find the smallest element and swapping it with the element at index `t`. \n\nThe loop invariant for the i-th iteration of the inner loop should capture the state of the array elements from index 0 to t. Specifically, it should state that all the elements from index 0 to t-1 are smaller than or equal to the element at index t. This is important because at the end of each iteration of the inner loop, the smallest element in the remaining unsorted portion of the array is swapped with the element at index t.\n\nTherefore, the loop invariant for the i-th iteration of the inner loop is: 't_value = fun(arr[0]->arr[t])'."}, {"role": "user", "content": "def selection_sort(arr):\n    t = 0\n    while t <= len(arr) - 1:\n        z = t + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[t]:\n                temp = arr[t]\n                arr[t] = arr[z]\n                arr[z] = temp\n            z += 1\n        t += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the `selection_sort` function, we can use a loop invariant to show that the subarray `arr[0:t]` is sorted at the end of each iteration of the outer loop. \n\nFor the outer loop, at the start of the i-th iteration, the subarray `arr[0:t]` contains the t smallest elements of the input array `arr`, which are already sorted in non-decreasing order.\n\nTherefore, the loop invariant for the i-th iteration of the outer loop is: 't_value = non_decreasing(arr[0]->arr[t])'."}]