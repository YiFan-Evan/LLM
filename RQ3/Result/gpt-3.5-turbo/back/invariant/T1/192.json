[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    m = 0\n    while m < len(arr):\n        z = m + 1\n        while z < len(arr):\n            if arr[z] < arr[m]:\n                temp = arr[m]\n                arr[m] = arr[z]\n                arr[z] = temp\n            z += 1\n        m += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the `selection_sort` function, we need to find a loop invariant that holds true before the first iteration, at the start of each iteration, and after the last iteration of the loop.\n\nIn this case, the outer loop variable `m` represents the index of the element that will be swapped with the minimum element found in the unsorted portion of the array. The inner loop variable `z` is used to traverse the unsorted portion of the array.\n\nTo find the loop invariant, we need to identify a condition that remains true throughout the execution of the loop. In this specific sorting algorithm, the loop invariant can be that the elements with indices less than `m` are in their final sorted positions.\n\nTherefore, the loop invariant for the i-th iteration of the inner loop is:  \n`m_value = fun(arr[0], ..., arr[m-1])`,  \nwhere `fun(arr[0], ..., arr[m-1])` represents that the elements with indices less than `m` are in their final sorted positions."}, {"role": "user", "content": "def selection_sort(arr):\n    m = 0\n    while m <= len(arr) - 1:\n        z = m + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[m]:\n                temp = arr[m]\n                arr[m] = arr[z]\n                arr[z] = temp\n            z += 1\n        m += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the modified `selection_sort` function, we need to find a loop invariant for the inner loop that holds true before the first iteration, at the start of each iteration, and after the last iteration of the loop.\n\nIn this case, the outer loop variable `m` represents the index of the element that will be swapped with the minimum element found in the unsorted portion of the array. The inner loop variable `z` is used to traverse the unsorted portion of the array.\n\nThe loop invariant should ensure that at the beginning of each iteration of the inner loop, the subarray `arr[0:m]` is sorted.\n\nTherefore, the loop invariant for the i-th iteration of the inner loop is:  \n`m_value = fun(arr[0], ..., arr[m-1])`,  \nwhere `fun(arr[0], ..., arr[m-1])` represents that the subarray from index 0 to m-1 is sorted before the start of each iteration.\n\nTherefore, the final answer is:  \n`m_value = fun(arr[0], ..., arr[m-1])`."}]