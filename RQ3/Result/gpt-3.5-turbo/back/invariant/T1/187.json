[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    h = 0\n    while h < len(arr):\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the program, we need to provide a loop invariant for the i-th iteration of the outer loop.\n\nIn this case, the loop invariant can be written as \"The subarray arr[0:h] is sorted\".\n\nWe can prove this loop invariant by induction:\n1. Initialization: Before the first iteration of the outer loop, h is equal to 0. Therefore, the subarray arr[0:h] is just arr[0], which contains only one element and can be considered sorted.\n2. Maintenance: Assume that the loop invariant holds for the i-th iteration of the outer loop. During the (i+1)-th iteration, we find the smallest element in the subarray arr[h:len(arr)]. If this smallest element is not at index h, we swap it with the element at index h. This ensures that the smallest element in the subarray arr[h:len(arr)] is at index h after the swap. Thus, the subarray arr[0:h+1] is sorted.\n3. Termination: The loop terminates when h is equal to len(arr). At this point, the outer loop has iterated over the entire array, and the loop invariant holds for the entire array. Therefore, the entire array arr is sorted.\n\nTherefore, the final answer is: \nThe loop invariant for the i-th iteration of the outer loop is \"The subarray arr[0:h] is sorted\"."}, {"role": "user", "content": "def selection_sort(arr):\n    h = 0\n    while h <= len(arr) - 1:\n        z = h + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the program, we need to provide a loop invariant for the i-th iteration of the outer loop.\n\nIn this case, the loop invariant can be written as \"The minimum element in the subarray arr[0:h] is at index h\".\n\nWe can prove this loop invariant by induction:\n1. Initialization: Before the first iteration of the outer loop, h is equal to 0. At this point, the subarray arr[0:h] consists of only one element, which is the minimum element (as there are no other elements to compare it with). Therefore, the minimum element in the subarray arr[0:h] is at index h, and the loop invariant holds.\n2. Maintenance: Assume that the loop invariant holds for the i-th iteration of the outer loop. During the (i+1)-th iteration, we find the minimum element in the subarray arr[h:len(arr)]. If this minimum element is not at index h, we swap it with the element at index h. After the swap, the minimum element in the subarray arr[0:h+1] is at index h, and the loop invariant holds for the (i+1)-th iteration.\n3. Termination: The loop terminates when h is equal to len(arr). At this point, the outer loop has iterated over the entire array, and the loop invariant holds for the entire array. Therefore, the entire array arr is sorted in ascending order.\n\nTherefore, the final answer is:\nThe loop invariant for the i-th iteration of the outer loop is \"The minimum element in the subarray arr[0:h] is at index h\"."}]