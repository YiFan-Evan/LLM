[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n < len(arr):\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the `selection_sort` function, we need to provide a loop invariant for the nested loop in the function. In the inner loop, the current element at index n is compared with the elements from index n+1 to end of the array to find the minimum element and swap it with the element at index n.\n\nTo find a loop invariant for the inner loop, let's consider the i-th iteration of the outer loop with n = i. At this point, we can assume that the subarray from index 0 to i-1 is already sorted and contains the smallest i elements in the correct order.\n\nTherefore, the loop invariant for the i-th iteration of the inner loop is:\n'n_value = arr[n] is the smallest element in the subarray from index 0 to n'"}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n <= len(arr) - 1:\n        z = n + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the `selection_sort` function, we need to provide a loop invariant for the nested loop in the function. In the inner loop, the current element at index `n` is compared with the elements from index `n+1` to the end of the array to find the minimum element and swap it with the element at index `n`.\n\nTo find a loop invariant for the inner loop, let's consider the `i-th` iteration of the outer loop with `n = i`. At this point, we can assume that the subarray from index `0` to `i-1` is already sorted and contains the smallest `i` elements in the correct order.\n\nTherefore, the loop invariant for the `i-th` iteration of the inner loop is:\n`n_value = arr[n]` is the smallest element in the subarray from index `0` to `n`."}]