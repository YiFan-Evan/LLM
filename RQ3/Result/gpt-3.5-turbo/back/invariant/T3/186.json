[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    g = 0\n    while g < len(arr):\n        z = g + 1\n        while z < len(arr):\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n            z += 1\n        g += 1\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the `selection_sort` function, we need to find a loop invariant that holds true before the start of the loop, is preserved after each iteration of the loop, and guarantees the correctness of the output once the loop terminates.\n\nIn this selection sort algorithm, the outer loop iterates through each element of the array to find the minimum element to swap with the current element at index `g`.\n\nTherefore, the loop invariant for the inner loop that sorts the elements starting from index `g` is:\n'z_value = arr[z] >= arr[g] for all g <= i <= z'"}, {"role": "user", "content": "def selection_sort(arr):\n    g = len(arr)\n    while g > 0:\n        g -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[g]:\n                temp = arr[g]\n                arr[g] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "To prove the partial correctness of the modified `selection_sort` function, we need to find a loop invariant that holds true before the start of the loop, is preserved after each iteration of the loop, and guarantees the correctness of the output once the loop terminates.\n\nIn this selection sort algorithm, the outer loop iterates through each element of the array in reverse order to find the maximum element to swap with the current element at index `g`.\n\nTherefore, the loop invariant for the inner loop that sorts the elements starting from index `g` is:\n'z_value = arr[z] <= arr[g] for all z < g'"}]