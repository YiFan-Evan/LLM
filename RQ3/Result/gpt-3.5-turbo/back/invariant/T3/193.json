[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first explain the fundamental principles involved in solving it, and then provide the answer to the problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n < len(arr):\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "In order to come up with a loop invariant for the given selection sort algorithm, we need to understand the main idea of this algorithm. Selection sort works by repeatedly finding the minimum element from the unsorted part of the array and moving it to the beginning of the unsorted part. The outer loop of the algorithm selects the current minimum element, and the inner loop iterates over the unsorted part of the array to find the actual minimum element.\n\nFor the loop invariant, we need to identify a property that remains true every time the program enters the while loop. One possible loop invariant for the i-th iteration of the outer loop (n-th iteration) of the selection sort algorithm is: 'arr[0...n-1] is sorted'.\n\nThis loop invariant ensures that the subarray arr[0...n-1] remains sorted after each iteration of the outer loop. To prove the correctness of the loop invariant, we need to show that it holds true before the first iteration (initialization), that it is maintained through each iteration (maintenance), and that it provides the required property upon termination (termination).\n\nTherefore, the final answer is: 'arr[0...n-1] is sorted'."}, {"role": "user", "content": "def selection_sort(arr):\n    n = len(arr)\n    while n > 0:\n        n -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "In the given selection sort algorithm, the outer loop variable `n` starts from the length of the array and decreases by 1 in each iteration until it reaches 0. The inner loop variable `z` starts from `n` and decreases towards 0. The inner loop scans the subarray from the end to the beginning and swaps elements if the current element is less than the element at index `n`.\n\nFor the loop invariant, one possible statement for the i-th iteration of the outer loop (n-th iteration) is: 'arr[n...len(arr)-1] is sorted in non-decreasing order'.\n\nThis loop invariant ensures that the subarray `arr[n...len(arr)-1]` is sorted in non-decreasing order after each iteration of the outer loop. This invariant should hold true before the first iteration of the outer loop (initialization), be maintained through each iteration (maintenance), and produce the required result upon termination (termination).\n\nTherefore, the final answer is: 'arr[n...len(arr)-1] is sorted in non-decreasing order'."}]