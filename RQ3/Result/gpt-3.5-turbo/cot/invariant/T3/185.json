[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to provide your thought process and ultimately present the conclusion in the form of \"Therefore, the final answer is: \")"}, {"role": "user", "content": "def selection_sort(arr):\n    f = 0\n    while f < len(arr):\n        z = f + 1\n        while z < len(arr):\n            if arr[z] < arr[f]:\n                temp = arr[f]\n                arr[f] = arr[z]\n                arr[z] = temp\n            z += 1\n        f += 1\n    return arr"}, {"role": "assistant", "content": "To find the loop invariant for the i-th iteration of the outer loop in the selection_sort function, we need to consider what is being maintained throughout the execution of the loop. \n\nIn this case, the loop invariant for the i-th iteration of the outer loop can be: 'f_value = min(arr[0:i])'\n\nThis loop invariant states that at the start of each iteration of the outer loop (at the beginning of the i-th iteration), the elements from index 0 up to (but not including) index i are sorted in non-decreasing order.\n\nTherefore, the final answer is: 'f_value = min(arr[0:i])'"}, {"role": "user", "content": "def selection_sort(arr):\n    f = len(arr)\n    while f > 0:\n        f -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[f]:\n                temp = arr[f]\n                arr[f] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "To find the loop invariant for the i-th iteration of the outer loop in the modified selection_sort function, we need to consider what is being maintained throughout the execution of the loop.\n\nIn this case, the loop invariant for the i-th iteration of the outer loop can be: 'f_value = max(arr[i:n])'\n\nThis loop invariant states that at the start of each iteration of the outer loop (at the beginning of the i-th iteration), the elements from index i up to (but not including) index n (where n is the length of the array) are sorted in non-increasing order.\n\nTherefore, the final answer is: 'f_value = max(arr[i:n])'"}]