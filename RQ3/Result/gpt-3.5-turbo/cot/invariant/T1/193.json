[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to provide your thought process and ultimately present the conclusion in the form of \"Therefore, the final answer is: \")"}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n < len(arr):\n        z = n + 1\n        while z < len(arr):\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "Initially, the outer loop index `n` is at position 0. In each iteration of the outer loop, the sub-array `arr[0...n-1]` is sorted in non-decreasing order. The inner loop iterates over elements from `arr[n+1]` to `arr[len(arr) - 1]`, looking for the smallest element and swapping it with `arr[n]` if necessary.\n\nFor proving the partial correctness of the `selection_sort` function, we need to establish a loop invariant for the two loops. Let's start by analyzing the inner loop:\n\n**Inner Loop Invariant:**\nAt the start of each iteration of the inner loop (indexed by `z`), the sub-array `arr[0...n-1]` consists of the smallest `n` elements of the input array `arr` in non-decreasing order.\n\nNow, let's conclude the loop invariant for the outer loop:\n\n**Outer Loop Invariant:**\nAt the start of each iteration of the outer loop (indexed by `n`), the sub-array `arr[0...n-1]` consists of the smallest `n` elements of the input array `arr` in non-decreasing order.\n\nTherefore, the final answer is: \n`n_value = arr[0:n] is the sorted list of n elements in non-decreasing order`"}, {"role": "user", "content": "def selection_sort(arr):\n    n = 0\n    while n <= len(arr) - 1:\n        z = n + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[n]:\n                temp = arr[n]\n                arr[n] = arr[z]\n                arr[z] = temp\n            z += 1\n        n += 1\n    return arr"}, {"role": "assistant", "content": "Initially, the outer loop index `n` is at position 0. In each iteration of the outer loop, the sub-array `arr[0...n-1]` is sorted in non-decreasing order. The inner loop iterates over elements from `arr[n+1]` to `arr[len(arr) - 1]`, looking for the smallest element and swapping it with `arr[n]` if necessary.\n\nFor proving the partial correctness of the `selection_sort` function, we need to establish a loop invariant for the two loops. Let's start by analyzing the inner loop:\n\n**Inner Loop Invariant:**\nAt the start of each iteration of the inner loop (indexed by `z`), the sub-array `arr[0...n-1]` consists of the smallest `n` elements of the input array `arr` in non-decreasing order.\n\nNow, let's conclude the loop invariant for the outer loop:\n\n**Outer Loop Invariant:**\nAt the start of each iteration of the outer loop (indexed by `n`), the sub-array `arr[0...n-1]` consists of the smallest `n` elements of the input array `arr` in non-decreasing order.\n\nTherefore, the final answer is: \n`n_value = arr[0:n] is the sorted list of n elements in non-decreasing order`"}]