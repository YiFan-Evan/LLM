[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to provide your thought process and ultimately present the conclusion in the form of \"Therefore, the final answer is: \")"}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r < len(arr):\n        z = r + 1\n        while z < len(arr):\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "To find the loop invariant for the i-th iteration of the nested loop in the `selection_sort` function, we need to understand the goal of the program. \n\nThe goal of the program is to sort the input array `arr` in non-decreasing order using the selection sort algorithm. The outer loop in the function moves the boundary of the unsorted subarray to the right by incrementing `r` for each iteration. The inner loop finds the minimum element in the unsorted part of the array and swaps it with the element at index `r`.\n\nNow, let's find the loop invariant for the i-th iteration of the inner loop:\n1. At the start of the inner loop iteration, the subarray `arr[0:r]` contains the first `r` elements of the input array `arr` in sorted order.\n2. The elements in `arr[0:r]` are smaller than or equal to the elements in `arr[r:len(arr)]`.\n3. The element at index `r` is the r-th smallest element in the array `arr`.\n\nTherefore, the final answer is: \n- `r_value = 0 <= r < len(arr)`\n- `z_value = r < z < len(arr)`\n- `arr[0:r]` contains the first `r` elements of the input array `arr` in sorted order\n- `arr[z]` is not smaller than any element in `arr[0:r]` until `z` is incremented to point to the next minimum element"}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r <= len(arr) - 1:\n        z = r + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "To find the loop invariant for the i-th iteration of the nested loop in the updated `selection_sort` function, we will again follow the same approach as before.\n\nThe goal of the program is to sort the input array `arr` in non-decreasing order using the selection sort algorithm. The outer loop in the function moves the boundary of the unsorted subarray to the right by incrementing `r` for each iteration. The inner loop finds the minimum element in the unsorted part of the array and swaps it with the element at index `r`.\n\nNow, let's find the loop invariant for the i-th iteration of the inner loop:\n1. At the start of the inner loop iteration, the subarray `arr[0:r]` contains the first `r` elements of the input array `arr` in sorted order.\n2. The elements in `arr[0:r]` are smaller than or equal to the elements in `arr[r:len(arr)]`.\n3. The element at index `r` is the r-th smallest element in the array `arr`.\n\nTherefore, the final answer is: \n- `r_value = 0 <= r <= len(arr) - 1`\n- `z_value = r < z <= len(arr) - 1`\n- `arr[0:r]` contains the first `r` elements of the input array `arr` in sorted order\n- `arr[z]` is not smaller than any element in `arr[0:r]` until `z` is incremented to point to the next minimum element"}]