[{"role": "system", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to provide your thought process and ultimately present the conclusion in the form of \"Therefore, the final answer is: \")"}, {"role": "user", "content": "def selection_sort(arr):\n    k = 0\n    while k < len(arr):\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n        k += 1\n    return arr"}, {"role": "assistant", "content": "To determine the loop invariant for the i-th iteration of the outer loop in the selection_sort algorithm, we need to consider the properties that are true before the i-th iteration, during the i-th iteration, and after the i-th iteration of the loop.\n\nLet's identify the loop invariant for the i-th iteration of the outer loop:\n\nInitial condition (before the loop starts): At the start of the i-th iteration, the sub-array `arr[0:k]` is sorted in non-decreasing order.\n\nMaintenance (inside the loop): During the i-th iteration, the algorithm selects the smallest element from the sub-array `arr[k:]` and swaps it with the element at index k. After this step, the sub-array `arr[0:k+1]` is sorted in non-decreasing order.\n\nInductive step: After the i-th iteration, the sub-array `arr[0:k+1]` is sorted in non-decreasing order.\n\nTherefore, the final answer is: 'k_value = arr[0:k] is sorted in non-decreasing order'."}, {"role": "user", "content": "def selection_sort(arr):\n    k = -1\n    while k < len(arr) - 1:\n        k += 1\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "To determine the loop invariant for the i-th iteration of the outer loop in the modified selection_sort algorithm, we need to consider the properties that are true before the i-th iteration, during the i-th iteration, and after the i-th iteration of the loop.\n\nLet's identify the loop invariant for the i-th iteration of the outer loop:\n\nInitial condition (before the loop starts): At the start of the i-th iteration, the sub-array `arr[0:k]` is sorted in non-decreasing order, where k is the current value of the outer loop counter.\n\nMaintenance (inside the loop): During the i-th iteration, the algorithm selects the smallest element from the sub-array `arr[k:]` and swaps it with the element at index k. After this step, the sub-array `arr[0:k+1]` is sorted in non-decreasing order.\n\nInductive step: After the i-th iteration, the sub-array `arr[0:k+1]` is sorted in non-decreasing order.\n\nTherefore, the final answer is: 'k_value = arr[0:k] is sorted in non-decreasing order'."}]