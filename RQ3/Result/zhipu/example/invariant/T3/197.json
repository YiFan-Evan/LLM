[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format without any additional text.)(Here is an example: [{'role': 'user', 'content': 'def give_sum(arr):\\n    sum_value = 0\\n    k = 0\\n    while k < len(arr):\\n        sum_value += arr[k]\\n        k += 1\\n    return sum_value'}, {'role': 'assistant', 'content': 'sum_value = sum(arr[0]->arr[k-1])'}, {'role': 'user', 'content': 'def give_sum(arr):\\n    sum_value = 0\\n    k = len(arr)\\n    while k > 0:\\n        k -= 1\\n        sum_value += arr[k]\\n    return sum_value'}, {'role': 'assistant', 'content': 'sum_value = sum(arr[k]->arr[len(arr)-1])'}])"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    r = 0\n    while r < len(arr):\n        z = r + 1\n        while z < len(arr):\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n            z += 1\n        r += 1\n    return arr"}, {"role": "assistant", "content": "\"arr[r]->arr[len(arr)-1] = sorted(arr[r]->arr[len(arr)-1])\""}, {"role": "user", "content": "def selection_sort(arr):\n    r = len(arr)\n    while r > 0:\n        r -= 1\n        z = i\n        while z > 0:\n            z -= 1\n            if arr[z] < arr[r]:\n                temp = arr[r]\n                arr[r] = arr[z]\n                arr[z] = temp\n    return arr"}, {"role": "assistant", "content": "\"It seems there is a mistake in the provided code snippet. The variable `i` is not defined in the user's code, and the loop structure is not correct for the selection sort algorithm. Assuming you want the loop invariant for a correct selection sort implementation with a similar structure, here is the corrected version of the code and the corresponding loop invariant:\\n\\n```python\\ndef selection_sort(arr):\\n    r = len(arr) - 1\\n    while r > 0:\\n        max_index = r\\n        for z in range(r):\\n            if arr[z] > arr[max_index]:\\n                max_index = z\\n        temp = arr[r]\\n        arr[r] = arr[max_index]\\n        arr[max_index] = temp\\n        r -= 1\\n    return arr\\n```\\n\\nFor the i-th iteration of the outer while loop (where `r` starts at `len(arr) - 1` and decrements each iteration):\\n\\n\\\"arr[i+1]->arr[len(arr)-1] = sorted(arr[i+1]->arr[len(arr)-1])\\\"\""}]