[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def find_min(arr):\n    min_value = arr[0]\n    g = 0\n    while g < len(arr):\n        if arr[g] < min_value:\n            min_value = arr[g]\n        g += 1\n    return min_value"}, {"role": "assistant", "content": "\"Related Problem 1:\\n**Problem Description:** Write a function `find_max(arr)` that returns the maximum value in a list of numbers.\\n**Solution:** Initialize `max_value` to `arr[0]` and iterate through the list, updating `max_value` if a larger element is found.\\n**Loop Invariant:** `max_value = max(arr[0->g])`\\n\\nRelated Problem 2:\\n**Problem Description:** Write a function `sum_values(arr)` that calculates the sum of all elements in a list.\\n**Solution:** Initialize `total` to 0 and iterate through the list, adding each element to `total`.\\n**Loop Invariant:** `total = sum(arr[0->g])`\\n\\nRelated Problem 3:\\n**Problem Description:** Write a function `count_zeros(arr)` that counts the number of zeros in a list.\\n**Solution:** Initialize `zero_count` to 0 and iterate through the list, incrementing `zero_count` each time a zero is encountered.\\n**Loop Invariant:** `zero_count = count(arr[0->g], 0)`\\n\\nTherefore, the final answer is:\\n`min_value = min(arr[0->g])`\""}, {"role": "user", "content": "def find_min(arr):\n    min_value = arr[0]\n    g = -1\n    while g < len(arr) - 1:\n        g += 1\n        if arr[g] < min_value:\n            min_value = arr[g]\n    return min_value"}, {"role": "assistant", "content": "\"\\\"Related Problem 1:\\\\n**Problem Description:** Write a function `find_first_positive(arr)` that returns the first positive value in a list of integers, or `None` if no positive value is found.\\\\n**Solution:** Initialize `first_positive` to `None` and iterate through the list, updating `first_positive` if a positive element is found.\\\\n**Loop Invariant:** `first_positive = arr[0->g] if arr[0->g] > 0 else first_positive`\\\\n\\\\nRelated Problem 2:\\\\n**Problem Description:** Write a function `find_last_negative(arr)` that returns the last negative value in a list of integers, or `None` if no negative value is found.\\\\n**Solution:** Initialize `last_negative` to `None` and iterate backwards through the list, updating `last_negative` if a negative element is found.\\\\n**Loop Invariant:** `last_negative = arr[g->len(arr)-1] if arr[g->len(arr)-1] < 0 else last_negative`\\\\n\\\\nRelated Problem 3:\\\\n**Problem Description:** Write a function `find_average(arr)` that calculates the average of all elements in a list of numbers.\\\\n**Solution:** Initialize `total` to 0 and `count` to 0, iterate through the list, adding each element to `total` and incrementing `count`. Then calculate the average.\\\\n**Loop Invariant:** `total = sum(arr[0->g]) and count = g + 1`\\\\n\\\\nTherefore, the final answer is:\\\\n`min_value = min(arr[0->g+1])`\\\" \\n\\nThe loop in the original problem starts with `g = -1` and increments `g` before the condition check, so the first iteration of the loop will actually check `arr[0]`. Therefore, the loop invariant should consider elements from `arr[0]` to `arr[g]` inclusive, but since the loop stops when `g` is less than `len(arr) - 1`, we need to account for the fact that the loop will process `g+1` elements in total, hence `arr[0->g+1]`.\""}]