[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    h = 0\n    while h < len(arr):\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "\"Here are three related but not identical problems, their descriptions, and their solutions:\\n\\n1. **Problem: Bubble Sort**\\n   - **Description**: Sort an array using the bubble sort algorithm, which repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.\\n   - **Solution**: The loop invariant for bubble sort at the i-th iteration could be: `sorted_value = fun(arr[0]->arr[i-1])`, indicating that the subarray from index 0 to i-1 is sorted after i iterations of the inner loop.\\n\\n2. **Problem: Insertion Sort**\\n   - **Description**: Sort an array using the insertion sort algorithm, where each element in the array is iteratively taken and inserted into its correct position in a sub-array that is already sorted.\\n   - **Solution**: The loop invariant for insertion sort at the i-th iteration could be: `sorted_value = fun(arr[0]->arr[i])`, indicating that the subarray from index 0 to i is sorted after i iterations of the loop.\\n\\n3. **Problem: Linear Search**\\n   - **Description**: Find the index of the first occurrence of a target value in an array, or return -1 if the target is not found.\\n   - **Solution**: The loop invariant for linear search at the i-th iteration could be: `searched_value = fun(arr[0]->arr[i])`, indicating that elements from index 0 to i have been searched, and if the target is in that range, it will be found by the i-th iteration.\\n\\nNow, for the original problem, which is the selection sort algorithm:\\n\\nThe loop invariant for the selection sort algorithm at the i-th iteration is:\\n`min_value = fun(arr[i]->arr[len(arr)-1])`\\n\\nThis invariant states that the minimum value in the unsorted portion of the array (from index i to the end of the array) has been found and placed at the beginning of this unsorted portion after i iterations of the outer loop.\\n\\nTherefore, the final answer is: `min_value = fun(arr[i]->arr[len(arr)-1])`\""}, {"role": "user", "content": "def selection_sort(arr):\n    h = -1\n    while h < len(arr) - 1:\n        h += 1\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "\"For the given selection sort algorithm, the loop invariant should describe the state of the array after each iteration of the outer while loop. The outer loop variable `h` starts at -1 and is incremented to 0 at the first iteration, and it represents the index of the current position being sorted.\\n\\nHere are three related but not identical problems, their descriptions, and their solutions:\\n\\n1. **Problem: Find Minimum Element**  \\n   - **Description**: Write a function that finds the minimum element in an unsorted array.\\n   - **Solution**: The loop invariant could be `min_element = fun(arr[0]->arr[h])`, meaning that after `h` iterations, the minimum element in the unsorted portion of the array (from index 0 to h) has been identified.\\n\\n2. **Problem: Swap Elements**  \\n   - **Description**: Write a function that swaps two elements in an array given their indices.\\n   - **Solution**: The loop invariant could be `swapped_value = fun(arr[index1]->arr[index2])`, indicating that the elements at `index1` and `index2` have been swapped.\\n\\n3. **Problem: Partial Array Sort**  \\n   - **Description**: Write a function that partially sorts an array by sorting only the first `n` elements.\\n   - **Solution**: The loop invariant could be `partially_sorted_value = fun(arr[0]->arr[n])`, meaning that the subarray from index 0 to n is sorted.\\n\\nFor the original problem, which is the selection sort algorithm with the outer loop starting at -1, the loop invariant at the i-th iteration (with `h` being the loop control variable) could be stated as:\\n\\n`sorted_subarray_value = fun(arr[0]->arr[h])`\\n\\nThis invariant states that after `h` iterations of the outer loop, the subarray from index 0 to `h` is sorted. Note that the initial value of `h` is -1, but it is immediately incremented to 0, so the sorting process effectively starts from index 0.\\n\\nTherefore, the final answer is: `sorted_subarray_value = fun(arr[0]->arr[h])`\""}]