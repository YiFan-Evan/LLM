[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    i = 0\n    while i < len(arr):\n        z = i + 1\n        while z < len(arr):\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n        i += 1\n    return arr"}, {"role": "assistant", "content": "\"Here are three related but not identical problems:\\n\\n1. **Bubble Sort**:\\n   - **Problem Description**: Implement a function to sort an array using the bubble sort algorithm, which repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.\\n   - **Solution**: The loop invariant for bubble sort at the i-th iteration could be: `arr[0->i-1]_sorted = True`, indicating that the first i elements are sorted.\\n\\n2. **Insertion Sort**:\\n   - **Problem Description**: Write a function to sort an array using the insertion sort algorithm, which builds the final sorted array one item at a time by taking each element from the input data and inserting it into the correct position in a sorted subsection of the array.\\n   - **Solution**: The loop invariant for insertion sort at the i-th iteration could be: `arr[0->i]_sorted = True`, meaning that the subarray consisting of the first i+1 elements is sorted.\\n\\n3. **Merge Sort**:\\n   - **Problem Description**: Develop a function to sort an array using the merge sort algorithm, which is a divide and conquer algorithm that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.\\n   - **Solution**: The loop invariant for merge sort isn't as straightforward because it involves recursive calls. However, at each merge step, the invariant could be: `left_half_sorted = True and right_half_sorted = True`, indicating that each half of the array to be merged is sorted.\\n\\nNow, for the original problem which is the selection sort algorithm:\\n\\nThe loop invariant for the selection sort algorithm at the i-th iteration can be stated as:\\n\\n`arr[0->i-1]_min_value = fun(arr[0->i-1]->arr[i-1])`\\n\\nThis invariant states that after the i-th iteration of the outer loop, the minimum value in the subarray `arr[0->i-1]` is located at the position `arr[i-1]`.\\n\\nTherefore, the final answer is:\\n\\n`arr[0->i-1]_min_value = fun(arr[0->i-1]->arr[i-1])`\""}, {"role": "user", "content": "def selection_sort(arr):\n    i = -1\n    while i < len(arr) - 1:\n        i += 1\n        z = i + 1\n        while z < len(arr):\n            if arr[z] < arr[i]:\n                temp = arr[i]\n                arr[i] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "\"For the provided selection sort algorithm with a slightly modified loop starting index (beginning at `-1` and then incrementing to `0` before entering the loop), the loop invariant at the i-th iteration can be stated as:\\n\\n`arr[0->i]_min_value = fun(arr[0->i]->arr[i])`\\n\\nThis invariant indicates that after each iteration of the outer loop, the minimum value found in the subarray `arr[0->i]` has been placed at the position `arr[i]`. Note that the index `i` is used here as it represents the current position of the minimum value found in the subarray after the i-th iteration.\\n\\nHere are three related but not identical problems:\\n\\n1. **Linear Search Minimum**:\\n   - **Problem Description**: Implement a function that finds the index of the minimum element in an array.\\n   - **Solution**: The loop invariant could be `min_index_value = fun(arr[0->i]->arr[min_index])`, where `min_index` is the index of the minimum value found so far.\\n\\n2. **Minimum Swap Sort**:\\n   - **Problem Description**: Write a function that sorts an array by repeatedly swapping the minimum element found in the unsorted part of the array with the first element of the unsorted part.\\n   - **Solution**: The loop invariant could be `arr[0->i-1]_min_swapped = True`, meaning that the minimum element from the unsorted part has been moved to its correct position at the beginning of the unsorted part.\\n\\n3. **Track Minimum Value**:\\n   - **Problem Description**: Develop a function that tracks the minimum value in an array as it iterates through the array.\\n   - **Solution**: The loop invariant could be `min_value_so_far = fun(arr[0->i]->min_value)`, where `min_value` is the minimum value encountered up to the i-th element.\\n\\nTherefore, the final answer is:\\n\\n`arr[0->i]_min_value = fun(arr[0->i]->arr[i])`\""}]