[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    d = 0\n    while d < len(arr):\n        z = d + 1\n        while z < len(arr):\n            if arr[z] < arr[d]:\n                temp = arr[d]\n                arr[d] = arr[z]\n                arr[z] = temp\n            z += 1\n        d += 1\n    return arr"}, {"role": "assistant", "content": "\"Here are three related but not identical problems:\\n\\n1. **Problem: Bubble Sort**\\n   - **Description:** Implement a bubble sort algorithm to sort an array in ascending order.\\n   - **Solution:** Iterate through the array, compare adjacent elements, and swap them if they are in the wrong order. Repeat this process until the array is sorted.\\n   - **LoopInvariant:** `sorted_value = fun(arr[0..i-1]->arr[0..i-1])` where after the i-th iteration of the outer loop, the first i elements are sorted.\\n\\n2. **Problem: Insertion Sort**\\n   - **Description:** Implement an insertion sort algorithm to sort an array in ascending order.\\n   - **Solution:** Build the sorted array one element at a time by inserting the current element into its correct position within the sorted portion of the array.\\n   - **LoopInvariant:** `sorted_value = fun(arr[0..i]->arr[0..i])` where after the i-th iteration of the loop, the first i+1 elements are sorted.\\n\\n3. **Problem: Linear Search**\\n   - **Description:** Implement a linear search algorithm to find the index of a target value in an array.\\n   - **Solution:** Iterate through the array and compare each element to the target value. Return the index of the target value if found, or -1 if not present.\\n   - **LoopInvariant:** `searched_value = fun(arr[0..i]->arr[0..i])` where after the i-th iteration, the elements up to index i have been checked for the target value.\\n\\nNow, for the original problem which is the selection sort algorithm:\\n\\nTherefore, the final answer is:\\n`min_value = fun(arr[0..d-1]->arr[d])`\\nThis loop invariant states that after the d-th iteration of the outer loop, the minimum value between the start of the array and the current position d has been found and placed at the beginning of the unsorted portion of the array (index d).\""}, {"role": "user", "content": "def selection_sort(arr):\n    d = -1\n    while d < len(arr) - 1:\n        d += 1\n        z = d + 1\n        while z < len(arr):\n            if arr[z] < arr[d]:\n                temp = arr[d]\n                arr[d] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "\"\\\"Here are three related but not identical problems:\\n\\n1. **Problem: Insertion Sort with Sentinel**\\n   - **Description:** Implement an insertion sort algorithm with a sentinel to sort an array in ascending order.\\n   - **Solution:** Place the first element as a sentinel, then iterate through the array, inserting each subsequent element into its correct position in the sorted portion of the array.\\n   - **LoopInvariant:** `sorted_value = fun(arr[0..i-1]->arr[0..i-1])` where after the i-th iteration of the loop, the first i elements are sorted, including the sentinel.\\n\\n2. **Problem: Shaker Sort (also known as cocktail sort)**\\n   - **Description:** Implement a shaker sort algorithm to sort an array in ascending order by alternating between forward and backward passes.\\n   - **Solution:** Perform a forward pass followed by a backward pass, each time bubbling the smallest and largest unsorted elements to their correct positions.\\n   - **LoopInvariant:** `sorted_value = fun(arr[0..i]->arr[0..len(arr)-i-1])` where after the i-th iteration of the outer loop, the first i elements are sorted and the last len(arr)-i-1 elements are sorted.\\n\\n3. **Problem: Counting Sort**\\n   - **Description:** Implement a counting sort algorithm to sort an array of non-negative integers.\\n   - **Solution:** Count the occurrences of each number in the array, then calculate the starting index for each number in the sorted array.\\n   - **LoopInvariant:** `counted_value = fun(arr[0..i]->count[i])` where after processing the i-th element of the array, the count of each number up to that point is accurate.\\n\\nNow, for the original problem which is the selection sort algorithm with the initial value of `d` set to `-1`:\\n\\nTherefore, the final answer is:\\n`min_value = fun(arr[0..d]->arr[d+1])`\\nThis loop invariant states that after the d-th iteration of the outer loop (with d starting at -1), the minimum value between the start of the array and the current position d+1 (since d starts at -1, d+1 is the actual index) has been found and placed at the beginning of the unsorted portion of the array (index d+1).\\\"\""}]