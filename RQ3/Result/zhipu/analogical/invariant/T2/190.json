[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    k = 0\n    while k < len(arr):\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n        k += 1\n    return arr"}, {"role": "assistant", "content": "\"Here are three related problems:\\n\\n1. **Problem 1: Bubble Sort**\\n   - **Description:** Implement a bubble sort algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\\n   - **Solution Loop Invariant:** `arr[0->i] = fun(arr[0->i])` where `fun` represents the property that the subarray `arr[0->i]` is sorted after each iteration of the inner loop, and `i` is the current index of the outer loop.\\n\\n2. **Problem 2: Insertion Sort**\\n   - **Description:** Sort an array using insertion sort, where each element in the array is iteratively taken and inserted into its correct position in a sub-array that is already sorted.\\n   - **Solution Loop Invariant:** `arr[0->j] = fun(arr[0->j])` where `fun` indicates that the sub-array `arr[0->j]` is sorted at the end of each outer loop iteration, with `j` being the current index in the array.\\n\\n3. **Problem 3: Merge Sort (Divide and Conquer)**\\n   - **Description:** Sort an array using merge sort, which is a divide and conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.\\n   - **Solution Loop Invariant:** Since merge sort is recursive and not iterative, a loop invariant in the traditional sense doesn't apply. However, a similar concept would be `left_half[0->mid] = fun(left_half[0->mid])` and `right_half[mid+1->end] = fun(right_half[mid+1->end])` after each merge operation, indicating that both halves are sorted before they are merged.\\n\\nNow, for the original problem which involves the selection sort algorithm:\\n\\n**Therefore, the final answer is:**\\n`arr[0->k-1] = fun(arr[0->k-1])` where `fun` represents the property that the subarray `arr[0->k-1]` contains the smallest `k` elements in sorted order after each iteration of the outer loop, and `k` is the current index of the outer loop at the i-th iteration.\""}, {"role": "user", "content": "def selection_sort(arr):\n    k = -1\n    while k < len(arr) - 1:\n        k += 1\n        z = k + 1\n        while z < len(arr):\n            if arr[z] < arr[k]:\n                temp = arr[k]\n                arr[k] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "\"For the modified `selection_sort` function provided, here are three related problems along with their descriptions and loop invariants:\\n\\n1. **Problem 1: Find Minimum Element**\\n   - **Description:** Write a program that finds the minimum element in an unsorted array.\\n   - **Solution Loop Invariant:** `min_value = fun(arr[0->i])` where `fun` indicates that `min_value` holds the minimum value found in the subarray `arr[0->i]` after each iteration of the loop, and `i` is the current index.\\n\\n2. **Problem 2: Swap Elements**\\n   - **Description:** Create a function that swaps two specified elements in an array if the first is greater than the second.\\n   - **Solution Loop Invariant:** `arr[xxx->yyy] = fun(arr[xxx->yyy])` where `fun` shows that the elements at indices `xxx` and `yyy` have been swapped if `arr[xxx] > arr[yyy]`, and `xxx` and `yyy` are the indices of the two elements being compared.\\n\\n3. **Problem 3: Linear Search**\\n   - **Description:** Implement a linear search algorithm to find the index of the first occurrence of a specific value in an array.\\n   - **Solution Loop Invariant:** `found_index_value = fun(arr[0->i], search_value)` where `fun` represents the property that `found_index_value` holds the index of the first occurrence of `search_value` in the subarray `arr[0->i]` if it exists, or `-1` if it does not, after each iteration of the loop.\\n\\nNow, for the original problem with the modified `selection_sort` function:\\n\\n**Therefore, the final answer is:**\\n`arr[0->k] = fun(arr[0->k])` where `fun` indicates that the subarray `arr[0->k]` is sorted and contains the smallest `k+1` elements in their correct positions in the array after `k+1` iterations of the outer loop, with `k` being the current index of the outer loop at the i-th iteration. Note that the loop starts with `k = -1` and increments `k` before entering the inner loop, so the first iteration of the outer loop effectively starts with `k = 0`.\""}]