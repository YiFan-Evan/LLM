[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    e = 0\n    while e < len(arr):\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n        e += 1\n    return arr"}, {"role": "assistant", "content": "\"Here are three related problems, their descriptions, and solutions:\\n\\n1. **Problem: Bubble Sort**\\n   - **Description:** Implement a bubble sort algorithm that sorts an array in ascending order by repeatedly stepping through the list, comparing adjacent elements, and swapping them if they are in the wrong order.\\n   - **Solution Loop Invariant:** `sorted_prefix_value = fun(arr[0]->arr[e-1])` at the e-th iteration, indicating that the subarray from the start to the element before `e` is sorted.\\n\\n2. **Problem: Insertion Sort**\\n   - **Description:** Write an insertion sort function that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.\\n   - **Solution Loop Invariant:** `sorted_prefix_value = fun(arr[0]->arr[i-1])` after the i-th iteration, which means that the first `i` elements are sorted.\\n\\n3. **Problem: Linear Search**\\n   - **Description:** Create a function that searches for the first occurrence of an element in an array and returns its index. If the element is not found, return -1.\\n   - **Solution Loop Invariant:** `element_not_found_before_value = fun(arr[0]->arr[i-1], target)` at the i-th iteration, meaning that if the target has not been found in the elements before index `i`, the loop continues.\\n\\nNow, for the original problem with the `selection_sort` function:\\n\\n- **Loop Invariant:** `min_value = fun(min(arr[e+1]->arr[n-1]), arr[e])` at the e-th iteration, indicating that the smallest value in the unsorted subarray `arr[e+1]->arr[n-1]` has been found and is at the position `e`.\\n\\nTherefore, the final answer is:\\n\\n`min_value = fun(min(arr[e+1]->arr[n-1]), arr[e])`\""}, {"role": "user", "content": "def selection_sort(arr):\n    e = -1\n    while e < len(arr) - 1:\n        e += 1\n        z = e + 1\n        while z < len(arr):\n            if arr[z] < arr[e]:\n                temp = arr[e]\n                arr[e] = arr[z]\n                arr[z] = temp\n            z += 1\n    return arr"}, {"role": "assistant", "content": "\"\\\"Here are three related problems, their descriptions, and solutions:\\n\\n1. **Problem: Find Minimum Element** \\n   - **Description:** Write a function that finds the minimum element in an array.\\n   - **Solution Loop Invariant:** `min_element_so_far_value = fun(min(arr[0]->arr[e]), arr[e])` at the e-th iteration, which means that `arr[e]` holds the smallest value found in the array from index 0 to e.\\n\\n2. **Problem: Find Maximum Element**\\n   - **Description:** Write a function that finds the maximum element in an array.\\n   - **Solution Loop Invariant:** `max_element_so_far_value = fun(max(arr[0]->arr[e]), arr[e])` at the e-th iteration, which indicates that `arr[e]` holds the largest value found in the array from index 0 to e.\\n\\n3. **Problem: Simple Swap Function**\\n   - **Description:** Write a function that swaps two elements in an array given their indices.\\n   - **Solution Loop Invariant:** `elements_swapped_value = fun(arr[i], arr[j])` after the swap operation, which means that the elements at indices i and j have been exchanged.\\n\\nNow, for the original problem with the `selection_sort` function:\\n\\n- **Loop Invariant:** `min_value_in_unsorted_subarray_value = fun(min(arr[e+1]->arr[n-1]), arr[e])` at the e-th iteration, indicating that `arr[e]` holds the minimum value from the unsorted subarray `arr[e+1]->arr[n-1]`.\\n\\nTherefore, the final answer is:\\n\\n`min_value_in_unsorted_subarray_value = fun(min(arr[e+1]->arr[n-1]), arr[e])`\\\"\""}]