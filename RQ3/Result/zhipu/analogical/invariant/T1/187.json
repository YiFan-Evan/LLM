[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    h = 0\n    while h < len(arr):\n        z = h + 1\n        while z < len(arr):\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "\"Here are three related problems, their descriptions, and their solutions:\\n\\n1. Problem: Implement a function that finds the minimum element in an unsorted array.\\n   Description: Write a function that iterates through an array and returns the smallest element.\\n   Solution: Initialize a variable to hold the minimum value and iterate through the array, updating the minimum value whenever a smaller element is found.\\n\\n   Loop Invariant: `min_value = min(arr[0]->arr[i])`\\n\\n2. Problem: Implement a function that sorts an array in ascending order using the insertion sort algorithm.\\n   Description: Write a function that iterates through an array and for each element, inserts it into its correct position in a sorted subarray.\\n   Solution: Start with the second element and compare it with elements in the sorted subarray, shifting elements as necessary to make space and then insert the element.\\n\\n   Loop Invariant: `sorted_subarray = arr[0]->arr[i] is sorted`\\n\\n3. Problem: Implement a function that computes the sum of all elements in an array.\\n   Description: Write a function that iterates through an array and accumulates the sum of its elements.\\n   Solution: Initialize a sum variable to zero and add each element of the array to this sum.\\n\\n   Loop Invariant: `sum_value = sum(arr[0]->arr[i])`\\n\\nNow, for the original problem which is the selection sort algorithm:\\n\\nLoop Invariant: `arr[0]->arr[h-1] is sorted`\\n\\nTherefore, the final answer is: `arr[0]->arr[h-1] is sorted`\""}, {"role": "user", "content": "def selection_sort(arr):\n    h = 0\n    while h <= len(arr) - 1:\n        z = h + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[h]:\n                temp = arr[h]\n                arr[h] = arr[z]\n                arr[z] = temp\n            z += 1\n        h += 1\n    return arr"}, {"role": "assistant", "content": "\"For the provided `selection_sort` function, here are three related problems, their descriptions, and their solutions, along with the loop invariants for each:\\n\\n1. Problem: Implement a function that finds the maximum element in an unsorted array.\\n   Description: Write a function that iterates through an array and returns the largest element.\\n   Solution: Initialize a variable to hold the maximum value and iterate through the array, updating the maximum value whenever a larger element is found.\\n   Loop Invariant: `max_value = max(arr[0]->arr[i])`\\n\\n2. Problem: Implement a function that sorts an array in descending order using the bubble sort algorithm.\\n   Description: Write a function that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.\\n   Solution: Repeat the process until the list is sorted, with each pass through the list ensuring that the next largest element is moved to its correct position.\\n   Loop Invariant: `arr[0]->arr[i-1] contains the i-th largest element in its correct position`\\n\\n3. Problem: Implement a function that reverses the elements of an array.\\n   Description: Write a function that iterates through an array and reverses the order of the elements.\\n   Solution: Swap elements from the start and the end of the array, moving towards the center until the entire array is reversed.\\n   Loop Invariant: `arr[0]->arr[i] is the reverse of arr[0]->arr[len(arr)-i-1]`\\n\\nNow, for the original problem which is the selection sort algorithm:\\n\\nLoop Invariant: `arr[0]->arr[h-1] contains the smallest h elements in sorted order`\\n\\nTherefore, the final answer is: `arr[0]->arr[h-1] contains the smallest h elements in sorted order`\""}]