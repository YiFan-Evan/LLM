[{"role": "user", "content": "In the following questions, I will provide a target Python program code. The code is a program containing a loop, and the purpose of the code is indicated by its function name. Please provide a loop invariant for the i-th iteration of the loop to prove the partial correctness of the program. The loop invariant should be written in the form 'xxx_value = fun(arr[xxx]->arr[xxx])'. (Please note that your answer should only contain statements in the specified format.)(For each problem, you need to first present three related but not identical problems, along with a description of each problem and its solution. Finally, provide the answer to the original problem in the form of \"Therefore, the final answer is: \".)"}, {"role": "assistant", "content": "OK."}, {"role": "user", "content": "def selection_sort(arr):\n    s = 0\n    while s < len(arr):\n        z = s + 1\n        while z < len(arr):\n            if arr[z] < arr[s]:\n                temp = arr[s]\n                arr[s] = arr[z]\n                arr[z] = temp\n            z += 1\n        s += 1\n    return arr"}, {"role": "assistant", "content": "\"Here are three related but not identical problems:\\n\\n1. **Problem 1: Bubble Sort**\\n   - **Description:** Implement a bubble sort algorithm to sort an array in ascending order. The algorithm repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order.\\n   - **Solution LoopInvariant:** `min_index_value = min(arr[0]->arr[i])` for the i-th iteration of the outer loop.\\n\\n2. **Problem 2: Insertion Sort**\\n   - **Description:** Write a function that uses insertion sort to sort an array. It builds the final sorted array one item at a time, taking each element from the input data and inserting it into the correct position in the sorted array.\\n   - **Solution LoopInvariant:** `sorted_prefix_value = is_sorted(arr[0]->arr[i-1])` for the i-th iteration of the loop.\\n\\n3. **Problem 3: Merge Sort**\\n   - **Description:** Develop a merge sort function that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.\\n   - **Solution LoopInvariant:** `sorted_value = is_sorted(merge_sort(arr[0]->arr[i]))` for the recursive calls (not an iterative loop, but the concept of invariants applies).\\n\\nNow, for the original problem, which involves the selection sort algorithm:\\n\\n**Therefore, the final answer is:**\\n`min_value_in_segment_value = min(arr[s]->arr[z])` for the i-th iteration of the inner loop, where `s` is the starting index of the current segment and `z` is the current index in the array during the iteration. This invariant holds because at each iteration of the inner loop, the variable `min_value_in_segment` is being updated to hold the minimum value found so far in the segment from index `s` to the end of the array.\""}, {"role": "user", "content": "def selection_sort(arr):\n    s = 0\n    while s <= len(arr) - 1:\n        z = s + 1\n        while z <= len(arr) - 1:\n            if arr[z] < arr[s]:\n                temp = arr[s]\n                arr[s] = arr[z]\n                arr[z] = temp\n            z += 1\n        s += 1\n    return arr"}, {"role": "assistant", "content": "\"For the provided `selection_sort` function, the loop invariant for the i-th iteration of the outer loop can be stated as follows:\\n\\n- **Outer LoopInvariant:** `arr[0..s-1]` is sorted and contains the same elements as the original array for the first `s` elements, for the s-th iteration of the outer loop.\\n\\nNow, here are three related problems with their descriptions and the corresponding loop invariants:\\n\\n1. **Problem 1: Find-Minimum Selection Sort Variant**\\n   - **Description:** Modify the selection sort algorithm to find the minimum element instead of the maximum and sort the array in ascending order.\\n   - **LoopInvariant:** `min_element_value = min(arr[0..s-1])` for the s-th iteration of the outer loop.\\n\\n2. **Problem 2: Partial Sum Calculation**\\n   - **Description:** Write a function that calculates the partial sum of an array up to a certain index, updating the array in place with the cumulative sum.\\n   - **LoopInvariant:** `cumulative_sum_value = sum(arr[0..s-1])` for the s-th iteration of the loop.\\n\\n3. **Problem 3: Reverse Selection Sort**\\n   - **Description:** Adapt the selection sort algorithm to sort the array in descending order.\\n   - **LoopInvariant:** `max_element_value = max(arr[0..s-1])` for the s-th iteration of the outer loop.\\n\\nFor the original problem, the loop invariant for the i-th (or s-th) iteration of the outer loop of the `selection_sort` function is:\\n\\n**Therefore, the final answer is:**\\n`arr[0..s-1]_sorted_value = is_sorted(arr[0..s-1])` for the s-th iteration of the outer loop, where `is_sorted` implies that the subarray `arr[0..s-1]` is sorted in ascending order. This invariant holds because each iteration of the outer loop places the smallest unsorted element in its correct position at the beginning of the unsorted segment of the array.\""}]